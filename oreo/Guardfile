# A sample Guardfile
# More info at https://github.com/guard/guard#readme
require 'guard'
require 'guard/guard'
require 'guard/watcher'

require 'net/dav'
require 'colorize'
require 'terminal-notifier-guard'

require 'yaml'

module ::Guard

    module Notifier
        def self.success(message, title)
            if ::TerminalNotifier::Guard::available? then
                ::TerminalNotifier::Guard.success(message, :title => title)
            end
        end
    end

    class Demandware < Guard
        def initialize(watchers = [], options = {})
            super
            
            config = YAML.load_file 'dev.yaml'
            @remote_dir = config['cartridges']['remote_dir']
            @remote_host = config['host']
            @user = config['user']
            @password = config['password']

        end

        def upload_changes(paths)
            Notifier::success('Upload Started', 'Demandware')

            puts "[demandware]".yellow

            paths.each do | path |
                local_path = "cartridges/#{path}"
                remote_url = "https://#{@remote_host}/#{@remote_dir}/#{path}"

                puts "uploading ".green + "#{path}"

                dav = Net::DAV.new(remote_url, :curl => true);
                dav.verify_server = false;
                dav.credentials(@user, @password);
                if File.exists?(local_path) then
                    File.open(local_path, "r") do |io| 
                        size = File.size(local_path)
                        dav.put(remote_url, io, size);
                    end
                end
            end

            Notifier::success('Upload Completed', 'Demandware')
        end

        def run_on_modifications(paths)
            upload_changes paths
        end

        def run_on_additions(paths)
            upload_changes paths
        end
    end

    class Compass < Guard
        def initialize(watchers = [], options = {})
            super
            @project_path = File.expand_path(options[:project_path])

            puts "project_path: #{@project_path}"
        end

        def run_on_changes(paths)
            puts "[compass]".yellow

            if @project_path != nil then
                Notifier::success('Compass Started', 'Demandware')

                paths.each do | path |
                    path = File.expand_path(path)

                    command = "compass compile #{@project_path} #{path}"
                    system command
                end
                Notifier::success('Compass Completed', 'Demandware')
            else
                puts "Please set the :project_path option"
            end
        end
    end
end

interactor :off

guard :demandware do
    watch /cartridges\/(.+\.(ds|jpg|png|css|js|xml|isml|properties|wsdl))/ do |m|
        m[1]
    end
end

guard :compass, :project_path => "cartridges/converse_core/cartridge/static/default/css/package" do
  watch /(.*)\.s[ac]ss$/
end
