importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libStringUtilsExt.ds");

importScript( "SigmaConstants.ds" );

(function(){
    var sigmaNS = integration.sigma;
    var SigmaConstants = sigmaNS.SigmaConstants;
    var ConverseConstants = converse.constants;
    
    var SigmaUtils = {
        
        getProductNumber: function(item : ItemSummary) : String {
            let productInfo = this.getSigmaProductInfo(item);
            return this.formatProductNumber(productInfo);
        }, 
    
        formatProductNumber: function(productInfo) : String {
            var productNumber = "";
            var formattedSku = StringUtilsExt.rpad(productInfo.sku, SigmaConstants.SkuLength, SigmaConstants.Spacer);
            var formattedSize = StringUtilsExt.rpad(productInfo.size, SigmaConstants.SizeLength, SigmaConstants.Spacer);
            var formattedWidth = StringUtilsExt.rpad(productInfo.width, SigmaConstants.WidthLength, SigmaConstants.Spacer);

            productNumber += formattedSku + 
                SigmaConstants.Spacer + 
                this.getFormattedValue(formattedWidth, SigmaConstants.WidthLength) + 
                SigmaConstants.Spacer +
                this.getFormattedValue(formattedSize, SigmaConstants.SizeLength);

            return productNumber;
        },
        
        getFormattedValue: function(value: String, valueLength: Number) : String {
            return empty(value) ? StringUtilsExt.rpad(SigmaConstants.Spacer, valueLength, SigmaConstants.Spacer) : value;
        },
        
        formatOrderStatusResponse: function(response) {
            var formattedResponse: String = 
                "responseCode: " + response.responseCode +
                ", responseMessage: " + response.responseMessage;

            if (!empty(response.detailLines)) {
                formattedResponse +=  ", details: [\n";
                response.detailLines.forEach(function(detail) {
                    formattedResponse += (detail.lineIndicator + " => " + detail.text + "\n"); 
                }); 
                formattedResponse +=  "]";
            }
            
            return "{" + formattedResponse + " }";
        },
        
        formatOrderTransResponse: function(response) {
            var formattedResponse: String = "";
            
            formattedResponse += " {" +
                "responseCode: " + response.responseCode +
                ", responseMessage: " + response.responseMessage +
                ", tax: " + (response.orderInfo && response.orderInfo.defaultTaxCharge) +
                " }";

            return formattedResponse;
        },
        
        getSigmaProductInfo: function(item: ItemSummary) : Object {
            var productSize: String = SigmaConstants.DefaultSize;
            var productWidth: String = SigmaConstants.DefaultWidth;
            
            if (!item.isGiftCard() && !empty(item.getPillar())) {
                if (!item.isOneSized()) {
                    productSize = item.getSize();
                }
                
                if (item.getPillar().toLowerCase() === ConverseConstants.Pillar.Sneakers) {
                    productWidth = SigmaConstants.ShoeWidth;
                }
            }
            
            if (productSize == 'S') {
            	productSize = 'SM'
            }
            
            return {
                "sku": item.getManufacturerSKU(),
                "name": item.getName(),
                "size": productSize,
                "width": productWidth,
                "quantity": item.getQuantity(),
                "unitPrice": item.getUnitPrice()
            };
        },
        
        //TODO: replace Shipment with ShipmentSummary when refactoring SigmaOrderStatusService service to introduce summary objects
        getShipmentType: function(shipment : Shipment) : String {
	        var productType : String = shipment.custom.productType;
	        return (productType === converse.constants.ProductType.C1) ? SigmaConstants.ShipmentType.DYO : SigmaConstants.ShipmentType.Inline;
	    }, 
        
        //TODO: replace Shipment with ShipmentSummary and Order with OrderSummary when refactoring SigmaOrderStatusService service to introduce summary objects
        getOrderType: function(order : Order, shipment : Shipment) : Number {
            var productType : String = shipment.custom.productType;
            
            if (productType === converse.constants.ProductType.C1) {
                return SigmaConstants.OrderType.DYO;
            }
            else if (this.hasEmployeeCoupon(order)) {
                return SigmaConstants.OrderType.Employee;
            }
            else {
                return SigmaConstants.OrderType.Default;
            }
        },
        
        //TODO: replace Order with OrderSummary when refactoring SigmaOrderStatusService service to introduce summary objects
        hasEmployeeCoupon: function(order : Order) : Boolean {
            var coupon = order.getCouponLineItem(converse.constants.CouponCode.Employee);
            return !empty(coupon);
        },
        
        getCompanyNumberByOrderType: function(orderType : Number) : Number {
            return (orderType === SigmaConstants.OrderType.DYO) ? 
                            SigmaConstants.ConverseOneCompanyNumber : 
                            SigmaConstants.ConverseCompanyNumber;
        }
    };
    
    Namespace.extend(sigmaNS, {
        SigmaUtils: SigmaUtils
    });
    
})();
