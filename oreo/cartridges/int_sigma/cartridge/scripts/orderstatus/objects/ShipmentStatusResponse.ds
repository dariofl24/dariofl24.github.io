importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");

importScript( "SigmaConstants.ds" );

(function() {

    var ORDER_STATUS_LINE_INDICATOR : Number = 2,
        ITEM_STATUS_LINE_INDICATOR : Number = 50;

    var ORDER_STATUS_REGEX : RegExp = /:(.*)/,
        ITEM_STATUS_REGEX : RegExp = /^\s*(\w+)\s+.*s*\d+\.\d+\s+(.*$)/;

    var sigmaNS = integration.sigma,
        SigmaConstants = sigmaNS.SigmaConstants,
        SigmaUtils = sigmaNS.SigmaUtils;

    var ShipmentStatusResponse = Class.extend({

        init: function (response) {
            this.responseCode = response.responseCode;
            this.responseMessage = response.responseMessage;
            this.orderStatus = null;
            this.itemStatuses = new HashMap();

            this.processActivityDetails(response);
        },

        processActivityDetails: function(response) {
            if (!empty(response.detailLines)) {
                for each (let detailLine : String in response.detailLines) {
                    this.processActivityDetail(detailLine);
                }
            }
        },

        processActivityDetail: function(detailLine : String) {
            let lineIndicator : Number = detailLine.lineIndicator;
            let text : String = detailLine.text;

            if (lineIndicator === ORDER_STATUS_LINE_INDICATOR) {
                this.orderStatus = this.extractOrderStatus(text);
            } else if (lineIndicator === ITEM_STATUS_LINE_INDICATOR) {
                let itemStatus = this.extractItemStatus(text);
                
                if (!empty(itemStatus) && !this.itemStatuses.containsKey(itemStatus.key)) {
                    this.itemStatuses.put(itemStatus.key, itemStatus.value);
                }
            }
        },

        extractOrderStatus: function(text : String) : String {
            let tokens : Array = text.match(ORDER_STATUS_REGEX);
            
            // removing "Order status :" prefix
            if (!empty(tokens) && tokens.length == 2) {
                let token : String = StringUtils.trim(tokens[1]);
                
                if (!empty(token)) {
                    return token;
                }
            }

            return text;
        },

        extractItemStatus: function(text : String) : Object {
            let tokens : Array = text.match(ITEM_STATUS_REGEX);
            
            if (!empty(tokens) && tokens.length == 3) {
                let id : String = StringUtils.trim(text);
                let status : String = StringUtils.trim(tokens[2]);

                if (!empty(id) && !empty(status)) {
                    return {
                        key: id,
                        value : status
                    };
                }
            }

            return null;
        },

        findItemStatusByProductNumber: function(productNumber : String) : String {
            if (!empty(this.itemStatuses)) {
                for each (let itemId : String in this.itemStatuses.keySet()) {
                    if (itemId.indexOf(productNumber) == 0) {
                        return this.itemStatuses.get(itemId);
                    }
                }
            }

            return null;
        }

    });

    var ns = Namespace.extendFromString(integration, "sigma.orderstatus.objects");
    Namespace.extend(ns, { ShipmentStatusResponse: ShipmentStatusResponse });
})();
