importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("converse_core:cart/objects/BasketSummaryHelper.ds");

importScript("SigmaConstants.ds");
importScript("SigmaUtils.ds");
importScript("SigmaSoapServices.ds");
importScript("orderstatus/command/GetShipmentStatus.ds");

(function () {

    var sigmaNS = integration.sigma,
        SigmaConstants = sigmaNS.SigmaConstants,
        SigmaUtils = sigmaNS.SigmaUtils,
        SigmaOrderStatusSoapService =  sigmaNS.SigmaOrderStatusSoapService,
        GetShipmentStatus = sigmaNS.orderstatus.command.GetShipmentStatus;
            
    function getOrderStatus(order : Order) : Object {
        var responsesMap : Map = new HashMap();
        var service = new SigmaOrderStatusSoapService();
        var commandsMap : Map = createGetShipmentStatusCommands(order);
        
        for each (let shipmentType : String in commandsMap.keySet()) {
            let command = commandsMap.get(shipmentType); 
            let status = service.call(command);
            let shipmentStatus = command.responseObject;
            shipmentStatus.shipmentType = shipmentType;
            
            responsesMap.put(shipmentType, shipmentStatus);
        }
        
        return {
            getStatuses: function() : Map {
                return responsesMap;
            },
            getInlineStatus : function() : Object {
                return this.getStatuses().get(SigmaConstants.ShipmentType.Inline);
            },
            getDYOStatus : function() : Object {
                return this.getStatuses().get(SigmaConstants.ShipmentType.DYO);
            } 
        };
    }
    
    function createGetShipmentStatusCommands(order : Order) : Map {
        var commandsMap : Map = new HashMap(); 
        
        for each (let shipment : Shipment in order.getShipments()) {
            var shipmentType : String = SigmaUtils.getShipmentType(shipment);
            var sigmaOrderID : String = shipment.custom.sigmaOrderID;
            
            if (!commandsMap.containsKey(shipmentType) && !empty(sigmaOrderID)) {
                var command = createGetShipmentStatusCommand(order, shipment);
                
                commandsMap.put(shipmentType, command);
            }
        }
        
        return commandsMap;
    }
    
    function createGetShipmentStatusCommand(order : Order, shipment : Shipment) : Object {
        var transactionID : String = order.getCustomerNo();
        var orderType : Number = SigmaUtils.getOrderType(order, shipment);
        var activityNumber : String = shipment.custom.sigmaOrderID;
        
        return new GetShipmentStatus(transactionID, orderType, activityNumber);
    }
    
    function applyOrderStatus(order : Order) {
        var orderStatus = getOrderStatus(order);
        
        for each (let shipment : Shipment in order.getShipments()) {
            var shipmentType : String = SigmaUtils.getShipmentType(shipment);
            var shipmentStatus = orderStatus.getStatuses().get(shipmentType);
            
            applyShipmentStatus(shipment, shipmentStatus);
        }
    }
    
    function applyShipmentStatus(shipment : Shipment, shipmentStatus : Object) {
        if (empty(shipmentStatus)) return;
        
        for each (let item : ProductLineItem in shipment.getProductLineItems()) {
            applyItemStatus(item, shipmentStatus);
        }
    }
    
    function applyItemStatus(item : ProductLineItem, shipmentStatus : Object) {
        var itemSummary = cart.objects.BasketSummaryHelper.getItemSummary(item);
        var productNumber : String = SigmaUtils.getProductNumber(itemSummary);
        var itemStatus : String = shipmentStatus.findItemStatusByProductNumber(productNumber);//TODO: check impact and handle order status item mappings
        
        if (empty(itemStatus)) {
            itemStatus = shipmentStatus.orderStatus;
        } else if (shipmentStatus.shipmentType === SigmaConstants.ShipmentType.DYO) {
            itemStatus = itemStatus.replace(SigmaConstants.ItemStatus.Shipped, SigmaConstants.ItemStatus.Processed);
        }
        
        item.custom.sigmaLineItemStatus = itemStatus;
    }

    Namespace.extend(sigmaNS, {
        orderstatus: {
            SigmaOrderStatusService: {
                getOrderStatus: getOrderStatus,
                applyOrderStatus: applyOrderStatus
            }
        }
    });

})();
