/**
 * CalculateSigmaTax.ds
 *
 * This script determines and applies the tax rates on each of the available shipment types (regular or dyo)
 *
 * @input  Basket : dw.order.Basket
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.value );

importScript( "converse_core:constants.ds" );
importScript( "converse_core:product/ProductUtils.ds" );
importScript( "converse_core:cart/CartUtils.ds" );
importScript( "converse_core:cart/TaxUtils.ds" );
importScript( "converse_core:cart/objects/BasketSummaryHelper.ds" );

importScript( "int_sigma:tax/services/SigmaTaxService.ds" );
importScript( "converse_featuretoggle:lib/FeatureToggleService.ds" );

let ProductType = converse.constants.ProductType;
let CART_OBJS = cart.objects;
let featureToggleService = converse.featuretoggle.FeatureToggleService;

function execute( pdict : PipelineDictionary ) : Number
{   
    let basket: Basket = pdict.Basket;

    if (CartUtils.notEmpty(basket) && !containsGiftCardsOnly(basket)) {
        let basketSummary: BasketSummary = CART_OBJS.BasketSummaryHelper.getBasketSummary(basket);
        let SigmaService = integration.sigma.tax.SigmaTaxService;
        let shipments : Iterator = basketSummary.getShipmentSummaryList().iterator();
        let taxRatePerShipment = {};
        
        while (shipments.hasNext())
        {
            let shipmentSummary : ShipmentSummary = shipments.next();
            
            if ((featureToggleService.getFeature("no-taxes-for-orders-with-promotions").isEnabled() && shipmentSummary.hasDiscounts()) || shipmentSummary.hasOrderLevelDiscounts()) {
                return PIPELET_ERROR;
            }
            
            let itemSummaries : List = shipmentSummary.getItemSummaryList();
            
            if (itemSummaries.length > 0) {
                let firstItemSummary : ItemSummary = itemSummaries[0];
                let sigmaResponse = SigmaService.calculateTax(shipmentSummary, basketSummary.getBillingAddress());
                
                if (sigmaResponse.isSuccess()) {
                    let taxRate : Number = TaxUtils.calculateTaxRate(sigmaResponse.tax, firstItemSummary.getPrice());
                    
                    taxRatePerShipment[shipmentSummary.getProductType()] = {
                        referenceItemSku: firstItemSummary.getSku().toLowerCase(),
                        taxRate: taxRate,
                        taxBasis: firstItemSummary.getPrice()
                    };
                } else {
                    return PIPELET_ERROR;
                }
            }
        }

        CartUtils.applyTaxes(basket, taxRatePerShipment);
    }

    return PIPELET_NEXT;
}

function containsGiftCardsOnly(basket: Basket) {
    var shipmentType = basket.getShipments()[0].custom.productType;

    return (basket.getShipments().length === 1 
            && (shipmentType === ProductType.PhysicalGiftCard
                || shipmentType === ProductType.ElectronicGiftCard));
}