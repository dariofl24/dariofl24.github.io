importPackage(dw.svc);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.crypto);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:util/SoapUtils.ds");
importScript("converse_core:util/TimeUtils.ds");
importScript("pickuppoint/SearchResultConverter.ds");
importScript("int_pickuppoint:objects/PickupPointSearchResult.ds");

var logger = Logger.getLogger("PostNLLocationServiceInit");
logger.info("PostNLLocation service registry");

var SoapUtils = converse.webservices.SoapUtils;
var PickupPointSearchResult = integration.pickuppoint.objects.PickupPointSearchResult;
var SearchResultConverter = integration.pickuppoint.SearchResultConverter;

ServiceRegistry.configure("PostNLLocationService.GetNearestLocations", {
    initServiceClient: function() {
        this.webreference = webreferences2.LocationWebService;
        return this.webreference.getDefaultService();
    },

    createRequest: function(svc : SOAPService, args : Object) : Object {
        var username : String = svc.getConfiguration().getCredential().getUser();
        var password : String = svc.getConfiguration().getCredential().getPassword();
        var hashedPassword : String = hashPassword(password);
        
        SoapUtils.setUsernameAndPassword(svc, username, hashedPassword, false);
        
        var locationRequest = createLocationRequest(this.webreference, args);
        return locationRequest;
    },

    execute: function(svc : SOAPService, locationRequest : Object) {
        return svc.serviceClient.getNearestLocations(locationRequest); 
    },

    parseResponse: function(service : SOAPService, response : Object) : Object {
        return SearchResultConverter.from(response);
    }
});

function createLocationRequest(webreference, args) : Object {
    var locationRequest = new webreference.GetNearestLocationsRequest();
    locationRequest.setCountrycode("NL");
    
    var location = new webreference.Location();
    location.setPostalcode(args.postCode);
    location.setDeliveryDate(args.deliveryDate);

    var deliveryOptions = new webreference.ArrayOfstring();
    for each (let deliveryOption : String in args.deliveryOptions) {
        deliveryOptions.getString().add(deliveryOption);
    }
    
    location.setDeliveryOptions(deliveryOptions);
    
    locationRequest.setLocation(location);
    
    var messageInfo = new webreference.Message();
    messageInfo.setMessageID(UUIDUtils.createUUID());
    messageInfo.setMessageTimeStamp(TimeUtils.getFormattedTimestamp());
    
    locationRequest.setMessage(messageInfo);
    
    return locationRequest;
}

function hashPassword(password : String) : String {
    return Encoding.toHex(new MessageDigest(MessageDigest.DIGEST_SHA_1).digestBytes(new Bytes(password)));
}