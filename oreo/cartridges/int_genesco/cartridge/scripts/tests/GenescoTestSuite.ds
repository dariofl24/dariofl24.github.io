/**
 * @input Unit: Object
 */

importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds"); 
importScript("module_test:Mocks/BasketSummaryMocks.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");

importScript("int_genesco:command/CommandFactory.ds");
importScript("int_genesco:objects/RequestHelpers.ds");
importScript("int_genesco:objects/PaymentHelpers.ds");

function execute(args: PipelineDictionary) {
    let GENESCO_COMMANDS = integration.genesco.command;
    let TEST_MOCKS = converse.test.mocks;
    let CONSTANTS = converse.constants;
    let CART_OBJECTS = cart.objects;

    let createOrderAddress = function () {
        return {
            firstName: "testFirstName",
            lastName: "testLastName",
            phone: "testPhone",
            address1: "testAddress1",
            address2: "testAddress2",
            city: "testCity",
            state: "testState",
            postalCode: "testP"
        };
    };

    let paymentHelperFactory = new integration.genesco.objects.PaymentHelperFactory();
    let usPaymentHelper = new integration.genesco.objects.USPaymentHelper();
    let gbPaymentHelper = new integration.genesco.objects.GBPaymentHelper();
    let paymentHelper = paymentHelperFactory.helper();

    args.Unit.describe("Genesco")
        .test("Command_factory_returns_correct_processor_considering_shipmenttype", function() {
            var context : Map = new HashMap();

            var shipmentMock = new CART_OBJECTS.ShipmentSummary();
            shipmentMock.setProductType(CONSTANTS.ProductType.Regular);
            context.put("shipment", shipmentMock);

            var regularCommand = GENESCO_COMMANDS.CommandFactory.getProcessorForShipment(context);
            Assert.isTrue(regularCommand instanceof GENESCO_COMMANDS.ProcessRegularShipment, "Should return regular processor for Regular shipment");

            shipmentMock.setProductType(CONSTANTS.ProductType.C1);

            var dyoCommand = GENESCO_COMMANDS.CommandFactory.getProcessorForShipment(context);
            Assert.isTrue(dyoCommand instanceof GENESCO_COMMANDS.ProcessC1Shipment, "Should return c1 processor for C1 shipment");
        })
        .test("Creditcard_info_is_wiped_out_from_post_params", function() {
            var postParameters = "ShipCity=New%20York&ShipStateCode=NY&ShipZip=10001&ShipCountryCode=0&ShipCountryName=United%20States&CCType=VI&CCNumber=4112344112344113&CCMonth=01&CCYear=2016&CCCVV=111&Sku=336561F";
            var shipmentProcessor = new GENESCO_COMMANDS.AbstractProcessShipment(new HashMap());

            var cleanPostParameters = shipmentProcessor.wipeOutCardNumberAndCVV(postParameters);

            Assert.areEqual("ShipCity=New%20York&ShipStateCode=NY&ShipZip=10001&ShipCountryCode=0&ShipCountryName=United%20States&CCType=VI&CCMonth=01&CCYear=2016&Sku=336561F", cleanPostParameters);
        })
        .test("RequestHelper_ZIP_should_remain_as_is_when_there_are_no_dashes", function() {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};
            let orderAddress = createOrderAddress();

            helper.setAddressParameters(parameters, orderAddress, "");

            Assert.areEqual(parameters["Zip"], "testP");
        })
        .test("RequestHelper_ZIP_should_have_no_dashes_when_dashes_exists", function() {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};
            let orderAddress = createOrderAddress();
            orderAddress.postalCode = "test-test";

            helper.setAddressParameters(parameters, orderAddress, "");

            Assert.areEqual(parameters["Zip"], "testtest");
        })
        .test("RequestHelper correctly setting address parameters for US", function() {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, usPaymentHelper);
            let parameters = {};
            let orderAddress = createOrderAddress();
            
            helper.setAddressParameters(parameters, orderAddress, "");

            Assert.areEqual(parameters["FirstName"], "testFirstName");
            Assert.areEqual(parameters["LastName"], "testLastName");
            Assert.areEqual(parameters["Phone"], "testPhone");
            Assert.areEqual(parameters["Address1"], "testAddress1");
            Assert.areEqual(parameters["Address2"], "testAddress2");
            Assert.areEqual(parameters["City"], "testCity");
            Assert.areEqual(parameters["StateCode"], "testState");
            Assert.areEqual(parameters["Zip"], "testP");
            Assert.areEqual(parameters["CountryName"], "United States");
            Assert.areEqual(parameters["CountryCode"], 0);
        })
        .test("RequestHelper correctly setting address parameters for GB", function() {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, gbPaymentHelper);
            let parameters = {};
            let orderAddress = createOrderAddress();
            
            helper.setAddressParameters(parameters, orderAddress, "");

            Assert.areEqual(parameters["FirstName"], "testFirstName");
            Assert.areEqual(parameters["LastName"], "testLastName");
            Assert.areEqual(parameters["Phone"], "testPhone");
            Assert.areEqual(parameters["Address1"], "testAddress1");
            Assert.areEqual(parameters["Address2"], "testAddress2");
            Assert.areEqual(parameters["City"], "testCity");
            Assert.areEqual(parameters["StateCode"], "GB");
            Assert.areEqual(parameters["Zip"], "testP");
            Assert.areEqual(parameters["CountryName"], "Great Britain");
            Assert.areEqual(parameters["CountryCode"], "GB");
        })
        .test("Address Line 2 is not added to parameters list if its empty", function() {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};

            let orderAddress = createOrderAddress();
            orderAddress.address2 = "";

            helper.setAddressParameters(parameters, orderAddress, "");

            Assert.isUndefined(parameters["Address2"], "Address2", "Address2 field should not be sent to Genesco if its empty");
        })
        .test("Gift message is sent when not empty", function () {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};

            let shipmentMock = new CART_OBJECTS.ShipmentSummary();
            shipmentMock.setGiftMessage("Gift Message");

            helper.setGiftMessageParameter(parameters, shipmentMock);

            Assert.areEqual(parameters["GiftMessage"], "Gift Message");
        })
        .test("Gift message is not sent when is empty", function () {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};

            let shipmentMock = new CART_OBJECTS.ShipmentSummary();
            shipmentMock.setGiftMessage("");

            helper.setGiftMessageParameter(parameters, shipmentMock);

            Assert.isUndefined(parameters["GiftMessage"], "GiftMessage", "GiftMessage should not be sent to Genesco if its empty");
        })
        .test("Gift message should not include control characters (tab, line feed, carriage returns) and the vertical pipe", function () {
            let paymentMethod = converse.constants.PaymentMethodId.CreditCard;
            let helper = integration.genesco.objects.RequestHelperFactory.getHelper(paymentMethod, null, paymentHelper);
            let parameters = {};

            let shipmentMock = new CART_OBJECTS.ShipmentSummary();
            shipmentMock.setGiftMessage("\n\t Gift |\t | \t| Message \n\r");

            helper.setGiftMessageParameter(parameters, shipmentMock);

            Assert.areEqual("Gift Message", parameters["GiftMessage"]);
        });

    return PIPELET_NEXT;
};
