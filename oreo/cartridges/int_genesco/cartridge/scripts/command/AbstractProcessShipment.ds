importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_webservices:service/command/HttpClientCommand.ds");

importScript("int_genesco:objects/RequestHelpers.ds");

(function(){
    
    var GO_NS = integration.genesco.objects;
    
    var AbstractProcessShipment = converse.webservices.command.HttpClientCommand.extend({
        
        init: function(context : Map) {
            this._super();                        
            this.context = context;
                        
            this.basket = context.get("basketSummary");
            this.shipment = context.get("shipment");
            this.orderNo = context.get("orderNo");
            
            this.logger = Logger.getLogger("GENESCO");
        },
        
        createRequest: function () {
            var paymentMethod = this.getPaymentMethod();
            var helper = GO_NS.RequestHelperFactory.getHelper(paymentMethod, this.context);
            
            this.requestObject = this.createRequestObject(helper);
            return this.requestObject;
        },
        
        execute: function(request) {            
            var url = this.getServiceUrl();
            var parameters = this.encodeParameters(request.getParameters());    
            
            this.logger.info("Posting order {0} with parameters : {1}", this.orderNo, this.wipeOutCardNumberAndCVV(parameters));

            var response = this.doPost(url, parameters);
            
            this.logger.info("Response with HTTPCode - {0} for order {1} received: {2}", this.serviceClient.statusCode, this.orderNo, response);
            
            return response;
        },
        
        handleResponse: function(response) {
            this._super(response);
            
            this.responseObject = this.createResponseObject();
            return this.responseObject;    
        },
        
        hasError: function() {
            return this._super() || this.response.indexOf("<result>") == -1;
        },
        
        getServiceUrl: function() {
            throw new Error("The command does not implement the required method 'getServiceUrl'.");
        },
        
        createRequestObject: function(helper) {
            throw new Error("The command does not implement the required method 'createRequestObject'.");
        },
        
        createResponseObject: function() {
            throw new Error("The command does not implement the required method 'createResponseObject'.");
        },
        
        getPaymentMethod: function() : String {
            var PM = converse.constants.PaymentMethodId;
            
            var hasPayPalPayment : Boolean = !empty(this.basket.getPayPalPaymentInstruments());
            var hasCreditCardPayment : Boolean = !empty(this.basket.getCreditCardPaymentInstruments());
            var hasGiftCardOnly : Boolean = !empty(this.basket.getGiftCardPaymentInstruments());
            
            if(hasPayPalPayment) {
                return PM.PayPal;
            } else if(hasCreditCardPayment) {
                return PM.CreditCard;
            } else if(hasGiftCardOnly) {
                return PM.GiftCard;
            } else {
                throw new Error("No supported payment instrument found. Can not place order to Genesco");
            }
        },
        
        wipeOutCardNumberAndCVV: function(parameters) {            
            return parameters.replace(/CCNUMBER.*?&/ig, '').replace(/CCCVV.*?&/ig, '');
        }
    });
    
    var ns = Namespace.extendFromString(integration, "genesco.command");
    Namespace.extend(ns, { AbstractProcessShipment: AbstractProcessShipment });
    
})();
