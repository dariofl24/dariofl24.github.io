importPackage(dw.system);
importPackage(dw.catalog);
importPackage(dw.order);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libStringUtilsExt.ds");

importScript("int_sigma:SigmaUtils.ds");

importScript("int_genesco:GenescoConstants.ds");
importScript("int_genesco:objects/PaymentHelpers.ds");

(function() {
    var CC = converse.constants,
        GC = integration.genesco.constants,
        SigmaUtils = integration.sigma.SigmaUtils;

    var Utils = {
        sanitizeGiftMessage: function(giftMessage : String) : String {
            if (!empty(giftMessage)) {
                giftMessage = StringUtilsExt.fulltrim(giftMessage.replace(/\|/g, ''));
            }
            return giftMessage;
        }
    };

    var AbstractRequestHelper = Class.extend({
        init: function(context : Map, paymentHelper: Object) {
            this.context = context;
            this.paymentHelper = paymentHelper;
        },
        
        setOrderNoParameter: function(parameters : Object) {
            throw new Error("Request helper must implement 'setOrderNoParameter' method.");    
        },
        
        setPortalParameters: function(parameters : Object, portalId : String) {
            this.paymentHelper.setPortalParameters(parameters, portalId);
        },
        
        setShippingMethodParameter: function(parameters : Object, shipment : Shipment) {
            parameters["ShippingMethod"] = this.getShippingMethod(shipment);
        },
        
        setGiftCardDeliveryMethodParameter: function(parameters : Object, deliveryMethod : String) {
            parameters["GiftCardDeliveryMethod"] = deliveryMethod;
        },
        
        setGCShippingMethodParameter: function(parameters : Object, shipment : Shipment) {
            let items = shipment.getItemSummaryList();
            let isOnlyGiftCards = true;
            
            for each(let item in items) {
                if (item.getProductType() !== CC.ProductType.PhysicalGiftCard) {
                    isOnlyGiftCards = false;
                    break;
                }
            }
            
            parameters["GCShippingMethod"] = isOnlyGiftCards ? "1" : "";
        },
        
        setPromoCodeParameter: function(parameters : Object, itemContainerSummary : ItemContainerSummary) {
            parameters["PromoCode"] = itemContainerSummary.getPromoCode();
        },

        setGiftMessageParameter: function(parameters : Object, shipment : Shipment) {
            let giftMessage: String = shipment.getGiftMessage();
            if(!empty(giftMessage)) {
                parameters["GiftMessage"] = Utils.sanitizeGiftMessage(giftMessage);
            }
        },

        setGiftWrapParameters: function(parameters : Object) {
            parameters["GiftWrap"] = GC.GiftWrap;
            parameters["GiftWrapCharge"] = GC.GiftWrapCharge;
        },
        
        setEmailParameter: function(parameters : Object, basket : Basket) {
            parameters["eMail"] = basket.getCustomerEmail();
        },
        
        setAddressParameters: function(parameters : Object, address : OrderAddress, prefix : String) {
            this.paymentHelper.setAddressParameters(parameters, address, prefix);
        },
        
        setCreditCardParameters: function(parameters : Object, basket : Basket, shipment : Shipment) {
            throw new Error("Request helper must implement 'setCreditCardParameters' method.");
        },
        
        setGiftCardsParameters: function(parameters : Object, basket : Basket) {    
            var PM = converse.constants.PaymentMethodId;
            var gcPaymentInstrs : Collection = basket.getGiftCardPaymentInstruments();
            
            for(var num = 0, len = gcPaymentInstrs.length; num < len; num++) {
                var gcPaymentInstrument = gcPaymentInstrs[num];
                this.setGiftCardParameters(parameters, gcPaymentInstrument, num + 1);
            }
        },
        
        setGiftCardParameters: function(parameters : Object, paymentInstrument : PaymentInstrument, gcNumber : Number) {
            parameters[StringUtilsExt.suffix("GiftCardNo_", gcNumber)] = paymentInstrument.custom.giftCardNumber;
            parameters[StringUtilsExt.suffix("GiftCardPIN_", gcNumber)] = paymentInstrument.custom.giftCardPin;
            parameters[StringUtilsExt.suffix("GiftCardAmount_", gcNumber)] = paymentInstrument.getPaymentTransaction().getAmount();
        },
        
        setProductParameters: function(parameters: Object, shipment: Object) {
            let skus = [],
                names = [],
                sizes = [],
                widths = [],
                quantites = [],
                prices = [];
                
            if (shipment.getItemSummaryList().isEmpty()) {
                return;
            }

            let productIter : Iterator = shipment.getItemSummaryList().iterator();

            while(productIter.hasNext()) {
                let itemSummary  = productIter.next();
                let sigmaProductInfo = SigmaUtils.getSigmaProductInfo(itemSummary);
                
                skus.push(sigmaProductInfo.sku);
                names.push(sigmaProductInfo.name);
                sizes.push(sigmaProductInfo.size);
                widths.push(sigmaProductInfo.width);
                quantites.push(sigmaProductInfo.quantity);
                prices.push(sigmaProductInfo.unitPrice);
            }
            
            parameters["Sku"] = skus.join(',');
            parameters["Name"] = names.join(',');
            parameters["Size"] = sizes.join(',');
            parameters["Width"] = widths.join(',');
            parameters["Qty"] = quantites.join(',');
            parameters["PricePer"] = prices.join(',');
        },
        
        setElectronicGiftCardParameters: function(parameters : Object, shipment : Shipment) {
            var items : Collection = shipment.getItemSummaryList();
            var names : ArrayList = new ArrayList();
            var emails : ArrayList = new ArrayList();

            for each (var item in items) {
                if (item.getProductType() === converse.constants.ProductType.ElectronicGiftCard) {
                    names.add(item.getGiftCardName());
                    emails.add(item.getGiftCardEmail());
                }
                else {
                    names.add("");
                    emails.add("");
                }
            }

            var namesStr : String = "";
            var emailsStr : String = "";

            if (names.size() !== 0) {
                namesStr = names.join();
            }

            if (emails.size() !== 0) {
                emailsStr = emails.join();
            }

            parameters["RecipientEmail"] = emailsStr;
            parameters["RecipientName"] = namesStr;
        },
        
        setC1Parameters: function(parameters : Object, shipment : Shipment) {
            let itemSummaries : Collection = shipment.getItemSummaryList();
            let metricIds = new ArrayList();
            let personalizations = new ArrayList();
            let dyoImageUrls = new ArrayList();
            
            for each (let itemSummary in itemSummaries) {
                metricIds.add(itemSummary.getMetricID());
                personalizations.add(itemSummary.getPersonalization());
                dyoImageUrls.add(itemSummary.getDYOImageUrl());
            }
            
            parameters["MetricID"] = metricIds.join();
            parameters["PersonalID"] = personalizations.join();
            parameters["C1ImageUrl"] = dyoImageUrls.join();
        },
        
        setShippingAndTotalParameters: function(parameters : Object, shipment : Shipment) {
            this.paymentHelper.setShippingAndTotalParameters(parameters, shipment);
        },

        getShippingMethodCode: function(method) {
            var code = method.getGenescoShippingMethodID();
            if (code) {
                return code;
            }

            throw new Error("No corresponding Genesco shipping method specified for shipping method " + method.getID());
        },
        
        getShippingMethod: function(shipment : Shipment) {
            var method = shipment.getShippingMethod();
            return this.getShippingMethodCode(method);
        },
        
        getCCType: function(paymentInstrument : PaymentInstrument) {
            var CCCT = CC.CreditCardType;
            var GCCT = GC.CreditCardType;
            
            var type = paymentInstrument.creditCardType;
            switch (type) {
                case CCCT.Visa: return GCCT.Visa;
                case CCCT.MasterCard: return GCCT.MasterCard; 
                case CCCT.AmericanExpress: return GCCT.AmericanExpress;
                case CCCT.Discover: return GCCT.Discover;
                case CCCT.PayPal: return GCCT.PayPal;
                default: 
                    throw new Error("No corresponding Genesco credit card type found for credit card type: " + type);
            }
        }
    });
    
    var CreditCardRequestHelper = AbstractRequestHelper.extend({
        setOrderNoParameter: function(parameters : Object) {
            parameters["ConverseOrderID"] = this.context.get("orderNo");
        },
        
        setCreditCardParameters: function(parameters : Object, basket : Basket, shipment : Shipment) {
            var ccPaymentInstrument = basket.getCreditCardPaymentInstruments()[0]; 
                        
            parameters["CCType"] = this.getCCType(ccPaymentInstrument);
            parameters["CCNumber"] = basket.getCreditCardNumber();
            parameters["CCMonth"] = StringUtilsExt.lpad(ccPaymentInstrument.creditCardExpirationMonth, 2, '0');
            parameters["CCYear"] = ccPaymentInstrument.creditCardExpirationYear;
            parameters["CCCVV"] = this.context.get("cvv");
        }
    });
    
    var GiftCardRequestHelper = AbstractRequestHelper.extend({
        setOrderNoParameter: function(parameters : Object) {
            parameters["ConverseOrderID"] = this.context.get("orderNo");
        },
        
        setCreditCardParameters: function(parameters : Object, basket : Basket, shipment : Shipment) {
        }
    });
    
    var PayPalRequestHelper = AbstractRequestHelper.extend({
        setOrderNoParameter: function(parameters : Object) {
        },
        
        setCreditCardParameters: function(parameters : Object, basket: Basket, shipment : Shipment) {
            var orderId = this.context.get("centinelLookupResult").orders[shipment.getUUID()].orderId;
            
            parameters["CCType"] = "PP";
            parameters["CCNumber"] = parameters["ConverseOrderID"] = orderId;
            parameters["CCMonth"] = "12"; // For PP orders we'll be always sending 12
            parameters["CCYear"] = new Date().getFullYear() + 1; // For PP orders we'll be always sending current year + 1
            parameters["CCCVV"] = "1111"; // For PP orders we'll be always sending 1111
        }
    });
    
    var RequestHelperFactory = {
        getHelper: function(paymentMethod : String, context : Map, paymentHelper: Object) : Object {
            let PM = CC.PaymentMethodId;

            if (!paymentHelper) {
                let paymentHelperFactory = new integration.genesco.objects.PaymentHelperFactory();
                paymentHelper = paymentHelperFactory.helper();
            }
            
            switch(paymentMethod) {
                case PM.PayPal:
                    return new PayPalRequestHelper(context, paymentHelper);
                case PM.CreditCard:
                    return new CreditCardRequestHelper(context, paymentHelper);
                case PM.GiftCard:
                    return new GiftCardRequestHelper(context, paymentHelper);
                default: 
                    throw new Error("No corresponding Gensco payment method found: " + paymentMethod);
            }
        }
    }
    
    Namespace.extend(integration, { 
        genesco: { 
            objects: {
                RequestHelperFactory: RequestHelperFactory
            }
        }
    });

})();
