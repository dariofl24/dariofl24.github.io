importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.crypto);
importPackage(dw.customer);
importPackage(dw.object);
importPackage(dw.rpc);
importPackage(dw.util);
importPackage(dw.web);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libStringUtilsExt.ds");
importScript("converse_webservices:service/command/SoapCommand.ds");

importScript("int_paymentech:command/CommandBuilder.ds");
importScript("int_paymentech:objects/PaymentechVerificationStatus.ds");

(function() {
    var PAYMENTECH_NS = integration.paymentech;
    
    var AuthorizeCommand = converse.webservices.command.SoapCommand.extend({
        init: function(creditCard: Object, billingAddress: OrderAddress, basketID: String) {
            this._super();
            this.logger = Logger.getLogger(converse.constants.Logger.Paymentech);
            this.creditCard = creditCard;
            this.billingAddress = billingAddress;
            this.basketID = basketID;
        },

        initOptions: function(options) {
            let sitePreferences = Site.getCurrent().getPreferences().getCustom();

            options.configuration = {
                url: sitePreferences["paymentech.url"],
                PaymentechUsername: sitePreferences["paymentech.username"],
                PaymentechPassword: sitePreferences["paymentech.password"],
                MerchantID: sitePreferences["paymentech.merchantId"],
                AVSErrorCodes: this.getValues(sitePreferences["paymentech.avsErrorCodes"]),
                CVVErrorCodes: this.getValues(sitePreferences["paymentech.cvvErrorCodes"])
            };

            this._super(options);
        },
    
        createRequest: function() {
            let webReference = webreferences.PaymentechGateway;
            
            let newOrder : NewOrder = new webReference.NewOrder();
            newOrder.newOrderRequest = new webReference.NewOrderRequestElement();
        
            PAYMENTECH_NS.CommandBuilder.addHeaderInfo(newOrder.newOrderRequest, this.configuration);
            PAYMENTECH_NS.CommandBuilder.addCardInfo(newOrder.newOrderRequest, this.creditCard);
            PAYMENTECH_NS.CommandBuilder.addAddress(newOrder.newOrderRequest, this.billingAddress);
            PAYMENTECH_NS.CommandBuilder.addOrderInfo(newOrder.newOrderRequest, this.creditCard, this.basketID);
    
            return newOrder;
        },
    
        execute: function(request) {
            let self = this;

            self.logger.info('Sending authorize request for basket [{0}]: {1}', self.basketID, self.requestToString(request.newOrderRequest));
            let newOrderResponse : NewOrderResponse = self.serviceClient.newOrder(request);
            return newOrderResponse;
        },
    
        handleResponse: function(response) {
            this._super(response);

            this.logger.info('Received authorize response for basket [{0}]: {1}', this.basketID, this.responseToString(response._return));
            this.authorizationStatus = this.checkResponse(response._return, this.basketID);
        },
    
        checkResponse: function(newOrderResponse : NewOrderResponse, basketID : String) {
            let self = this;
            
            if (this.avsCheckFailed(newOrderResponse)) {
                self.logger.info('AVS check failed for basket [{0}] with code: {1}', basketID, self.getAvsCode(newOrderResponse));
                return new PAYMENTECH_NS.PaymentechVerificationStatus(false, self.extractErrorMessage(newOrderResponse, 'avs'));
            }
            
            if (this.cvvCheckFailed(newOrderResponse)) {
                self.logger.info('CVV check failed for basket [{0}] with code: {1}', basketID, self.getCvvCode(newOrderResponse));
                return new PAYMENTECH_NS.PaymentechVerificationStatus(false, self.extractErrorMessage(newOrderResponse, 'cvv'));
            }
            
            if (this.creditCardAccepted(newOrderResponse)) {
                return new PAYMENTECH_NS.PaymentechVerificationStatus(true, "Success");
            }
            
            self.logger.warn('Authorization failed for basket [{0}] with approvalStatus: {1} and procStatus: {2}', basketID, newOrderResponse.approvalStatus, newOrderResponse.procStatus);
            return new PAYMENTECH_NS.PaymentechVerificationStatus(false, Resource.msg('paymentech.default.error', 'paymentech', null));
        },
    
        creditCardAccepted: function(newOrderResponse : NewOrderResponse) {
            return newOrderResponse.approvalStatus === "1" && newOrderResponse.procStatus === "0";
        },
        
        getAvsCode: function(newOrderResponse : NewOrderResponse) : String {
            return newOrderResponse.avsRespCode.charAt(0);
        },
        
        getCvvCode: function(newOrderResponse : NewOrderResponse) : String {
            return newOrderResponse.cvvRespCode;
        },
        
        avsCheckFailed: function(newOrderResponse : NewOrderResponse) {
            let code = this.getAvsCode(newOrderResponse);
            return this.configuration.AVSErrorCodes.contains(code);
        },
        
        cvvCheckFailed: function(newOrderResponse : NewOrderResponse) {
            let code = this.getCvvCode(newOrderResponse);
            return code === '' || this.configuration.CVVErrorCodes.contains(code);
        },
        
        getErrorCode: function(newOrderResponse : NewOrderResponse, codeType : String) : String {
            return (codeType === 'avs') ? this.getAvsCode(newOrderResponse) : this.getCvvCode(newOrderResponse);
        },
        
        extractErrorMessage: function(newOrderResponse : NewOrderResponse, codeType : String) : String {
            let code : String = this.getErrorCode(newOrderResponse, codeType),
                defaultMessageKey : String = 'paymentech.error.' + codeType + '.default',
                codeMessageKey : String = 'paymentech.error.' + codeType + '.' + code,
                defaultMessage : String = Resource.msg(defaultMessageKey, 'paymentech', null),
                codeMessage : String = Resource.msg(codeMessageKey, 'paymentech', null);
                
            return (empty(codeMessage) || codeMessageKey === codeMessage) ? defaultMessage : codeMessage;
        },

        responseToString: function(response: NewOrderResponseElement) {
            let responseStr : String = "\n{\n";
            responseStr += "\tprocStatus: " + response.procStatus + ",\n";
            responseStr += "\tapprovalStatus: " + response.approvalStatus + ",\n";
            responseStr += "\trespCode: " + response.respCode + ",\n";
            responseStr += "\tavsRespCode: " + response.avsRespCode + ",\n";
            responseStr += "\tcvvRespCode: " + response.cvvRespCode + ",\n";
            responseStr += "\tauthorizationCode: " + response.authorizationCode + ",\n";
            responseStr += "\thostAVSRespCode:" + response.hostAVSRespCode + ",\n";
            responseStr += "\thostCVVRespCode:" + response.hostCVVRespCode + ",\n";
            responseStr += "}";
            
            return responseStr;
        },
        
        requestToString: function(request: NewOrderRequestElement) {
            var requestStr : String = "\n{\n";
            requestStr += "\tamount: " + request.amount + ",\n";
            requestStr += "\torderID: " + request.orderID + ",\n";
            requestStr += "\tavsZip: " + request.avsZip + ",\n";
            requestStr += "\tavsAddress1: " + request.avsAddress1 + ",\n";
            requestStr += "\tavsAddress2: " + request.avsAddress2 + ",\n";
            requestStr += "\tavsCity: " + request.avsCity + ",\n";
            requestStr += "\tavsState: " + request.avsState + ",\n";
            requestStr += "\tavsName: " + request.avsName + ",\n";
            requestStr += "\tavsCountryCode: " + request.avsCountryCode + ",\n";
            requestStr += "\tavsPhone: " + request.avsPhone + ",\n";
            requestStr += "\tccAccountNum: " + PAYMENTECH_NS.CommandBuilder.formatCCNumber(request.ccAccountNum) + ",\n";
            requestStr += "\tccExp: " + request.ccExp + ",\n";
            requestStr += "\torbitalConnectionUsername: " + request.orbitalConnectionUsername + ",\n";
            requestStr += "\torbitalConnectionPassword: " + request.orbitalConnectionPassword + ",\n";
            requestStr += "\tindustryType: " + request.industryType + ",\n";
            requestStr += "\ttransType: " + request.transType + ",\n";
            requestStr += "\tbin: " + request.bin + ",\n";
            requestStr += "\tterminalID: " + request.terminalID + ",\n";
            requestStr += "\tmerchantID: " + request.merchantID + ",\n";
            requestStr += "}";
            
            return requestStr;
        },
        
        getValues: function(values) {
            let result = new ArrayList();
            for each(let value in values) {
                result.add(value);
            }
            return result;
        }
    });
    
    Namespace.extend(integration, { 
       paymentech: {
            AuthorizeCommand: AuthorizeCommand
       }
    });

})();