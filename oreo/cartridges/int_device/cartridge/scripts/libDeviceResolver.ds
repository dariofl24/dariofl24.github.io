importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

(function(){
    
    var DeviceResolver = Class.extend({
        resolveDevice: function(userAgent : String) {}
    });
    
    var DeviceResolverRegistry = (function () {       
        var registry = {};
    
        return {
            getDeviceResolverImpl: function ( type ) {
                return registry[type];
            },
    
            registerDeviceResolverImpl: function ( type, DeviceResolverImpl ) {
                if (DeviceResolverImpl != null && DeviceResolverImpl.prototype && typeof DeviceResolverImpl.prototype.resolveDevice == "function") {
                    registry[type] = DeviceResolverImpl;
                }
                else {
                    throw new Error("Invalid DeviceResolver implementation");
                }
            }
        };
    })();
    
    var DeviceResolverFactory = (function () {       
        return {
            getDeviceResolver: function ( type, settings ) {
                try {
                    importScript("impl/" + type + "DeviceResolver.ds");
                } 
                catch(error) {
                    return null;    
                }
                
                var deviceResolverClass = DeviceResolverRegistry.getDeviceResolverImpl(type);
            
                if ( deviceResolverClass == null ) {
                    throw new Error("No registered DeviceResolver implementation found for type: " + type);
                }
                
                var deviceResolver = new deviceResolverClass(settings);
                
                if ( !(deviceResolver instanceof DeviceResolver) ) {
                    throw new Error("DeviceResolver instance is required");      
                }
                
                return deviceResolver;
            }
        };
    })();
  
    Namespace.extend(integration, { 
        device: {
            DeviceResolver: DeviceResolver,
            DeviceResolverRegistry: DeviceResolverRegistry,
            DeviceResolverFactory: DeviceResolverFactory
        }
    });

})();
