importPackage( dw.system );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("int_pickuppoint:objects/PickupPointSearchResult.ds");

var PickupPointSearchResult = integration.pickuppoint.objects.PickupPointSearchResult;
var PickupPoint = integration.pickuppoint.objects.PickupPoint;
var Location = integration.pickuppoint.objects.Location;
var Address = integration.pickuppoint.objects.Address;
var BusinessDay = integration.pickuppoint.objects.BusinessDay;
var BusinessHour = integration.pickuppoint.objects.BusinessHour;

(function() {
	
	var logger = Logger.getLogger("SearchResultConverterJSON");
	
    var daysOfWeek= ["","SUN","MON","TUE","WED","THU","FRI","SAT"];
    
    var formarHour = function(hour : String):String{
    	
    	if(hour === undefined){
    		return "N/A"
    	}
    	
    	if(hour.match(new RegExp("^[0-9]{4}$"))){
    		
    		return (hour.slice(0,2)+":"+hour.slice(2,4));
    		
    	}else if(hour.match(new RegExp("^[0-9]{3}$"))){
    		
    		return (hour.slice(0,1)+":"+hour.slice(1,3));
    	}
    	
    	return hour;
    };
    
    var parseBusinessDayJSON = function(day : Ojbect) : BusinessDay {
    	
    	var businessDay : BusinessDay = new BusinessDay();
        businessDay.setDayOfWeek(daysOfWeek[day.Day]);
    	
    	if((typeof day.OpenHours === 'object') && (typeof day.CloseHours === 'object')){
    		
    		if(day.OpenHours && day.CloseHours && (day.OpenHours.length == day.CloseHours.length)){
    	
    			for (let i = 0; i < day.OpenHours.length; i++) { 
    				var businessHour : BusinessHour = new BusinessHour();
    			
    				businessHour.setOpenFrom(formarHour(String(day.OpenHours[i])));
    				businessHour.setOpenTill(formarHour(String(day.CloseHours[i])));
    			
    				businessDay.addBusinessHour(businessHour);
    			}//for
    		
    		}//if
    		
    	}else if (day.OpenHours && day.CloseHours){
    		
    		var businessHourSing : BusinessHour = new BusinessHour();
    		
    		businessHourSing.setOpenFrom(formarHour(String(day.OpenHours)));
    	    businessHourSing.setOpenTill(formarHour(String(day.CloseHours)));
    	    
    	    businessDay.addBusinessHour(businessHourSing);
    	
    	}
    	
    	return businessDay;
    };
    
    var parseAddressJSON = function(geo :Object) : Address {
        var address : Address = new Address();
        
        if(geo.AddressKeyFormat){
        	
        	if(geo.AddressKeyFormat.AddressLine){
        		address.setStreet(geo.AddressKeyFormat.AddressLine);
        	}
        	
        	if(geo.AddressKeyFormat.PoliticalDivision2){
        		address.setCity(geo.AddressKeyFormat.PoliticalDivision2);
        	}
        	
        	if(geo.AddressKeyFormat.PostcodePrimaryLow){
        		address.setPostalCode(geo.AddressKeyFormat.PostcodePrimaryLow);
        	}
        
        }//if
        
        return address;
    };
    
    var parsePickupPointJSON = function(geo : Object) : PickupPoint {
    	
    	logger.info("GEOCODE: "+geo.Geocode.Latitude+","+geo.Geocode.Longitude);
    	var pickupPoint : PickupPoint = new PickupPoint();
        var location : Location = new Location();
            				
        location.setLatitude(geo.Geocode.Latitude);
        location.setLongitude(geo.Geocode.Longitude);
        
        pickupPoint.setLocation(location);
        
        pickupPoint.setAddress(parseAddressJSON(geo));
        
        pickupPoint.setId(geo.LocationID);
        pickupPoint.setName(geo.AddressKeyFormat.ConsigneeName);
        
        pickupPoint.setCarrier("Kiala");
        
        if(geo.OperatingHours){
        	
        	if(geo.OperatingHours.StandardHours){
        		
        		if(geo.OperatingHours.StandardHours.DayOfWeek){
        			for each(let day in geo.OperatingHours.StandardHours.DayOfWeek ){
        				
        				pickupPoint.addBusinessDay(parseBusinessDayJSON(day));
        				
        			}//for
        		}//for
        	}//for
        }//if
        
        return pickupPoint;
    };
    
    var SearchResultConverterJSON = {
        from : function(responseText : String) : PickupPointSearchResult {
        	
            var responseJSON : Object = JSON.parse(responseText);
            
            if(responseJSON.LocatorResponse){

            	if(responseJSON.LocatorResponse.SearchResults){

            		if(responseJSON.LocatorResponse.SearchResults.DropLocation){

            			
            			var searchResult : PickupPointSearchResult = new PickupPointSearchResult();
            			searchResult.setSuccess(true);
            			
            			for each(let geo in responseJSON.LocatorResponse.SearchResults.DropLocation){            				
            				searchResult.addPickupPoint(parsePickupPointJSON(geo));				
            			}//for
            			
            		}
            	}
            }
            
            return searchResult;
        }
    };
    
    var NS = Namespace.extendFromString(integration, "pickuppoint");
    Namespace.extend(NS, {
        SearchResultConverterJSON: SearchResultConverterJSON
    });
})();