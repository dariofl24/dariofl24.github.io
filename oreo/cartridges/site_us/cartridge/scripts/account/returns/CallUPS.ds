/**
 * @input CurrentUser : dw.customer.Customer
 * @input SelectableOrder : Object
 * @input ReturnAddress : Object
 * @input PackageInfo : Object
 *
 * @output UPSResult : Object 
 * @output ErrorMsg : String The error message if any.
 */
importPackage(dw.system);
importPackage(dw.customer);
importPackage(dw.order);
importPackage(dw.web);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");

importScript("int_ups:UPSService.ds");

let logger = Logger.getLogger("UPS");

function execute(args : PipelineDictionary) : Number
{
    var hasError : Boolean = false;

    try {
        configurePackageInfo(args.CurrentUser, args.SelectableOrder, args.PackageInfo);

        args.UPSResult = callUPS(args.ReturnAddress, args.PackageInfo);

        hasError = !empty( args.UPSResult.errorCode);
    }
    catch(e) {
        hasError = true;
        logger.error(e.toString());
    }
    
    args.ErrorMsg = hasError ? Resource.msg('returns.error.upsfailed','account',null) : null;
    
    return hasError ? PIPELET_ERROR : PIPELET_NEXT;
}

function callUPS(shipFromAddress : Object, packageInfo : Object) : Object {
    let upsService = new integration.ups.UPSService();
    return upsService.getReturnShippingLabel(shipFromAddress, packageInfo);
}

function configurePackageInfo(currentUser : Customer, selectableOrder : Object, packageInfo : Object) : Object {
    packageInfo.setPackagingCode(integration.ups.UPSService.DEFAULT_PACKAGING_CODE);
    packageInfo.setDimensions(integration.ups.UPSService.DEFAULT_DIMENSIONS);
    packageInfo.setWeight(integration.ups.UPSService.DEFAULT_WEIGHT);
    packageInfo.setDescription(getDescription(currentUser, selectableOrder, packageInfo));
    packageInfo.setOrderId( getOrderIdReference(selectableOrder) );
}

function getOrderIdReference(selectableOrder : Object) {
    let buff : Array = [];
    let order : Order = selectableOrder.getOriginal();
    let it = order.getShipments().iterator();
    while (it.hasNext()) {
        let shipment : Shipment = it.next();
        if (!empty(shipment.custom)) {
            if (converse.constants.ProductType.Regular == shipment.custom.productType) {
                let foundIt = (empty(shipment.custom.sigmaOrderID))? shipment.custom.journeysOrderID: shipment.custom.sigmaOrderID;
                buff.push(foundIt);
            }
        }
    }
    let result : String = buff.join(" ");
    return result
}

function getDescription(currentUser : Customer, selectableOrder : Object, packageInfo : Object) {
    let tokens : Array = [];
    
    addExchangeToken(tokens, packageInfo);
    addOrderToken(tokens, selectableOrder);
    addUserToken(tokens, currentUser, selectableOrder);
    addReasonToken(tokens, packageInfo);
    
    return tokens.join(' ');
}

function addExchangeToken(tokens : Array, packageInfo : Object) {
    if (Lang.isChecked(packageInfo.getExchange())) {
        tokens.push("EXCH");
    }
}

function addOrderToken(tokens : Array, selectableOrder : Object) {
    var order : Order = selectableOrder.getOriginal();
    
    if (selectableOrder.hasInlineItemsSelected() && !empty(order.custom.inlineInvoiceNumber)) {
        tokens.push(order.custom.inlineInvoiceNumber);
    }
    
    if (selectableOrder.hasDyoItemsSelected() && !empty(order.custom.dyoInvoiceNumber)) {
        tokens.push(order.custom.dyoInvoiceNumber);
    }
}

function addUserToken(tokens : Array, currentUser : Customer, selectableOrder : Object) {
    if (!empty(currentUser) && (currentUser.isAuthenticated() || isOrderCustomerRegistered(selectableOrder))) {
        tokens.push("REG");
    }
}

function addReasonToken(tokens : Array, packageInfo : Object) {
    tokens.push(packageInfo.getReason().split(".")[2]);
}

function isOrderCustomerRegistered(selectableOrder : Object) : Boolean {
    var profile = dw.customer.CustomerMgr.queryProfile("email = {0}", selectableOrder.getOriginal().customerEmail);

    return !empty(profile) && profile.credentials.enabled && profile.customer.registered && !profile.custom.deleted;
}
