/**
* This pipelet subcribes the customer to all the active interests
*
* @input Customer: dw.customer.Customer The customer to subscribe for the email notifications
* @input NewsletterEnabled: Boolean Should subscribe customer for the email notifications
*
* @output Status : dw.system.Status The status of the request execution
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.customer );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_featuretoggle:lib/FeatureToggleService.ds");

importScript("int_exacttarget:objects/SubscriptionData.ds");
importScript("int_exacttarget:SubscriptionService.ds");
importScript("int_exacttarget:objects/SubscriptionData.ds");
importScript("int_exacttarget:objects/SubscriptionInterest.ds");

var FeatureToggleService = converse.featuretoggle.FeatureToggleService;
var SubscriptionInterest = integration.exacttarget.objects.SubscriptionInterest;
var SubscriptionData = integration.exacttarget.objects.SubscriptionData;
var SubscriptionService = integration.exacttarget.SubscriptionService;

function execute(pdict : PipelineDictionary) : Number
{
    Logger.debug("exact-target-service enabled:" + FeatureToggleService.isFeatureEnabled("exact-target-service"));
    if (!FeatureToggleService.isFeatureEnabled("exact-target-service")) {
        pdict.Status = new Status(Status.OK);
        return PIPELET_NEXT;
    }
    var customer: Customer = pdict.Customer;
    var newsletterEnabled: Boolean = pdict.NewsletterEnabled;
    Logger.debug("newsletterEnabled:"+newsletterEnabled);
    
    var allInterests: Array = SubscriptionInterest.fetchAllInterests();
    var activeInterests: Array = (newsletterEnabled) ? allInterests.map(selectInterest) : allInterests;
    var subscriptionService: Object = new SubscriptionService();
    var subscriptionData = SubscriptionData.createFromProfile(customer, activeInterests);

    subscriptionService.subscribe(subscriptionData);
    
    var status: Status = subscriptionService.getStatus();
    pdict.Status = status;
    
    if(status.error) {
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}

function onlyActive(interest: Object) : Boolean 
{
    return interest.active;
}

function selectInterest(interest: Object) : Object 
{
    interest.selected = true;
    return interest;
}