/**
 * @input Unit: Object
 */

importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_exacttarget:command/RetrievePropertiesRequest.ds");

function execute(args: PipelineDictionary) {

    var ET_NS = integration.exacttarget;
    var COMMAND_NS = ET_NS.command;

    var RetrievePropertiesRequest = COMMAND_NS.RetrievePropertiesRequest;

    var webReference = webreferences.etframework;
    var EMAIL = "prosto@prosto.com";
    var DATA_OBJECT_NAME = "DOM";
    var CLIENT_ID = 234;
    var PROPERTIES = ["FirstName", "Gender"];
    var OBJECT_TYPE = StringUtils.format("DataExtensionObject[{0}]", DATA_OBJECT_NAME);

    var SimpleOperators = webReference.SimpleOperators;

    function getConfiguration() {
       return {
           dataObjectName: DATA_OBJECT_NAME,
           clientId: CLIENT_ID
       }
    }

    function getCommandOptions() {
       return { 
            configuration: getConfiguration(),
            serviceClient: webReference.getDefaultService(),
            webReference: webReference
        };
    }

    function createRetrievePropertiesRequest() {
        var retieveRequest = new RetrievePropertiesRequest(EMAIL, PROPERTIES);
        retieveRequest.initOptions(getCommandOptions());
        return retieveRequest;
    }
    
    args.Unit.describe("ExactTarget Retrieve Properties Request")
        .test("Retrieve properties request is built as expected", function () {
            var retieveRequestCmd = createRetrievePropertiesRequest();
            var retieveRequestMsg = retieveRequestCmd.createRequest();
            var retieveRequest = retieveRequestMsg.getRetrieveRequest();

            var filter = retieveRequest.getFilter();
            var properties = retieveRequest.getProperties();

            Assert.areEqual(OBJECT_TYPE, retieveRequest.getObjectType());
            Assert.areEqual(CLIENT_ID, retieveRequest.getClientIDs()[0].ID);
            Assert.areEqual("EmailAddress", filter.getProperty());
            Assert.areEqual(EMAIL, filter.getValue()[0]);
            Assert.areEqual(SimpleOperators.equals, filter.getSimpleOperator());
            
            Assert.areEqual(PROPERTIES.length, properties.length);
            for(let i = 0, len = properties.length; i < len; i++) {
                Assert.areEqual(PROPERTIES[i], properties[i]);
            }
        });

    return PIPELET_NEXT;
}