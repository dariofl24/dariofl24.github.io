/**
 * @input Unit: Object
 */

importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Library/JSMockito.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_exacttarget:objects/SubscriptionData.ds");
importScript("int_exacttarget:command/SubscribeRequest.ds");

function execute(args: PipelineDictionary) {
    
    var ET_NS = integration.exacttarget;
    var OBJ_NS = ET_NS.objects;
    var COMMAND_NS = ET_NS.command;
    
    var SubscriptionData = OBJ_NS.SubscriptionData;
    var SubscribeRequest = COMMAND_NS.SubscribeRequest;
    
    var webReference = webreferences.etframework;
    var EMAIL = "prosto@prosto.com";
    var DATA_OBJECT_NAME = "DOM";
    var CLIENT_ID = 234;
    var EmailType = webReference.EmailType;
    var SubscriberStatus = webReference.SubscriberStatus;
    var SaveAction = webReference.SaveAction;
    
    function getConfiguration() {
       return {
           listId: 111,
           allSubscribersListId: 222,
           dataObjectName: DATA_OBJECT_NAME,
           clientId: CLIENT_ID
       }
    }
    
    function getCommandOptions() {
       return { 
            configuration: getConfiguration(),
            serviceClient: webReference.getDefaultService(),
            webReference: webReference
        };
    }
    
    function createProperites(): Map {
       var properties: Map = new HashMap();
       properties.put("FirstName", "Prosto");
       properties.put("LastName", "Slojno");
       return properties;
    }
    
    function createSubscriptionDataMock(hasInterests: Boolean) {
       var subscriptionDataMock = Mockito.mock(SubscriptionData);

       var properties: Map = createProperites();
       subscriptionDataMock.email = EMAIL;
       
       Mockito.when(subscriptionDataMock)
           .hasInterests()
           .then(function() { return hasInterests; });

       Mockito.when(subscriptionDataMock)
           .toMap()
           .then(function() { return properties; });

       return subscriptionDataMock;
    }
    
    function createSubscribeRequest(userHasInterests: Boolean) {
        var subscriptionData = createSubscriptionDataMock(userHasInterests);
        var subscribeRequest = new SubscribeRequest(subscriptionData);
        subscribeRequest.initOptions(getCommandOptions());
        return subscribeRequest;
    }
    
    args.Unit.describe("ExactTarget Subscribe Request") 
        .test("Subscribe_request_is_built_as_expected_considering_user_has_no_interests", function () {
            var subscribeRequest = createSubscribeRequest(false);
            var request = subscribeRequest.createRequest();

            var saveOptions = request.getOptions().getSaveOptions();
            var subscriber = request.objects[0];
            var deo = request.objects[1];

            var subscriberLists = subscriber.getLists();

            Assert.areEqual(EMAIL, subscriber.getSubscriberKey());
            Assert.areEqual(EMAIL, subscriber.getEmailAddress());
            Assert.areEqual(EmailType.HTML, subscriber.getEmailTypePreference());
            Assert.areEqual(1, subscriberLists.length);
            Assert.areEqual(111, subscriberLists[0].getID());
            Assert.areEqual(SubscriberStatus.Unsubscribed, subscriberLists[0].getStatus());
            Assert.areEqual(CLIENT_ID, subscriber.getClient().ID);
            
            Assert.areEqual(DATA_OBJECT_NAME, deo.getCustomerKey());
            Assert.areEqual(CLIENT_ID, deo.getClient().ID);
            
            var deoProperties = deo.getProperties();
            Assert.areEqual(2, deoProperties.length);
            Assert.areEqual("FirstName", deoProperties[0].getName());
            Assert.areEqual("Prosto", deoProperties[0].getValue());
            Assert.areEqual("LastName", deoProperties[1].getName());
            Assert.areEqual("Slojno", deoProperties[1].getValue());

            Assert.areEqual(1, saveOptions.length);
            Assert.areEqual(SaveAction.UpdateAdd, saveOptions[0].getSaveAction());
            Assert.areEqual("*", saveOptions[0].getPropertyName());
        })
        .test("Subscriber_Lists_contains_both_listId_and_allSubscribersListId_when_user_has_interests", function () {
            var subscribeRequest = createSubscribeRequest(true);
            
            var request = subscribeRequest.createRequest();
            var subscriber = request.objects[0];
            var subscriberLists = subscriber.getLists();

            Assert.areEqual(EMAIL, subscriber.getSubscriberKey());
            Assert.areEqual(EMAIL, subscriber.getEmailAddress());
            Assert.areEqual(EmailType.HTML, subscriber.getEmailTypePreference());
            Assert.areEqual(2, subscriberLists.length);
            Assert.areEqual(111, subscriberLists[0].getID());
            Assert.areEqual(SubscriberStatus.Active, subscriberLists[0].getStatus());
            Assert.areEqual(222, subscriberLists[1].getID());
            Assert.areEqual(SubscriberStatus.Active, subscriberLists[1].getStatus());
        });

    return PIPELET_NEXT;
}