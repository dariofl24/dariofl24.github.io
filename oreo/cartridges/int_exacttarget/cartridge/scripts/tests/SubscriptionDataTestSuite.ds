/**
 * @input Unit: Object
 */

importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importPackage(dw.object);

importScript("module_test:Framework/Assert.ds"); 
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:util/TimeUtils.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_exacttarget:ExactTargetConstants.ds");
importScript("int_exacttarget:objects/SubscriptionData.ds");
importScript("int_exacttarget:objects/SubscriptionInterest.ds");

function execute(args: PipelineDictionary) {

    var ET_NS = integration.exacttarget;
    var OBJ_NS = ET_NS.objects;

    var SubscriptionData = OBJ_NS.SubscriptionData;
    var SubscriptionInterest = OBJ_NS.SubscriptionInterest;
    
    var ExactTargetConstants = ET_NS.ExactTargetConstants;
    var PropertyNames = ExactTargetConstants.PropertyNames;
    var Gender = ExactTargetConstants.Gender;
    var MaxNameLength = ExactTargetConstants.MaxNameLength;
    var DateFormat = ExactTargetConstants.DateFormat;
    
    var FIRST_NAME = "Prosto";
    var LAST_NAME = "Slojno";
    var EMAIL = "prosto@prosto.com";
    var ZIP = "2111";
    var COUNTRY_CODE = "US";
    var DATE_STR = "12/10/1971";
    var DATE_OF_BIRTH = new Date(1971,11, 10);
    
    function createCustomer() {
        return {
            profile: {
                firstName: FIRST_NAME,
                lastName: LAST_NAME,
                email: EMAIL,
                birthday: DATE_OF_BIRTH,
                gender: {
                    value: 1
                },
                custom: {
                    postalCode: ZIP
                }
            },
            addressBook: {
                preferredAddress: {
                    countryCode: {
                        displayValue: COUNTRY_CODE
                    }
                }
            },
            orderHistory: {
                getOrderCount: function() { return 1; }
            }
        };
    }
    
    function createInterests() {
        return [ 
            { id: 5, type: "Interests_AllNewsFromConverse", selected: true },
            { id: 6, type: "Interests_RetailUpdates", selected: true },
            { id: 7, type: "Interests_OutletUpdates", selected: true }
        ];
    }

    SubscriptionInterest.fetchAllInterests = function() {
        return [
           { type: "Interests_AllNewsFromConverse" },
           { type: "Interests_RetailUpdates" },
           { type: "Interests_OutletUpdates" }
        ];
    }
    
    SubscriptionInterest._deps["CustomObjectMgr"] = {
        queryCustomObject: function() {
            return {
                custom: {
                   id: 100,
                   displayName: "displayName",
                   description: "description"
                }
            }
        }
    };
    
    SubscriptionData._deps["SubscriptionInterest"] = SubscriptionInterest;
    
    function createPropertyMap(): Map {
        var propertyMap: Map = new HashMap();
        propertyMap.put(PropertyNames.EmailAddress, EMAIL);
        propertyMap.put(PropertyNames.FirstName, FIRST_NAME);
        propertyMap.put(PropertyNames.LastName, LAST_NAME);
        propertyMap.put(PropertyNames.Gender, Gender.Male);
        propertyMap.put(PropertyNames.Country, COUNTRY_CODE);
        propertyMap.put(PropertyNames.ZipCode, ZIP);
        propertyMap.put(PropertyNames.DateOfBirth, DATE_STR);
        propertyMap.put(PropertyNames.OrderExists, true);
        propertyMap.put("Interests_AllNewsFromConverse", "True");
        propertyMap.put("Interests_RetailUpdates", "True");
        propertyMap.put("Interests_OutletUpdates", "True");
        return propertyMap;
    }

    args.Unit.describe("SubscriptionData")
        .test("SubscriptionData is created from the customer profile", function () {
            var customer = createCustomer();
            var interests = createInterests();
            
            var subscriptionData = SubscriptionData.createFromProfile(customer, interests);

            Assert.areEqual(FIRST_NAME, subscriptionData.firstName);
            Assert.areEqual(LAST_NAME, subscriptionData.lastName);
            Assert.areEqual(EMAIL, subscriptionData.email);
            Assert.areEqual(ZIP, subscriptionData.zip);
            Assert.areEqual(Gender.Male, subscriptionData.gender);
            Assert.areEqual(COUNTRY_CODE, subscriptionData.country);
            Assert.areEqual(DATE_OF_BIRTH, subscriptionData.dateOfBirth);

            Assert.areEqual(true, subscriptionData.orderExists);
            Assert.areEqual(interests, subscriptionData.interests);
        })
        .test("Gender is mapped properly from the cutomer's profile", function () {
            var customer = createCustomer();
            var gender = customer.profile.gender;

            gender.value = 1;
            var subscriptionData = SubscriptionData.createFromProfile(customer);
            Assert.areEqual(Gender.Male, subscriptionData.gender);

            gender.value = 2;
            var subscriptionData = SubscriptionData.createFromProfile(customer);
            Assert.areEqual(Gender.Female, subscriptionData.gender);
        })
        .test("SubscriptionData_getAllPropertyNames returns all the property names including interest types", function () {            
            var propertyNames = [
                PropertyNames.EmailAddress,
                PropertyNames.FirstName,
                PropertyNames.LastName,
                PropertyNames.Gender,
                PropertyNames.Country,
                PropertyNames.ZipCode,
                PropertyNames.DateOfBirth,
                PropertyNames.OrderExists,
                PropertyNames.SegmentID,
                PropertyNames.SignupSource,
                PropertyNames.SiteCode,
                PropertyNames.UpdateDate,
                "Interests_AllNewsFromConverse",
                "Interests_RetailUpdates",
                "Interests_OutletUpdates"
            ];

            var allPropertyNames = SubscriptionData.getAllPropertyNames();

            Assert.areEqual(propertyNames.length, allPropertyNames.length);

            for(let i = 0, len = propertyNames.length; i < len; i ++) {
                Assert.areEqual(propertyNames[i], allPropertyNames[i]);
            }
        })
        .test("SubscriptionData_toMap returns key value pairs of all the properties", function () {
            var properties = [
                { name: PropertyNames.EmailAddress, value: EMAIL },
                { name: PropertyNames.FirstName, value: FIRST_NAME },
                { name: PropertyNames.LastName, value: LAST_NAME },
                { name: PropertyNames.Gender, value: Gender.Male },
                { name: PropertyNames.Country, value: COUNTRY_CODE },
                { name: PropertyNames.ZipCode, value: ZIP },
                { name: PropertyNames.DateOfBirth, value: TimeUtils.formatDate(DATE_OF_BIRTH, DateFormat) },
                { name: PropertyNames.OrderExists, value: true },
                { name: "Interests_AllNewsFromConverse", value: true },
                { name: "Interests_RetailUpdates", value: true },
                { name: "Interests_OutletUpdates", value: true }
            ];

            var customer = createCustomer();
            var interests = createInterests();
            
            var subscriptionData = SubscriptionData.createFromProfile(customer, interests);
            var propertyMap: Map = subscriptionData.toMap();
            
            properties.forEach(function(property) {
                Assert.isTrue(propertyMap.containsKey(property.name));
                Assert.areEqual(property.value, propertyMap.get(property.name));
            });
        })
        .test("SubscriptionData_toMap returns key value pairs of all the properties (new dataobject)", function () {
            var properties = [
                { name: PropertyNames.EmailAddress, value: EMAIL },
                { name: PropertyNames.FirstName, value: FIRST_NAME },
                { name: PropertyNames.LastName, value: LAST_NAME },
                { name: PropertyNames.Gender, value: Gender.Male },
                { name: PropertyNames.Country, value: COUNTRY_CODE },
                { name: PropertyNames.ZipCode, value: ZIP },
                { name: PropertyNames.DateOfBirth, value: TimeUtils.formatDate(DATE_OF_BIRTH, DateFormat) },
                { name: PropertyNames.OrderExists, value: true },
                { name: PropertyNames.SiteCode, value: converse.constants.SiteCode[Site.getCurrent().getID()] },
                { name: "Interests_AllNewsFromConverse", value: true },
                { name: "Interests_RetailUpdates", value: true },
                { name: "Interests_OutletUpdates", value: true }
            ];

            var customer = createCustomer();
            var interests = createInterests();
            
            var subscriptionData = SubscriptionData.createFromProfile(customer, interests);
            var propertyMap: Map = subscriptionData.toMap();
            
            properties.forEach(function(property) {
                Assert.isTrue(propertyMap.containsKey(property.name));
                Assert.areEqual(property.value, propertyMap.get(property.name));
            });
            
            Assert.isTrue(propertyMap.containsKey(PropertyNames.UpdateDate))
        })
        .test("SubscriptionData_createFromMap creates object from the property map", function () {
            var propertyMap: Map = createPropertyMap();

            var subscriptionData = SubscriptionData.createFromMap(createPropertyMap());

            Assert.areEqual(FIRST_NAME, subscriptionData.firstName);
            Assert.areEqual(LAST_NAME, subscriptionData.lastName);
            Assert.areEqual(EMAIL, subscriptionData.email);
            Assert.areEqual(ZIP, subscriptionData.zip);
            Assert.areEqual(Gender.Male, subscriptionData.gender);
            Assert.areEqual(COUNTRY_CODE, subscriptionData.country);
            Assert.areEqual(DATE_OF_BIRTH.valueOf(), subscriptionData.dateOfBirth.valueOf());
            Assert.areEqual(true, subscriptionData.orderExists);
            
            var interests = subscriptionData.interests;
            Assert.areEqual(interests[0].selected, true);
            Assert.areEqual(interests[1].selected, true);
            Assert.areEqual(interests[2].selected, true);
        });

    return PIPELET_NEXT;
}