importPackage(dw.util);

function Test (testdef, runCallback, enabled) {
    this.testdef = testdef;
    this.runCallback = runCallback;
    this.enabled = enabled;
}

Test.prototype.getName = function() {
    return this.testdef.name;
}

Test.prototype.run = function() {
    if (this.runCallback) {
        this.runCallback();
    } else {
        this.testdef.run();
    }
}

Test.prototype.disable = function() {
    this.enabled = false;
}

Test.prototype.isEnabled = function() {
    return this.enabled;
}

function Suite(suitedef) {
    this.tests = new Array();
    this.suitedef = suitedef;
}

Suite.prototype.getName = function() {
    return this.suitedef.name;
}

Suite.prototype.getTestCount = function() {
    return this.tests.length;
}

Suite.prototype.addTest = function(test) {
    this.tests.push(test);
}

Suite.prototype.getTests = function () {
    return this.tests;
}

Suite.prototype.runTest = function(test) {
    let testResult = { name: test.getName(), passed: false, ignored: false };

    if (!test.isEnabled()) {
        testResult.passed = true;
        testResult.ignored = true;
        return testResult;
    }

    try {
        this.runSetup();
        test.run();
        testResult.passed = true;
    } catch (e) {
        this.catchException(test, e, testResult);
    }
    finally {
        this.runTearDown();
    }

    return testResult;
}

Suite.prototype.catchException = function(test, e, testResult) {
    if ((typeof test.expectedError != "undefined") && test.expectedError) {
        if (typeof test.expectedError == "string") {
            let errorMessage = StringUtils.rtrim(e.message);
            testResult.passed = (errorMessage === test.expectedError);
            if (!test.passed) {
                e.message += StringUtils.format("\nExpected message: [{0}] but it was [{1}]", test.expectedError, errorMessage);
            };
        } else {
            testResult.passed = true;
        };
    } else {
        testResult.passed = false;
    };
    
    if (!testResult.passed) {       
        testResult.exception = e;
    };
}

Suite.prototype.runSetup = function() {
    if (this.suitedef.setup) {
        this.suitedef.setup();
    }
}

Suite.prototype.runTearDown = function() {
    if (this.suitedef.tearDown) {
        this.suitedef.tearDown();
    }
}

function TestResult() {
    this.suites = [];
}

TestResult.prototype.add = function (suiteResult) {
    this.suites.push(suiteResult);
}

function SuiteResult (name) {
    this.name = name;
    this.tests = [];
}

SuiteResult.prototype.add = function (testResult) {
    this.tests.push(testResult);
}
