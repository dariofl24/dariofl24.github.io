importPackage(dw.value)

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

(function(){

    var MockCountryCode = Class.extend({
        init : function ( countryCode ) {
            this.value = countryCode;
        },
        
        getValue : function (){
            return this.value;
        }
    });

    var MockItem = Class.extend({
        init : function (productName, adjustedPrice : Money, quantity : Quantity, productId, productType, pillar, manufacturerSKU, size, giftCardName, giftCardEmail, adjustedNetPrice : Money, adjustedGrossPrice:Money, metricID, customSize, personalization, dyoImageUrl){
            this.productName = productName;
            this.adjustedPrice = adjustedPrice;
            this.adjustedNetPrice = adjustedNetPrice;
            this.adjustedGrossPrice = adjustedGrossPrice;
            this.quantity = quantity;
            this.productId = productId;
            this.product = {
                'custom': {
                    'productType': {
                        'value': productType
                    },
                    'pillar': {
                        'value': pillar
                    },
                    'size': size
                }
            };

            this.custom = {
                giftcardName: giftCardName,
                giftcardEmail: giftCardEmail,
                metricID: metricID,
                customSize: customSize,
                personalization: personalization,
                dyoImageUrl: dyoImageUrl
            };

            this.manufacturerSKU = manufacturerSKU;
        },
        
        getProductName: function(): String{
            return this.productName;
        },
        
        getAdjustedPrice : function(): Money{
            return this.adjustedPrice;
        },

        getAdjustedNetPrice : function(): Money{
            return this.adjustedNetPrice;
        },

        getAdjustedGrossPrice : function(): Money{
            return this.adjustedGrossPrice;
        },
        
        getQuantity : function() : Quantity {
            return this.quantity;
        },
        
        getProduct: function() {
            return this.product;
        },
        
        getProductID:function() : String{
            return this.productId;
        },
        
        getMetricID : function() {
            return this.custom.metricID;
        },
    });

    var MockItemFromObject = function(obj) {
        return new MockItem(obj.productName,
                    obj.adjustedPrice,
                    obj.quantity,
                    obj.productId,
                    obj.productType,
                    obj.pillar,
                    obj.manufacturerSKU,
                    obj.size,
                    null,
                    null,
                    obj.adjustedNetPrice,
                    obj.adjustedGrossPrice,
                    obj.metricID,
                    obj.customSize,
                    obj.personalization,
                    obj.dyoImageUrl);
    };

    var MockShippingMethodFromObject = function(obj) {
        return new MockShippingMethod(
                    obj.id,
                    obj.genescoShippingMethodID);
    }

    var MockShippingMethod = function(id, genescoShippingMethodID) {
        let self = {
            custom: {
                genescoShippingMethodID: genescoShippingMethodID    
            }
        };

        self.getID = function() {
            return id;
        }

        return self;
    }

    var MockShipment = Class.extend({
        
        init : function (totalGrossPrice, shippingTotal, shippingGrossTotal, totalTax, uuid, productType, itemList, shippingAddress, shippingMethod, totalNetPrice, gift, giftMessage){
            this.totalGrossPrice = totalGrossPrice;
            this.merchandizeTotalGrossPrice = totalGrossPrice;
            this.merchandizeTotalNetPrice = totalGrossPrice;
            this.totalNetPrice = totalNetPrice;
            this.shippingTotal = shippingTotal;
            this.shippingGrossTotal = shippingGrossTotal;
            this.totalTax = totalTax;
            this.uuid = uuid;
            this.itemList = itemList 
            this.shippingAddress = shippingAddress;
            this.shippingMethod = shippingMethod;
            this.priceAdjustments = new dw.util.ArrayList();
            this.gift = gift;
            this.giftMessage = giftMessage;

            this.custom = {
                productType: productType
            }
        },
        
        getTotalGrossPrice: function() {
            return this.totalGrossPrice;
        },

        getTotalNetPrice: function() {
            return this.totalNetPrice;
        },
        
        getAdjustedShippingTotalNetPrice: function() {
            return this.shippingTotal;
        },

        getAdjustedShippingTotalGrossPrice: function() {
            return this.shippingGrossTotal;
        },
        
        getMerchandizeTotalGrossPrice: function() {
            return this.merchandizeTotalGrossPrice;
        },
        
        getMerchandizeTotalNetPrice: function() {
            return this.merchandizeTotalNetPrice;
        },
        
        getTotalTax: function() {
            return this.totalTax;
        },
        
        getUUID: function() {
            return this.uuid;
        },
        
        getProductLineItems: function() {
            return this.itemList;
        },
        
        getShippingAddress: function() {
            return this.shippingAddress;
        },

        getShippingMethod: function() {
            return this.shippingMethod;
        },
        
        setPriceAdjustments : function(priceAdjustments : Collection){
            this.priceAdjustments = priceAdjustments;
        },

        isGift: function() {
            return this.gift;
        },

        getGiftMessage: function() {
            return this.giftMessage;
        },

        getPriceAdjustments: function() {
            return this.priceAdjustments;
        },
        
        getAllLineItems : function() {
            let allLineItems = dw.util.ArrayList();
            allLineItems.addAll(this.getProductLineItems());
            allLineItems.addAll(this.getPriceAdjustments());
            
            return allLineItems;
        },
        
        //This method is an utility real shipment doesnt have this method
        setItemList : function(itemList : Collection){
            this.itemList = itemList;
        }
    });

    var MockShipmentFromObject = function(obj) {
        return new MockShipment(
                obj.totalGrossPrice,
                obj.shippingTotal,
                obj.shippingGrossTotal,
                obj.totalTax,
                obj.uuid,
                obj.productType,
                obj.itemList,
                obj.shippingAddress,
                obj.shippingMethod,
                obj.totalNetPrice,
                obj.gift,
                obj.giftMessage);
    };

    var MockOrderAddress = Class.extend({
        init : function(firstName, lastName, address1, address2, city, stateCode, countryCode, postalCode, phone){
            this.firstName = firstName;
            this.lastName = lastName;
            this.address1 = address1;
            this.address2 = address2;
            this.city = city;
            this.stateCode = stateCode;
            
            this.countryCode = new MockCountryCode(countryCode);
            
            this.postalCode = postalCode;
            this.phone = phone;
            
        },
        
        getFirstName : function() : String{
            return this.firstName;
        },
        
        getLastName : function() {
            return this.lastName;
        },

        getAddress1 : function() : String{
            return this.address1;
        },
        
        getAddress2 : function() : String{
            return this.address2;
        },

        getCity : function() : String{
            return this.city;
        },
        
        getStateCode : function() : String{
            return this.stateCode;
        },
        
        getCountryCode : function() : String{
            return this.countryCode;
        },
        getPostalCode : function() : String{
            return this.postalCode;
        },
        
        getPhone : function() : String{
            return this.phone;
        }    
    });
            
    var MockBasket = Class.extend({
        init : function(totalGrossPrice, shippingTotalNetPrice, shippingTotalGrossPrice, totalTax, uuid, currencyCode, billingAddress){
            this.totalGrossPrice = totalGrossPrice;
            this.merchandizeTotalGrossPrice = totalGrossPrice;
            this.shippingTotalNetPrice = shippingTotalNetPrice;
            this.shippingTotalGrossPrice = shippingTotalGrossPrice;
            this.totalTax = totalTax;
            this.uuid = uuid;
            this.currencyCode = currencyCode;
            this.billingAddress = billingAddress;
            this.paymentInstruments = new dw.util.ArrayList();
            this.priceAdjustments = new dw.util.ArrayList();
        },
        
        getTotalGrossPrice : function(){
            return this.totalGrossPrice;
        },
        
        getUUID : function(){
            return this.uuid;
        },
        
        getAdjustedShippingTotalNetPrice : function() {
            return this.shippingTotalNetPrice;
        },

        getAdjustedShippingTotalGrossPrice : function() {
            return this.shippingTotalGrossPrice;
        },
        
        getMerchandizeTotalGrossPrice: function() {
            return this.merchandizeTotalGrossPrice;
        },
        
        getTotalTax : function() {
            return this.totalTax;
        },
        
        getCurrencyCode : function() {
            return this.currencyCode;
        },
        
        getBillingAddress : function(){
            return this.billingAddress;
        },
        
        //This method is an utility real basket doesnt have this method
        setShipmentList : function(shipmentList : Collection){
            this.shipmentList = shipmentList;
        },
        
        getShipments : function(){
            return this.shipmentList;
        },
        
        getAllLineItems : function() {
            let allLineItems = dw.util.ArrayList();
            for each (let shipment in this.shipmentList) {
                allLineItems.addAll(shipment.getProductLineItems());
            }
            
            allLineItems.addAll(this.priceAdjustments);
            
            return allLineItems;
        },

        setCustomerEmail: function(customerEmail) {
            this.customerEmail = customerEmail;
        },

        getCustomerEmail: function() {
            return this.customerEmail;
        },

        getPaymentInstruments: function() {
            return this.paymentInstruments;
        },
        
        setPriceAdjustments : function(priceAdjustments : Collection){
            this.priceAdjustments = priceAdjustments;
        },
        
        getPriceAdjustments: function() {
            return this.priceAdjustments;
        },
        
        setDefaultShipment: function(shipment) {
            this.defaultShipment = shipment;
        },

        getDefaultShipment: function() {
            return this.defaultShipment;
        }
    }); 
       
    Namespace.extend(converse, { 
        test: { 
            mocks: {
                MockBasket: MockBasket,
                MockCountryCode: MockCountryCode,
                MockItemFromObject: MockItemFromObject,
                MockItem: MockItem,
                MockShippingMethodFromObject: MockShippingMethodFromObject,
                MockShippingMethod: MockShippingMethod,
                MockShipmentFromObject: MockShipmentFromObject,
                MockShipment: MockShipment,
                MockOrderAddress: MockOrderAddress
            }
        }
    }); 
})();