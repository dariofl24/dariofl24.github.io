importPackage( dw.system );
importPackage( dw.net );
 
var TransferClient = require('/bc_library/cartridge/scripts/remote/TransferClient.ds').TransferClient;

 /**
 *	An API com	
 *	
 *	@param {string} path 
 *		
 **/
 
function VirtualFile(path) {
	this.fullUrl = path;
	this.transferClient = new TransferClient(path);
	if (path.substring(path.length-1,path.length) != "/") {
		this.name = path.substring(path.lastIndexOf("/") + 1 , path.length); 	
	} else {
		this.name = path.substring(path.lastIndexOf("/", path.length-2) + 1, path.length -1);
	}
}

VirtualFile.closeAll = function() {
	TransferClient.closeAll();	
}

VirtualFile.prototype.remove = function(){};
VirtualFile.prototype.getName = function(){
	return this.name;
};
VirtualFile.prototype.length = function(){};
VirtualFile.prototype.zip = function(){};
VirtualFile.prototype.list = function(){};
VirtualFile.prototype.exists = function(){
	return true;
};

VirtualFile.prototype.createNewFile = function(){};

VirtualFile.prototype.setDirectoryState = function(isADirectory){
	Logger.debug("schrang")
	this.isADirectory = isADirectory;
};

VirtualFile.prototype.isDirectory = function(){
	var that = this;
	var tsc = this.transferClient;
	if (typeof(this.isADirectory) != 'undefined') {
		return this.isADirectory;
		
	} else {
		var returnInfos = this.transferClient.list(this.path);
		if (returnInfos && returnInfos.length > 0) {
			// webdav returns the same file if you list on a file
			if (returnInfos.length == 1 && returnInfos[0].name == this.transferClient.urlObject.file) {				
				this.isADirectory = false;
			} else {
				this.isADirectory = true;
			}
		} else {
			this.isADirectory = false;
		}
		return this.isADirectory;
	}	
};


VirtualFile.prototype.isFile = function(){
	return !this.isDirecory();
};
VirtualFile.prototype.lastModified = function(){};
VirtualFile.prototype.listFiles = function(){
	// debugging helper
	var that = this;
	var returnInfos = this.transferClient.list(this.transferClient.urlObject.directory);
	var virtualFiles = new Array();
	for each (var returnInfo in returnInfos) {
		if (!('path' in returnInfo) || this.transferClient.urlObject.directory != returnInfo.path) {
			var virtualFile = null;
			if (returnInfo.directory ||  (returnInfo.size == 0 && !returnInfo.name.match(/([\S])\.\S{3}/))) {
				virtualFile = new VirtualFile(this.transferClient.urlString + returnInfo.name + "/");
				virtualFile.setDirectoryState(true);
			} else {
				virtualFile = new VirtualFile(this.transferClient.urlString + returnInfo.name);
				virtualFile.setDirectoryState(false);				
			}
			virtualFile.name = returnInfo.name;
			virtualFile.parent = this;
			virtualFiles.push(virtualFile);
		}
					
	}
	return virtualFiles;
	
};
VirtualFile.prototype.mkdir = function(){};
VirtualFile.prototype.mkdirs = function(){};
VirtualFile.prototype.renameTo = function(){};
VirtualFile.getRootDirectory = function(){
	return "REMOTE";
};
VirtualFile.prototype.getRootDirectoryType = function(){};
VirtualFile.prototype.getFullPath = function(){
	return this.path;
};
VirtualFile.prototype.getPath = function(){
	return this.transferClient.urlObject.directory + this.transferClient.urlObject.file;
};
VirtualFile.prototype.unzip = function(){};
VirtualFile.prototype.gzip = function(){};
VirtualFile.prototype.gunzip = function(){};
VirtualFile.prototype.toString = function(){
	return "Virtual FILE: " + this.transferClient.urlString;
};

VirtualFile.prototype.sameServer = function(vfile : Object){
	if ((this.transferCient.userName == vfile.transferCient.userName) &&
	 	(this.transferCient.serverType == vfile.transferCient.serverType) &&
	 	(this.transferCient.urlObject.host == vfile.transferCient.urlObject.host)) {
	 	
	 	return true;	
	 } else {
	 	return false;	
	 }	 	
};

VirtualFile.prototype.name=null;
VirtualFile.prototype.path=null;
VirtualFile.prototype.virtual=true;
VirtualFile.prototype.rootDirectory="REMOTE";
VirtualFile.prototype.rootDirectoryType="REMOTE";
VirtualFile.prototype.virtual=true;
VirtualFile.prototype.__defineGetter__("fullPath", function() {return this.fullUrl});
VirtualFile.prototype.__defineGetter__("path", function() {return this.transferClient.urlObject.directory + this.transferClient.urlObject.file});

exports.VirtualFile = VirtualFile;