importPackage(dw.system);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("service/ServiceConfigurationFactory.ds");
importScript("service/ServiceUtils.ds");
importScript("service/command/BaseCommand.ds");

(function(){
    
    var logger = Logger.getLogger("converse.webservices");
    var utils = converse.webservices.ServiceUtils;
    
    var AbstractService = Class.extend({
        
        init: function(serviceName : String) {
            this.serviceName = serviceName;
                        
            this.configuration = this.initConfiguration();
            this.validateConfiguration(this.configuration);
            
            this.serviceClient = this.initServiceClient();
            this.validateServiceClient(this.serviceClient);
            
            this.setup();
        },    
        
        initConfiguration: function() {
            return converse.webservices.ServiceConfigurationFactory.getServiceConfiguration(this.serviceName);
        },
        
        validateConfiguration: function(configuration) {
            if (!configuration) {
                throw new Error("The service " + this.serviceName + " does not provide a configuration.");
            }
        },
        
        initServiceClient: function() {
            throw new Error("The service " + this.serviceName + " does not implement the required method 'initServiceClient'.");
        },
        
        validateServiceClient: function(serviceClient) {
            if (!serviceClient) {
                throw new Error("The service " + this.serviceName + " does not provide a service client.");
            }
        },
        
        setup: function() {
            var username = this.configuration.username;
            var password = this.configuration.password;            
            if (!empty(username) && !empty(password)) {
                this.setCredentials(username, password);
            }
            
            var timeout = this.configuration.timeout;
            if (!empty(timeout)) {
                this.setTimeout(timeout);
            }
        },
        
        // hooks
        setCredentials: function(username, password) {
        },
        
        setTimeout: function(timeout) {
        },
        
        call: function(command) : Status {
            this.validateCommand(command);
            
            var status : Status = utils.createStatus();
            utils.addStatusDetail(status, "command", command);
            utils.addStatusDetail(status, "start", new Date());
            
            try {    
                command.initOptions(this.getCommandOptions());
                
                var request = command.createRequest();
                
                var response = command.execute(request);
                
                command.handleResponse(response);
                
                this.handleSuccess(status);
            } 
            catch(exception) {
                command.handleFailure(exception);
                this.handleFailure(status, exception);
            }
            finally {
                  utils.addStatusDetail(status, "finish", new Date());
            }
            
            return status;
        },
        
        validateCommand: function(command) {
            if (!(command instanceof converse.webservices.command.BaseCommand)) {
                throw new Error("An instance of the BaseCommand is expected");
            }
        },
        
        getCommandOptions: function() {
            return { 
                configuration: this.configuration,
                serviceClient: this.serviceClient  
            };
        },
        
        handleSuccess: function(status : Status) {
            
        },
    
        handleFailure: function(status : Status, exception : Error) {
            utils.addStatusError(status, "error", exception);
            logger.error(utils.getExceptionMessage(exception), exception);
        }
    });
    
    Namespace.extend(converse, { 
        webservices: {
            AbstractService: AbstractService
        }
    });
    
})();
