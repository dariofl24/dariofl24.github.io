importPackage(dw.util);
importPackage(dw.system);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libStringUtilsExt.ds");

(function() {
    
    var INFO_STATUS_ITEM_CODE = "webservices.command.info";
    var ERROR_STATUS_ITEM_CODE = "webservices.command.error";

    var getExceptionMessage = function(exception) {    
        if (exception.causeFullName == 'java.net.UnknownHostException' || ('javaFullName' in exception && exception.javaFullName=='java.net.UnknownHostException')){
            return exception.faultString || ((exception.javaName || '') + ' '+ (exception.javaMessage || ''));
        }
        
        if (exception.causeFullName == 'java.net.SocketTimeoutException' || ('javaFullName' in exception && (exception.javaFullName=='org.apache.commons.httpclient.ConnectTimeoutException' || exception.javaFullName=='java.net.SocketTimeoutException'))){
            return exception.faultString || exception.message;
        }
        
        if (exception.causeFullName == '(500)Internal Server Error' || ('javaFullName' in exception && exception.javaFullName=='(500)Internal Server Error')){
            return exception.faultString;
        }
        
        if (exception instanceof Error) {
            var error : String = "An error occured during web service call: (";
            error += "message: " + exception.message + "\n";
            error += "fileName: " + exception.fileName + "#" + exception.lineNumber + "\n";
            error += "stackTrace: " + exception.stack; 
            error += ");";
            
            return error;
        }
        
        if (exception instanceof Fault) {
            return exception.faultString;
        } else {
            var errout : String = "An error occured during web service call: (";
            for (var msg in exception) {
                errout += msg + ": " + exception[msg] + ", ";
            }
            return errout.replace(/, $/, ')');
        }
    };
    
    var createStatus = function() : Status {
        return new Status();
    };
    
    var addStatusDetail = function(status : Status, key : String, value : Object) {
        var statusItem : StatusItem = getAddStatusItem(status, Status.OK, INFO_STATUS_ITEM_CODE);
        statusItem.addDetail(key, value);
    };
    
    var addStatusError = function(status : Status, key : String, exception : Error) {
        var statusItem : StatusItem = getAddStatusItem(status, Status.ERROR, ERROR_STATUS_ITEM_CODE);
        statusItem.addDetail(key + ".cause", exception);
        statusItem.addDetail(key + ".message", getExceptionMessage(exception));
    };
    
    var getAddStatusItem = function(status : Status, okOrError : Number, code : String) : StatusItem {
        var statusItem : StatusItem = findStatusItemByCode(status, code);
        if (empty(statusItem)) {
            statusItem = new StatusItem(okOrError, code);
            status.addItem(statusItem);
        }
        return statusItem; 
    };
    
    var findStatusItemByCode = function(status : Status, code : String) : StatusItem {
        for each (var statusItem : StatusItem in status.getItems()) {
            if (statusItem.getCode() === code) {
                return statusItem;
            }
        }
        return null;
    };
    
    var findStatusItemDetailByKey = function(statusItem : StatusItem, key : String) : Object {
        return empty(statusItem) ? null : statusItem.getDetails().get(key);
    };
    
    var findStatusItemDetailBySuffix = function(statusItem : StatusItem, suffix : String) : Object {
        var detail : Object = null;
        if (!empty(statusItem)) {
            var details : Map = statusItem.getDetails();
            for each (var key in details.keySet()) {
                if (StringUtilsExt.endsWith(key, suffix)) {
                    detail = details.get(key);
                    break;
                }
            }
        }
        return detail;
    };
        
    var getStatusExceptionCause = function(status : Status) : Error {
        var statusItem : StatusItem = findStatusItemByCode(status, ERROR_STATUS_ITEM_CODE);
        return findStatusItemDetailBySuffix(statusItem, ".cause");
    };
    
    var getStatusExceptionMessage = function(status : Status) : String {
        var statusItem : StatusItem = findStatusItemByCode(status, ERROR_STATUS_ITEM_CODE);
        return findStatusItemDetailBySuffix(statusItem, ".message");
    };
        
    var getStatusCommand = function(status : Status) : Object {
        var statusItem : StatusItem = findStatusItemByCode(status, INFO_STATUS_ITEM_CODE);
        return findStatusItemDetailByKey(statusItem, "command");
    };
    
    var getCommandDuration = function(status : Status) : Number {
        var statusItem : StatusItem = findStatusItemByCode(status, INFO_STATUS_ITEM_CODE);
        var start : Date = findStatusItemDetailByKey(statusItem, "start");
        var finish : Date = findStatusItemDetailByKey(statusItem, "finish");
        return (!empty(start) && !empty(finish)) ? finish.getTime() - start.getTime() : -1; 
    };

    var SerializationHelper = function() {
        function isString(string) {
            var isString = string instanceof String;
            
            if (!isString) {
                // This is an absolutely ugly fallback. For some reason, the instanceof operator does not return
                // true sometimes. So we test if the substring function is available. If true, then the value is a String.
                try {
                    string.substring(0, 0);
                    
                    isString = true;
                } catch (e) {
                    // Nothing.
                }
            }
            
            return isString;
        }

        function isArray(array) {
            var isArray = array instanceof Array;
            
            if (!isArray) {
                // This is an absolutely ugly fallback. For some reason, the instanceof operator does not return
                // true sometimes. So we test if the unshift function is available. If true, then the value is an Array.
                try {
                    array.unshift();
                    
                    isArray = true;
                } catch (e) {
                    // Nothing.
                }
            }
            
            return isArray;
        }

        function isDate(date) {
            var isDate = date instanceof Date;
            
            if (!isDate) {
                // This is an absolutely ugly fallback. For some reason, the instanceof operator does not return
                // true sometimes. So we test if the getUTCFullYear function is available. If true, then the value is a Date.
                try {
                    date.getUTCFullYear();
                    
                    isDate = true;
                } catch (e) {
                    // Nothing.
                }
            }
            
            return isDate;
        }

        function toXml(object) {
            var xml_obj : XML = null;
            if (isString(object)) {
                xml_obj = new XML(object);
            } else if (object instanceof XML) {
                xml_obj = object;
            } else {
                xml_obj = object2XmlObject("response", object);
            }

            return xml_obj;
        }

        function object2XmlObject(rootName : String, object : Object, typeSolver) : XML {
            var xmlObject : XML = new XML('<' + rootName + '></' + rootName + '>');
            object2XmlObject2(xmlObject, object, typeSolver ? typeSolver : null);
            return xmlObject;
        }

        function object2XmlObject2(xmlObject : XML, object : Object, typeSolver) {
            for (var property in object) {
                if (property == null) {
                    continue;
                }
                
                try {
                    // For some reason the access will throw an exception if the property is of a special date type.
                    var value = object[property];
                    var type = typeof value;
                    if(value == null) {
                        continue;
                    }
                } catch (e) {
                    continue;
                }
                
                // If the values were created via the new operator, then the typof always returns object!
                // So we recheck what type it really is.
                if (value instanceof Number) {
                    type = 'number';
                } else if (value instanceof Boolean) {
                    type = 'boolean';
                } else if (value instanceof String) {
                    type = 'string';
                }
                
                if (isDate(value)) {
                    var calendar : Calendar = dw.system.Site.getCalendar();
                    calendar.setTimeZone('GMT+00');
                    calendar.setTime(value);
                    
                    xmlObject[property] = StringUtils.formatCalendar(calendar, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                    xmlObject[property].@type = 'date';
                } else if (value instanceof dw.value.Money) {
                    xmlObject[property] = '';
                    object2XmlObject2(xmlObject[property], value, typeSolver ? typeSolver : null);
                    xmlObject[property].@type = 'dw.value.Money';
                } else if (value instanceof dw.value.Quantity) {
                    xmlObject[property] = '';
                    object2XmlObject2(xmlObject[property], value, typeSolver ? typeSolver : null);
                    xmlObject[property].@type = 'dw.value.Quantity';
                } else if (type == "object") {
                    var valueIsArray = isArray(value);
                    
                    // This is an absolutely speacial case. These attributes were created with newNativeArray and MUST be
                    // handled as arrays.
                    // Unfortunately it is not possible to identify such arrays.
                    if (property == 'mboBasketDataEntryArray' || property == 'newsletterCategories') {
                        valueIsArray = true;
                    }
                    
                    xmlObject[property] = '';
                    if (value instanceof ArrayList || valueIsArray) {
                        var i = 0;
                        for each (var arrayObject in value) {
                            var arrayObjectType = typeof arrayObject;
                            xmlObject[property]['entry' + i] = '';
                            if (arrayObjectType == "object") {
                                object2XmlObject2(xmlObject[property]['entry' + i], arrayObject, typeSolver ? typeSolver : null);
                            } else {
                                xmlObject[property]['entry' + i] = arrayObject;
                                xmlObject[property]['entry' + i].@type = arrayObjectType;
                            }
                            
                            i++;
                        }
                        xmlObject[property].@type = (valueIsArray ? 'array' : 'dw.util.ArrayList');
                    } else {
                        object2XmlObject2(xmlObject[property], value, typeSolver ? typeSolver : null);
                    }
                } else if (type != "function") {
                    xmlObject[property] = value;
                    xmlObject[property].@type = type;
                } else if (type == 'function' && property == 'get') {
                    // This is hack to log quantity and money interface objects.
                    try {
                        xmlObject[property] = object.get();
                        xmlObject[property].@type = typeof(xmlObject[property]);
                    } catch (e) {
                        // Some objects are not interface objects, but support the get function too! But some of them
                        // need parameters, so the call will fail.
                    }
                }
            }

            if (typeSolver) {
                xmlObject.@type = typeSolver(object);
            } else {
                xmlObject.@type = 'object';
            }
        }

        return {
            toXml: toXml
        };
    }
    
    Namespace.extend(converse, { 
        webservices: {
            ServiceUtils: {
                getExceptionMessage: getExceptionMessage,
                createStatus: createStatus,
                addStatusDetail: addStatusDetail,
                addStatusError: addStatusError,
                getStatusExceptionCause: getStatusExceptionCause,
                getStatusExceptionMessage: getStatusExceptionMessage,
                getStatusCommand: getStatusCommand,
                getCommandDuration: getCommandDuration
            },
            SerializationHelper: SerializationHelper
        }
    });
    
})();
