/**
 * @input Unit: Object
 */

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");


importScript("converse_core:constants.ds");
importScript("converse_webservices:service/ServiceConfigurationFactory.ds");

function execute(args : PipelineDictionary) : Number {
	
	var originalGetAllPreferences = converse.webservices.ServiceConfigurationFactory.getAllSitePreferences;
	
	var getConfigurationFactoryMock = function() {
        var configurationFactory = converse.webservices.ServiceConfigurationFactory;
        
        configurationFactory.getAllSitePreferences = function() {
            return {
                "genesco.url" : "genescourl",
                "genesco.pwd" : "genescopwd",
                "cardinal.url" : "cardinalurl",
                "cardinal.merchId" : "cardinalmerchid",
                "simplesetting" : "simplesettingvalue"
            };
        };
    
        return configurationFactory;
    };

    args.Unit.describe("Service Configuration Test Suite")
        .test("Get_service_configuration", function () {
            var configurationFactory = getConfigurationFactoryMock();

            var genescoConfig = configurationFactory.getServiceConfiguration("genesco");
            Assert.areEqual("genescourl", genescoConfig.url);
            Assert.areEqual("genescopwd", genescoConfig.pwd);

            var cardinalConfig = configurationFactory.getServiceConfiguration("cardinal");
            Assert.areEqual("cardinalurl", cardinalConfig.url);
            Assert.areEqual("cardinalmerchid", cardinalConfig.merchId);
        })
        .test("Get_non_existent_service_configuration", function () {
            var configurationFactory = getConfigurationFactoryMock();
            Assert.exception(configurationFactory.getServiceConfiguration, "Configuration for service 'fake' does not exist!" ,"fake");
        });
        
    converse.webservices.ServiceConfigurationFactory.getAllSitePreferences = originalGetAllPreferences;

    return PIPELET_NEXT;
}
