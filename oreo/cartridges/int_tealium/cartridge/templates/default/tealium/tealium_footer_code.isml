<iscache status="off" /> 

<isif condition="${dw.system.Site.current.preferences.custom.tealium_profile != null && dw.system.Site.current.preferences.custom.tealium_account != null}">				 

<isscript>
	importPackage( dw.order );
	importPackage( dw.catalog );
	importPackage( dw.util );
	importPackage( dw.content );
	importPackage( dw.campaign );

	importScript("converse_core:product/ProductUtils.ds");
    importScript("converse_core:constants.ds");
	importScript("converse_core:util/SessionUtils.ds");
	importScript("converse_core:util/LocaleInfo.ds");

    var __utagDataStr : String = "";
	var __utagData : Object = new Object();
	var __productLineItems : Collection = null;
	var __couponLineItems : Collection = null;
	var __priceAdjustments : Collection = null;
	var __isABTestEnabled : Boolean = dw.system.Site.getCurrent().getCustomPreferenceValue('abtest.enabled');
    var __calendar : Calendar = new Calendar();
	
/* DEBUG (uncomment for debug) */
//try{	
/* END DEBUG */

	__utagData.page_name = converse.utils.session.getCurrentPageTitleFromSession( pdict.CurrentSession );
	__utagData.previous_page_name = converse.utils.session.getPreviousPageTitleFromSession( pdict.CurrentSession );

	__utagData.page_type = pdict.CurrentHttpParameterMap.pagetype.value != null ? pdict.CurrentHttpParameterMap.pagetype.value : "content";
	__utagData.page_type_original = __utagData.page_type;
	
	/* From pageContext.type -- the pageContext object set is in every storefront template */
	__utagData.page_context_type = (""+pdict.CurrentHttpParameterMap.pagecontexttype).toLowerCase();
	__utagData.page_context_title = (""+pdict.CurrentHttpParameterMap.pagecontexttitle).toLowerCase();
    
    __calendar.setTimeZone("UTC");
    __utagData.server_timestamp = StringUtils.formatCalendar(__calendar, "dd/MM/yyyy HH:mm:ss");
    __utagData.country_code = converse.utils.getCurrentCountryCode(pdict.CurrentRequest);
    
    if (pdict.CurrentHttpParameterMap.ishomepage.value === 'true') {
        __utagData.page_type = "homepage";
    }
    
    if (pdict.OriginalURL != null) {
        __utagData.link = {
                event : "error: 404",
                original_url : pdict.OriginalURL 
            };
            
        if ( pdict.CurrentRequest.getHttpHeaders().containsKey("x-is-host") && pdict.CurrentRequest.getHttpHeaders().containsKey("x-is-path_info") ) {
            __utagData.link.error_url = pdict.CurrentRequest.getHttpHeaders().get("x-is-host") + pdict.CurrentRequest.getHttpHeaders().get("x-is-path_info");
        }
    }
	
	if (pdict.CurrentUser != null)
	{
		__utagData.user_anonymous = "" + pdict.CurrentUser.anonymous;
		__utagData.user_authenticated = "" + pdict.CurrentUser.authenticated;
		__utagData.user_registered = "" + pdict.CurrentUser.registered;
		__utagData.customer_id = "" + pdict.CurrentUser.ID;
		if (pdict.CurrentUser.profile != null && pdict.CurrentUser.profile.email != null) {
			__utagData.customer_email_address = pdict.CurrentUser.profile.email;
		}
	}

	if (__isABTestEnabled)
	{
		var __abtestID : String = dw.system.Site.getCurrent().getCustomPreferenceValue('abtest.testID');
		var __abtestExperimentID : String = dw.system.Site.getCurrent().getCustomPreferenceValue('abtest.segmentID.experiment');
		var __abtestControlID : String = dw.system.Site.getCurrent().getCustomPreferenceValue('abtest.segmentID.control');

		if (dw.campaign.ABTestMgr.isParticipant(__abtestID , __abtestExperimentID))
		{
			__utagData.dw_test_version = __abtestExperimentID;
		} else if (dw.campaign.ABTestMgr.isParticipant(__abtestID , __abtestControlID))
		{
			__utagData.dw_test_version = __abtestControlID;
		}
	}
    
	if (pdict.CurrentHttpParameterMap.contentsearchresultscount.value != null && pdict.product == null && pdict.CurrentHttpParameterMap.pagecgid == '') 
	{
		__utagData.search_results = "" + pdict.CurrentHttpParameterMap.contentsearchresultscount.value;
		__utagData.page_type = "content search";
	}
	
	if (pdict.CurrentHttpParameterMap.searchresultscount.value != null && pdict.product == null && pdict.CurrentHttpParameterMap.pagecgid == '') 
	{
		__utagData.search_results = "" + pdict.CurrentHttpParameterMap.searchresultscount.value;
		__utagData.page_type = "search";
	}	
    
	if (pdict.CurrentHttpParameterMap.pagecgid != ''  && pdict.product == null)
	{
		__utagData.page_type = "category";
		__utagData.page_category = pdict.CurrentHttpParameterMap.pagecgid.value;
		__utagData.page_filter_gender = !empty(pdict.CurrentHttpParameterMap.refinebygendervalue) ? pdict.CurrentHttpParameterMap.refinebygendervalue.value : 'no gender';
		__utagData.page_filter_merchPlannerCategory = !empty(pdict.CurrentHttpParameterMap.refinebymerchplannercategoryvalue) ? pdict.CurrentHttpParameterMap.refinebymerchplannercategoryvalue.value : null;
		__utagData.page_filter_subGender = !empty(pdict.CurrentHttpParameterMap.refinebysubgendervalue) ? pdict.CurrentHttpParameterMap.refinebysubgendervalue.value : null;
		__utagData.page_filter_cut = !empty(pdict.CurrentHttpParameterMap.refinebycutvalue) ? pdict.CurrentHttpParameterMap.refinebycutvalue.value : null;
	}
	
	if (pdict.CurrentHttpParameterMap.searchterm != null && pdict.CurrentHttpParameterMap.searchterm.value!= null)
	{
		__utagData.search_term = "" + pdict.CurrentHttpParameterMap.searchterm.value;
	}

	if (pdict.product != null && pdict.product.productSet != true)
	{		
	
		__utagData.page_name = pdict.product.name;
		__utagData.page_type = "product";
		
		if (pdict.product.custom.gender != null)
        {
            __utagData.page_gender = pdict.product.custom.gender.value.toLowerCase();
        }

		/* OPTIONAL: classification */
		/*
		if (pdict.product.classificationCategory != null)
		{
			__utagData.product_classification = ["" + pdict.product.classificationCategory.displayName];
		}
		*/
		/* END OPTIONAL: classification */

		
		/* OPTIONAL: multiple categories */
		/*
		if (pdict.product.categories != null){
			for(var ___cat in pdict.product.categories){
				__utagData["product_cat_id"+___cat]=["" + pdict.product.categories[___cat].ID];
				__utagData["product_cat_name"+___cat]=["" + pdict.product.categories[___cat].displayName];
			}
		}
		*/
		/* END OPTIONAL: multiple categories */
		
		if (pdict.product.priceModel.price.value != "0")
		{
			__utagData.product_unit_price = [pdict.product.priceModel.price.value.toFixed(2)];
		}
		else if (pdict.product.priceModel.maxPrice.value != "0")
		{
			__utagData.product_unit_price = [pdict.product.priceModel.maxPrice.value.toFixed(2)];
		}
		else
		{
			__utagData.product_unit_price = [pdict.product.priceModel.minPrice.value.toFixed(2)];
		}
 
		
		__utagData.product_id = ["" + pdict.product.ID];
		__utagData.product_name = ["" + pdict.product.name];
		__utagData.product_brand = ["" + pdict.product.brand];
		__utagData.product_business_unit_id = [ProductUtils.getBusinessUnitId(pdict.product)];
		
		if ('pillar' in pdict.product.custom && !empty(pdict.product.custom.pillar.value)){
			__utagData.product_pillar = ["" + pdict.product.custom.pillar.value ];
		}
		if ('productType' in pdict.product.custom && !empty(pdict.product.custom.productType.value)){
			__utagData.product_type = ["" + pdict.product.custom.productType.value ];
		}
		if ('merchPlannerCategory' in pdict.product.custom && !empty(pdict.product.custom.merchPlannerCategory)){
			__utagData.merch_planner_category = ["" + pdict.product.custom.merchPlannerCategory ];
		}
		if ('brandSegment' in pdict.product.custom && !empty(pdict.product.custom.brandSegment)){
			 __utagData.brand_segment = ["" + pdict.product.custom.brandSegment ];
		}
		if ('productType' in pdict.product.custom && !empty(pdict.product.custom.productType.value)){
			if (pdict.product.custom.productType.value != 'dyo'){
				__utagData.bussiness_line = ["inline"];
			}else if (pdict.product.custom.productType.value == 'dyo'){
				if('pillar' in pdict.product.custom && !empty(pdict.product.custom.pillar.value) && pdict.product.custom.pillar.value == 'Sneakers'){
					__utagData.bussiness_line = ["blank canvas"];
				}else{
					__utagData.bussiness_line = ["inline"];
				}
			}
			
		}
		
		/* May wish to use .displayName here instead of .ID */
		if (pdict.product.primaryCategory != null)
		{
			__utagData.product_category = ["" + pdict.product.primaryCategory.ID];
		}
		else if(pdict.product.isVariant() && pdict.product.masterProduct != null && pdict.product.masterProduct.primaryCategory != null)
		{
			__utagData.product_category = ["" + pdict.product.masterProduct.primaryCategory.ID];
		}
		
		if (pdict.product.isVariant() || pdict.product.custom.productType.value === 'dyo')
		{
			__utagData.product_sku = ["" + pdict.product.manufacturerSKU];
		}
		else
		{
			var variationModel : ProductVariationModel = pdict.product.getVariationModel();
			var defaultVariant = ProductUtils.getDefaultVariant(variationModel);
			__utagData.product_sku = ["" + defaultVariant.manufacturerSKU];
		}
		
		/** OPTIONAL: manufacturer **/
		/*
		__utagData.product_manufacturer = ["" + pdict.product.manufacturerName];
		*/
		/** END OPTIONAL: manufacturer **/
	}
	
	if (pdict.order != null && pdict.order.orderNo != null) 
	{
		__utagData.page_type = "checkout";
		__utagData.order_id = pdict.order.orderNo;
		__utagData.inline_web_order_id = empty(pdict.order.custom.inlineJourneysOrderID) ? "" : pdict.order.custom.inlineJourneysOrderID;
		__utagData.dyo_web_order_id = empty(pdict.order.custom.dyoJourneysOrderID) ? "" : pdict.order.custom.dyoJourneysOrderID;
		
		__productLineItems = pdict.order.allProductLineItems;
		__couponLineItems = pdict.order.couponLineItems;
		__priceAdjustments = pdict.order.priceAdjustments;

		__utagData.order_discount = (pdict.order.merchandizeTotalNetPrice.value - pdict.order.adjustedMerchandizeTotalNetPrice.value).toFixed(2);
		__utagData.order_subtotal = pdict.order.adjustedMerchandizeTotalNetPrice.value.toFixed(2);
		__utagData.order_shipping = pdict.order.adjustedShippingTotalNetPrice.value.toFixed(2);

		__utagData.order_tax = ((pdict.order.totalTax) ? (pdict.order.totalTax.value + pdict.order.shippingTotalTax.value).toFixed(2) : "");
		__utagData.order_product_tax = pdict.order.totalTax ? pdict.order.totalTax.value.toFixed(2) : "0";
		__utagData.order_shipping_tax = pdict.order.shippingTotalTax.value.toFixed(2);

		__utagData.order_total = (pdict.order.adjustedMerchandizeTotalGrossPrice.value + pdict.order.adjustedShippingTotalNetPrice.value + pdict.order.shippingTotalTax.value).toFixed(2);

		__utagData.order_payment_type = pdict.order.paymentInstrument.paymentMethod;
		__utagData.order_currency = pdict.order.currencyCode;
		__utagData.order_postal_code = "" + pdict.order.billingAddress.postalCode;

        if (pdict.CurrentCustomer.isAuthenticated()) {
            __utagData.customer_email_address = pdict.order.customerEmail;
        }
        __utagData.customer_ship_city = pdict.order.defaultShipment.shippingAddress.city;
        __utagData.customer_ship_state = pdict.order.defaultShipment.shippingAddress.stateCode;
        __utagData.customer_ship_country = converse.utils.getCurrentCountryCode( pdict.CurrentRequest );
        __utagData.customer_ship_zip = pdict.order.defaultShipment.shippingAddress.postalCode;
        __utagData.customer_bill_city = pdict.order.billingAddress.city;
        __utagData.customer_bill_state = pdict.order.billingAddress.stateCode;
        __utagData.customer_bill_country = converse.utils.getCurrentCountryCode( pdict.CurrentRequest );
        __utagData.customer_bill_zip = pdict.order.billingAddress.postalCode;

	}
	
	if (pdict.product != null && pdict.product.productSet == true && pdict.productsetarraylistout != null)
	{
		__utagData.page_name = pdict.product.name;
		__utagData.page_type = "product set";
		__utagData.product_name = new Array();
		__utagData.product_brand = new Array();
		__utagData.product_sku = new Array();
		__utagData.product_id = new Array();
		__utagData.product_category = new Array();
		__utagData.product_unit_price = new Array();
		
		/* OPTIONAL */
		/*
		__utagData.product_manufacturer = new Array();
		__utagData.product_classification = new Array();
		*/
		/* END OPTIONAL: */
		for each(var ___pli in pdict.productsetarraylistout)
		{
			__utagData.product_id.push("" + ___pli.ID);
			__utagData.product_name.push("" + ___pli.name);	
			__utagData.product_brand.push("" + ___pli.brand);
			__utagData.product_sku.push("" + ___pli.manufacturerSKU);
			
			/* OPTIONAL: manufacturer */
			/*
			
			__utagData.product_manufacturer.push("" + ___pli.manufacturerName);
			*/
			/* END OPTIONAL: manufacturer
			
			/* OPTIONAL: product classification */
			/*		
			if (___pli.classificationCategory != null)
			{
				__utagData.product_classification.push("" + ___pli.classificationCategory.displayName);
			}else{
				__utagData.product_classification.push("");
			}
			*/
			/* END OPTIONAL: product classification */
			
			if (___pli.primaryCategory != null)
			{
				__utagData.product_category.push("" + ___pli.primaryCategory.ID);
			}
			else if (___pli.isVariant() && ___pli.masterProduct != null && ___pli.masterProduct.primaryCategory != null)
			{
				__utagData.product_category.push("" + ___pli.masterProduct.primaryCategory.ID);
			}
			else{
				__utagData.product_category.push("");
			}
			
			
			if (___pli.priceModel.price.value != "0")
			{
				__utagData.product_unit_price.push(""+___pli.priceModel.price.value.toFixed(2));
			}
			else if (___pli.priceModel.maxPrice.value != "0")
			{
				__utagData.product_unit_price.push(""+___pli.priceModel.maxPrice.value.toFixed(2));
			}
			else
			{
				__utagData.product_unit_price.push(""+ ___pli.priceModel.minPrice.value.toFixed(2));
			}
			
		}
		
	}
	
	if (__utagData.page_context_type == "cart" 
		&& pdict.product == null 
		&& pdict.basket != null 
		&& pdict.basket.allProductLineItems != null)
	{
		__utagData.page_type = "cart";
	}
	
	if (__utagData.page_context_type.indexOf("checkout") != -1
		&& pdict.product == null 
		&& pdict.basket != null 
		&& pdict.basket.allProductLineItems != null) 
	{
		__utagData.page_type = "checkout";
		__productLineItems = pdict.basket.allProductLineItems;
		__couponLineItems = pdict.basket.couponLineItems;
		__priceAdjustments = pdict.basket.priceAdjustments;
	}
	
	if (__couponLineItems != null && __couponLineItems.length != null && __couponLineItems.length>0)
	{
		__utagData.coupon_codes = new Array();
		for each(var ___cli : CouponLineItem in __couponLineItems)
		{
			__utagData.coupon_codes.push(___cli.couponCode);
		}
	}
	
	if (__priceAdjustments != null && __priceAdjustments.length>0)
	{
		__utagData.order_coupon_discount = new Array();
		__utagData.order_coupon_promo = new Array();
		for each(var ___priceAdj : PriceAdjustment in __priceAdjustments)
		{
	    	if (___priceAdj.promotion != null && ___priceAdj.promotion.promotionClass == "ORDER")
	    	{
				__utagData.order_coupon_discount.push( ___priceAdj.priceValue + "");
				__utagData.order_coupon_promo.push( ___priceAdj.promotionID + "");
	 		}
		}				
	}
	
	if (__productLineItems != null)
	{
		__utagData.product_name = new Array();
		__utagData.product_brand = new Array();
		__utagData.product_unit_price = new Array();
		__utagData.product_sku = new Array();
		__utagData.product_id = new Array();
		__utagData.product_business_unit_id = new Array();
		__utagData.product_category = new Array();
		__utagData.product_quantity = new Array();
		__utagData.product_coupon_discount = new Array();
		__utagData.product_coupon_promo = new Array();
		__utagData.product_coupon_promo = new Array();
        __utagData.product_unit_price_inc_disc_novat =  new Array();
		/* OPTIONAL */
		/*
		__utagData.product_manufacturer = new Array();
		__utagData.product_classification = new Array();
		*/
		/* END OPTIONAL */
		
		for each(var ___pli : ProductLineItem in __productLineItems)
		{
			__utagData.product_id.push("" + ___pli.product.ID);
			__utagData.product_name.push("" + ___pli.product.name);	
			__utagData.product_brand.push("" + ___pli.product.custom.brandSegment.value);
			__utagData.product_sku.push("" + ___pli.manufacturerSKU);
			__utagData.product_business_unit_id.push(ProductUtils.getBusinessUnitId(___pli.product));

			/* OPTIONAL: product manufacturer */
			/*
			__utagData.product_manufacturer.push("" + ___pli.product.manufacturerName);
			*/
			/* END OPTIONAL: product manufacturer */
			
			/* OPTIONAL: product classification */
			/*
			if (___pli.product.classificationCategory != null)
			{
				__utagData.product_classification.push("" + ___pli.product.classificationCategory.displayName);
			}else{
				__utagData.product_classification.push("");
			}
			*/
			/* END OPTIONAL: product classification */
			
			if (___pli.product.primaryCategory != null)
			{
				__utagData.product_category.push("" + ___pli.product.primaryCategory.ID);
			}
			else if(___pli.product.isVariant() && ___pli.product.masterProduct != null && ___pli.product.masterProduct.primaryCategory != null)
			{
				__utagData.product_category.push("" + ___pli.product.masterProduct.primaryCategory.ID);
			}
			else{
				__utagData.product_category.push("");
			}

			__utagData.product_quantity.push("" + ___pli.quantityValue);
			__utagData.product_unit_price.push("" + ___pli.netPrice.value);
           	__priceAdjustments = ___pli.priceAdjustments;
           	
           	var __product_unit_price = ___pli.netPrice.value;
           	 
			if (__priceAdjustments != null && __priceAdjustments.length>0)
			{
				for each(var ___priceAdj : PriceAdjustment in __priceAdjustments)
		    	{
		    		if (___priceAdj.promotion != null && ___priceAdj.promotion.promotionClass != "ORDER")
		    		{
		    			__utagData.product_coupon_discount.push( ___priceAdj.priceValue.toFixed(2) + "");
		    			__utagData.product_coupon_promo.push( ___priceAdj.promotionID + "");
		    			
		    			var ___appliedDiscount = ___priceAdj.appliedDiscount;
				        
				        if(___appliedDiscount.type == Discount.TYPE_PERCENTAGE || ___appliedDiscount.type == Discount.TYPE_PERCENTAGE_OFF_OPTIONS){
				            
				            __utagData.product_unit_price_inc_disc_novat.push( ( ((100 - ___appliedDiscount.percentage)/100) * __product_unit_price  ).toFixed(2) );
				            
				        } else if (___appliedDiscount.type == Discount.TYPE_AMOUNT){
				            
				            __utagData.product_unit_price_inc_disc_novat.push( ( ( __product_unit_price / ___pli.quantityValue ) - ( ___appliedDiscount.amount / ___pli.quantityValue) ).toFixed(2) );
				            
				        } else if (___appliedDiscount.type == Discount.TYPE_FIXED_PRICE){
				            
				            __utagData.product_unit_price_inc_disc_novat.push( ( ( __product_unit_price / ___pli.quantityValue ) + ( ___priceAdj.priceValue / ___pli.quantityValue ) ).toFixed(2) );
				        } 
				        
		    		}
		    	}				
			} else {
				__utagData.product_coupon_discount.push("");
				__utagData.product_coupon_promo.push("");
				__utagData.product_unit_price_inc_disc_novat.push( __product_unit_price.toFixed(2) );
			}
			

			/*** This may only make sense if each product has the same number of categories.  And category "types" are in the same order for each product. ***/
			/*** BEGIN: Multiple Product Categories ***/
			/*	
			if (___pli.product.categories != null){
				for(var ___cat in ___pli.product.categories){
					if(__utagData["product_cat_id"+___cat] == null){__utagData["product_cat_id"+___cat] = new Array();}
					if(__utagData["product_cat_name"+___cat] == null){__utagData["product_cat_name"+___cat] = new Array();}
					__utagData["product_cat_id"+___cat].push(""+___pli.product.categories[___cat].ID);
					__utagData["product_cat_name"+___cat].push(""+___pli.product.categories[___cat].displayName);
				}
			}
			*/
			/*** END: Multiple Product Categories ***/

		}
	}
	
	__utagDataStr = JSON.stringify(__utagData, null, "  ");
	
	out.print("\n<script type=\"text/javascript\">\nvar utag_data = " + __utagDataStr + ";\n</script>");

/* DEBUG (uncomment for debug) */
//}catch(e){out.print("<pre>\n");out.print("\nException : " + e);out.print("\n</pre>");};
/* END DEBUG */


</isscript>

<script type="text/javascript">

    function getInstanceType() {
        switch (${dw.system.System.instanceType}) {
           case ${dw.system.System.DEVELOPMENT_SYSTEM}:
                return "dev";
                break;
           case ${dw.system.System.STAGING_SYSTEM}:
                return "qa";
                break;
           case ${dw.system.System.PRODUCTION_SYSTEM}:
                return "prod";
                break;
        }
    }

    (function(a,b,c,d){
    a='//tags.tiqcdn.com/utag/${dw.system.Site.current.preferences.custom.tealium_account}/${dw.system.Site.current.preferences.custom.tealium_profile}/' + getInstanceType() + '/utag.js';
    b=document;c='script';d=b.createElement(c);d.src=a;d.type='text/java'+c;d.async=1;
    a=b.getElementsByTagName(c)[0];a.parentNode.insertBefore(d,a);
    })();

    jQuery = jQuery || $;
    
    // Predictive Intelligence Recommendations Link Tracker for Tealium
    jQuery(".predictive-intelligence-recommendations-container .product-tile a").live("mousedown", function(e){
        try{
	        var productTile = jQuery(this).closest(".product-tile").get(0);
	        var productId = jQuery(productTile).data("itemid");
	        var productTitle = jQuery(productTile).find(".product-name a.name-link").attr("title");

	        utag_data.predictive_intel_click = productId.replace(/_[0-9]+$/i,"") + ":" + productTitle;
        }catch(e){
            //
        }
     });
    
</script>
 
</isif>