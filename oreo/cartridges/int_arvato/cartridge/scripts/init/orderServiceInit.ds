importPackage(dw.svc);
importPackage(dw.net);
importPackage(dw.io);
importPackage(dw.ws);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.order);
importPackage(dw.web);
importPackage(dw.campaign);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:account/order/OrderUtils.ds");

var logger = Logger.getLogger("ArvatoIntegration");
logger.info("OrderService service registry");
var OrderUtils = converse.account.order.OrderUtils;

ServiceRegistry.configure("OrderService.import", {      
    initServiceClient: function() {

        logger.info("OrderService initServiceClient");
        this.webreference = webreferences2.orderservice;
        // Get the default service.
        return this.webreference.getDefaultService();
    },

    createRequest: function(svc: SOAPService, orderRef: Object): Object {
        logger.info("OrderService createRequest");
        
        var orders = new this.webreference.com.demandware.xml.impex.order._2015_09_01_converse.Orders();

        var packageRef = this.webreference.com.demandware.xml.impex.order._2015_09_01_converse;
        
        orders.getOrder().add(createOrderXML(packageRef, orderRef));

        return orders;   
    },
      

    execute: function(svc: SOAPService, orders: Object) {
        logger.info("making orderservice call {0}", orders);

        var response = svc.serviceClient.importOrders(orders);

        logger.info("response from OrderService  --" + response.result);

        return response;
    },
        parseResponse: function(service: SOAPService, response: Object): Object {
        var responseWrapper = {};
        responseWrapper.result = response.result;

        return responseWrapper;    
    },
        mockCall: function(service: SOAPService, request: Object): Object {

            }

});

function createOrderXML(packageRef, orderRef) {
    logger.info("OrderService createOrderXML begin --- ");

    var order = new packageRef.ComplexTypeOrder();
    order.setOrderNo(orderRef.orderNo);
    order.setOrderDate(new Calendar(orderRef.creationDate));
    order.setCreatedBy("storefront");
    order.setOriginalOrderNo(orderRef.originalOrderNo);
    order.setCurrency(orderRef.currencyCode);
    order.setCustomerLocale(orderRef.customerLocaleID);
    order.setCurrentOrderNo(orderRef.currentOrderNo);
    order.setInvoiceNo(orderRef.invoiceNo);

    //set customer
    order.setCustomer(generateCustomerInfo(packageRef, orderRef));

    //set status
    order.setStatus(generateStatusInfo(packageRef, orderRef));

    //set product line items
    order.setProductLineitems(generateLineItemInfo(packageRef, orderRef));

    //set shipping line items
    order.setShippingLineitems(generateShippingLineInfo(packageRef, orderRef));

    //set shipments
    order.setShipments(generateShipmentInfo(packageRef, orderRef));

    //set Payments
    order.setPayments(generatePaymentInfo(packageRef, orderRef));

    //set Totals
    order.setTotals(generateOrderTotals(packageRef, orderRef));

    var orderCustomAttributes = new packageRef.SharedTypeCustomAttributes();
    orderCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "customerIP", orderRef.custom.customerIP));
    orderCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "createdByDevice", orderRef.custom.createdByDevice));
    orderCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "orderClientID", "175"));
    orderCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "orderCreationDate", orderRef.custom.orderCreationDate));
    orderCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "taxAvailable", orderRef.custom.taxAvailable.toString()));
    

    //set custom attributes
    order.setCustomAttributes(orderCustomAttributes);

    return order;

    logger.info("OrderService createOrderXML end --- ");

}

function getAttrRef(packageRef, attrId, attrValue) {

    var custAttrRef = new packageRef.SharedTypeCustomAttribute();
    custAttrRef.setAttributeId(attrId);
    custAttrRef.getContent().add(attrValue);

    return custAttrRef;

}


function generateCustomerInfo(packageRef, orderRef) {
    logger.info("OrderService generateCustomerInfo begin --- ");

    var customer = new packageRef.ComplexTypeCustomer();
    customer.setCustomerNo(orderRef.customerNo);
    customer.setCustomerName(orderRef.customerName);
    customer.setCustomerEmail(orderRef.customerEmail);


    //populate billing address
    var billingAddress = new packageRef.ComplexTypeAddress();
    billingAddress.setFirstName(orderRef.billingAddress.firstName);
    billingAddress.setLastName(orderRef.billingAddress.lastName);
    billingAddress.setAddress1(orderRef.billingAddress.address1);
    billingAddress.setAddress2(orderRef.billingAddress.address2);
    billingAddress.setCity(orderRef.billingAddress.city);
    billingAddress.setPostalCode(orderRef.billingAddress.postalCode);
    billingAddress.setPhone(orderRef.billingAddress.phone);
    billingAddress.setCountryCode(orderRef.billingAddress.countryCode);

    //set billing address
    customer.setBillingAddress(billingAddress);

    return customer;

    logger.info("OrderService generateCustomerInfo end --- ");
}

function generateStatusInfo(packageRef, orderRef) {
    logger.info("OrderService generateStatusInfo begin --- ");

    var orderStatusSet = new packageRef.ComplexTypeOrderStatusSet();
    orderStatusSet.setOrderStatus(packageRef.SimpleTypeOrderOrderStatus.NEW);
    orderStatusSet.setShippingStatus(packageRef.SimpleTypeOrderShippingStatus
        .NOT_SHIPPED);
    orderStatusSet.setConfirmationStatus(packageRef.SimpleTypeOrderConfirmationStatus
        .CONFIRMED);
    orderStatusSet.setPaymentStatus(packageRef.SimpleTypeOrderPaymentStatus
        .NOT_PAID);

    return orderStatusSet;

    logger.info("OrderService generateStatusInfo end --- ");
}

function generateLineItemInfo(packageRef, orderRef) {
    logger.info("OrderService generateLineItemInfo begin --- ");

    var productLineItems = new packageRef.ComplexTypeProductLineItems();

    var itemsItr = orderRef.productLineItems.iterator();

    while (itemsItr.hasNext()) {

        var lineItem = itemsItr.next();

        var productLineItem = new packageRef.ComplexTypeProductLineItem();
        productLineItem.setNetPrice(lineItem.netPrice.decimalValue);
        productLineItem.setTax(lineItem.tax.decimalValue);
        productLineItem.setGrossPrice(lineItem.grossPrice.decimalValue);
        productLineItem.setBasePrice(lineItem.basePrice.decimalValue);
        productLineItem.setLineitemText(lineItem.lineItemText);
        productLineItem.setTaxBasis(lineItem.taxBasis.decimalValue);
        productLineItem.setPosition(lineItem.position);
        productLineItem.setProductId(lineItem.productID);
        productLineItem.setProductName(lineItem.productName);
        productLineItem.setTaxRate(lineItem.taxRate);
        productLineItem.setShipmentId(lineItem.shipment.shipmentNo);
        productLineItem.setGift(lineItem.gift);
        productLineItem.setGiftMessage(lineItem.giftMessage);

        var quantity = new packageRef.ComplexTypeQuantity();
        quantity.setUnit(lineItem.quantity.unit);
        quantity.setValue(lineItem.quantity.value);

        //set quantity
        productLineItem.setQuantity(quantity);

        var itemCustomAttributes = new packageRef.SharedTypeCustomAttributes();

        if (lineItem.custom.productType == "DYO") {
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "displaySize", lineItem.custom.displayCustomSize));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "size", ''));//explicitely create empty size element 
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "dyoImageUrl", lineItem.custom.dyoImageUrl));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "metricID", lineItem.custom.metricID));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "styleSKU", lineItem.custom.styleSKU));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "productType", lineItem.custom.productType));
        } else {
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "altProductId", lineItem.custom.altProductId));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "displaySize", lineItem.custom.displayCustomSize));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "colorCode", lineItem.custom.colorCode));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "colorName", lineItem.custom.colorName));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "size", lineItem.custom.size));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "styleSKU", lineItem.custom.styleSKU));
            itemCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "productType", lineItem.custom.productType));
        }

        //set custom attributes
        productLineItem.setCustomAttributes(itemCustomAttributes);

        //set price adjustments
        if(lineItem.priceAdjustments.size() > 0){
            productLineItem.setPriceAdjustments(generateLineItemAdjustmentInfo(packageRef, lineItem.priceAdjustments));
        }

        //add line item to the list
        productLineItems.getProductLineitem().add(productLineItem);

    }

    logger.info("OrderService generateLineItemInfo end --- ");

    return productLineItems;
}

function generateLineItemAdjustmentInfo(packageRef, priceAdjustmentsRef) {
    logger.info("OrderService generateLineItemAdjustmentInfo begin --- ");

    var priceAdjustments = new packageRef.ComplexTypePriceAdjustments();

    var adjustmentItr = priceAdjustmentsRef.iterator();

    while (adjustmentItr.hasNext()) {

        var adjustment = adjustmentItr.next();

        var priceAdjustment = new packageRef.ComplexTypePriceAdjustment();
        priceAdjustment.setNetPrice(adjustment.netPrice.decimalValue);
        priceAdjustment.setTax(adjustment.tax.decimalValue);
        priceAdjustment.setGrossPrice(adjustment.grossPrice.decimalValue);
        priceAdjustment.setBasePrice(adjustment.basePrice.decimalValue);
        priceAdjustment.setLineitemText(empty(adjustment.lineItemText)? "" : adjustment.lineItemText.replace(/ /g, "_"));
        priceAdjustment.setTaxBasis(adjustment.taxBasis.decimalValue);
        
        priceAdjustment.setCampaignIdOrAbtest(adjustment.campaignID.replace(/ /g, "_"));
        
        var discount = adjustment.appliedDiscount;
        var discountText = "_";

		logger.info("OrderService discount type --- "+discount.type);
		if(discount.type == Discount.TYPE_PERCENTAGE || discount.type == Discount.TYPE_PERCENTAGE_OFF_OPTIONS){
			logger.info("OrderService discount percent --- "+discount.percentage);
			discountText = discountText+discount.percentage+"%";
		} else if (discount.type == Discount.TYPE_AMOUNT){
			logger.info("OrderService discount amount --- "+discount.amount);
			discountText = discountText+discount.amount;
		} else if (discount.type == Discount.TYPE_FREE_SHIPPING || discount.type == Discount.TYPE_FREE_SHIPPING){
			logger.info("OrderService discount free --- ");
			discountText = "";
		} else if (discount.type == Discount.TYPE_FIXED_PRICE_SHIPPING || discount.type == Discount.TYPE_FIXED_PRICE){
			logger.info("OrderService discount fixedPrice --- "+discount.fixedPrice);
			discountText = discountText+discount.fixedPrice;
		} 

		//set promotion id together with discount details
		priceAdjustment.setPromotionId(adjustment.promotionID.replace(/ /g, "_")+discountText);

        //add adjustment item to the list
        priceAdjustments.getPriceAdjustment().add(priceAdjustment);

    }

    logger.info("OrderService generateLineItemAdjustmentInfo end --- ");

    return priceAdjustments;

}

function generateShippingLineInfo(packageRef, orderRef) {
    logger.info("OrderService generateShippingLineInfo begin --- ");

    var shippingLineItems = new packageRef.ComplexTypeShippingLineItems();

    var shipmentsItr = orderRef.shipments.iterator();
    var shippingLinesList = new dw.util.ArrayList();

    while (shipmentsItr.hasNext()) {

        var shipmentRef = shipmentsItr.next();

        var shippingLineItr = shipmentRef.shippingLineItems.iterator();

        while (shippingLineItr.hasNext()) {
            var shippingLineItemRef = shippingLineItr.next();

            var shippingLineItem = new packageRef.ComplexTypeShippingLineItem();
            shippingLineItem.setNetPrice(shippingLineItemRef.netPrice.decimalValue);
            shippingLineItem.setTax(shippingLineItemRef.tax.decimalValue);
            shippingLineItem.setGrossPrice(shippingLineItemRef.grossPrice.decimalValue);
            shippingLineItem.setBasePrice(shippingLineItemRef.basePrice.decimalValue);
            shippingLineItem.setLineitemText(shippingLineItemRef.lineItemText);
            shippingLineItem.setTaxBasis(shippingLineItemRef.taxBasis.decimalValue);
            shippingLineItem.setItemId(shippingLineItemRef.ID);
            shippingLineItem.setShipmentId(shipmentRef.shipmentNo);
            shippingLineItem.setTaxRate(shippingLineItemRef.taxRate);

             //set price adjustments
            if(shippingLineItemRef.shippingPriceAdjustments.size() > 0){
                shippingLineItem.setPriceAdjustments(generateLineItemAdjustmentInfo(packageRef, shippingLineItemRef.shippingPriceAdjustments));
            }

            //add line item to the list
            shippingLineItems.getShippingLineitem().add(shippingLineItem);

        }

    }

    logger.info("OrderService generateShippingLineInfo end --- ");

    return shippingLineItems;

}

function generateShipmentInfo(packageRef, orderRef) {
    logger.info("OrderService generateShipmentInfo begin --- ");

    var shipments = new packageRef.ComplexTypeShipments();

    var shipmentsItr = orderRef.shipments.iterator();

    while (shipmentsItr.hasNext()) {

        var shipmentRef = shipmentsItr.next();

        var shipment = new packageRef.ComplexTypeShipment();
        shipment.setShipmentId(shipmentRef.shipmentNo);

        if (shipmentRef.custom.pickupPointCarrier === 'Kiala' || shipmentRef.custom.pickupPointCarrier === 'Hermes') {
            shipment.setShippingMethod(shipmentRef.custom.pickupPointCarrier);
        } else if(shipmentRef.custom.pickupPointCarrier === 'ups'){
        	shipment.setShippingMethod('ups_deliverypoint');
        } else {
            shipment.setShippingMethod(shipmentRef.shippingMethod.custom.arvatoShippingMethodID);
        }
        shipment.setGift(shipmentRef.gift);
        //set gift message only on inline product shipments: ARVATO isn't loving it on DYO
        if (shipmentRef.gift && !OrderUtils.isDYOShipment(shipmentRef)) {
            shipment.setGiftMessage(shipmentRef.giftMessage);
        }

        //populate shipping address
        var shippingAddress = new packageRef.ComplexTypeAddress();
        shippingAddress.setFirstName(shipmentRef.shippingAddress.firstName);
        shippingAddress.setLastName(shipmentRef.shippingAddress.lastName);
        shippingAddress.setAddress1(shipmentRef.shippingAddress.address1);

        if(shipmentRef.custom.pickupPointName && shipmentRef.custom.pickupPointCarrier === 'PostNL') {
            shippingAddress.setAddress2(shipmentRef.custom.pickupPointName);
        } else {
            shippingAddress.setAddress2(shipmentRef.shippingAddress.address2);
        }

        shippingAddress.setCity(shipmentRef.shippingAddress.city);
        shippingAddress.setPostalCode(shipmentRef.shippingAddress.postalCode);
        shippingAddress.setPhone(shipmentRef.shippingAddress.phone);
        shippingAddress.setCountryCode(shipmentRef.shippingAddress.countryCode);
        
        var shippingCustomAttributes = new packageRef.SharedTypeCustomAttributes();

        if(shipmentRef.custom.pickupPointCarrier) {
            shippingCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "carrierID", shipmentRef.custom.pickupPointCarrier));
        } else {
            shippingCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "carrierID", shipmentRef.shippingMethod.custom.carrierID));
        }

        if(shipmentRef.custom.carrierStationNo) {
    		shippingCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "carrierStationNo", shipmentRef.custom.carrierStationNo));
        }
    	
    	shippingAddress.setCustomAttributes(shippingCustomAttributes);
    	
        //set shipping address to shipment
        shipment.setShippingAddress(shippingAddress);

        var shipmentShippingStatusSet = new packageRef.ComplexTypeShipmentStatusSet();
        shipmentShippingStatusSet.setShippingStatus(packageRef.SimpleTypeShipmentShippingStatus
            .NOT_SHIPPED);

        //set shipment status
        shipment.setStatus(shipmentShippingStatusSet);

        var shipmentCustomAttributes = new packageRef.SharedTypeCustomAttributes();
        shipmentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "productType", shipmentRef.custom.productType));
        

        //set custom attributes
        shipment.setCustomAttributes(shipmentCustomAttributes);

        var totals = new packageRef.ComplexTypeShipmentTotals();

        totals.setMerchandizeTotal(getTotalObject(packageRef, shipmentRef.merchandizeTotalNetPrice,
            shipmentRef.merchandizeTotalTax, shipmentRef.merchandizeTotalGrossPrice));

        totals.setAdjustedMerchandizeTotal(getTotalObject(packageRef, shipmentRef.adjustedMerchandizeTotalNetPrice,
            shipmentRef.adjustedMerchandizeTotalTax, shipmentRef.adjustedMerchandizeTotalGrossPrice));

        totals.setShippingTotal(getTotalObject(packageRef, shipmentRef.shippingTotalNetPrice,
            shipmentRef.shippingTotalTax, shipmentRef.shippingTotalGrossPrice));

        totals.setAdjustedShippingTotal(getTotalObject(packageRef, shipmentRef.adjustedShippingTotalNetPrice,
            shipmentRef.adjustedShippingTotalTax, shipmentRef.adjustedShippingTotalGrossPrice));

        totals.setShipmentTotal(getTotalObject(packageRef, shipmentRef.totalNetPrice, shipmentRef.totalTax, shipmentRef
            .totalGrossPrice));

        //set totals
        shipment.setTotals(totals);

        shipments.getShipment().add(shipment);

    }

    logger.info("OrderService generateShipmentInfo end --- ");

    return shipments;

}

function getTotalObject(packageRef, netPrice, tax, grossPrice, priceAdjustments) {

    var total = new packageRef.ComplexTypeTotal();
    total.setNetPrice(netPrice.decimalValue);
    total.setTax(tax.decimalValue);
    total.setGrossPrice(grossPrice.decimalValue);

    if(priceAdjustments && priceAdjustments.size() > 0){
        total.setPriceAdjustments(generateLineItemAdjustmentInfo(packageRef, priceAdjustments));
    }

    return total;
}

function generatePaymentInfo(packageRef, orderRef) {
    logger.info("OrderService generatePaymentInfo begin --- ");

    var payments = new packageRef.ComplexTypePayments();

    var payIns = orderRef.getPaymentInstruments();

    if (payIns != null) {
        var paymentsItr = payIns.iterator();

        while (paymentsItr.hasNext()) {

            var paymentRef = paymentsItr.next();

            if(paymentRef.paymentMethod == converse.constants.PaymentMethodId.CreditCard){

                payments.getPayment().add(generateCCInfo(packageRef, orderRef, paymentRef));
            
            } else if(paymentRef.paymentMethod == converse.constants.PaymentMethodId.Invoice){

                payments.getPayment().add(generateInvoiceInfo(packageRef, orderRef));

            } else if(paymentRef.paymentMethod == converse.constants.PaymentMethodId.PayPal) {

                payments.getPayment().add(generateRedirectPaymentInfo(packageRef, orderRef, paymentRef, "PAYPAL"));

            }  else if(paymentRef.paymentMethod == converse.constants.PaymentMethodId.IDeal) {

                payments.getPayment().add(generateRedirectPaymentInfo(packageRef, orderRef, paymentRef, "IDEAL"));

            }  else if(paymentRef.paymentMethod == converse.constants.PaymentMethodId.Sofort) {

                payments.getPayment().add(generateRedirectPaymentInfo(packageRef, orderRef, paymentRef, "ONLINE_TRANSFER"));

            }          

        }
    }

    logger.info("OrderService generatePaymentInfo end --- ");

    return payments;

}


function generateCCInfo(packageRef, orderRef, paymentRef) {
    logger.info("OrderService generateCCInfo begin --- ");

    var payment = new packageRef.ComplexTypePayment();
    payment.setAmount(orderRef.totalGrossPrice.decimalValue);
    //payment.setProcessorId(paymentRef.paymentTransaction.paymentProcessor.ID);
    payment.setProcessorId("PAYNEXT");
    payment.setTransactionId(paymentRef.paymentTransaction.transactionID);

    var creditCard = new packageRef.ComplexTypeCreditCard();
    creditCard.setCardType(paymentRef.creditCardType);
    creditCard.setCardNumber(paymentRef.creditCardNumber);
    creditCard.setCardHolder(orderRef.billingAddress.firstName+" "+orderRef.billingAddress.lastName);
    creditCard.setExpirationMonth(paymentRef.creditCardExpirationMonth);
    creditCard.setExpirationYear(paymentRef.creditCardExpirationYear);

    var paymentCustomAttributes = new packageRef.SharedTypeCustomAttributes();
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentMerchantID", paymentRef.custom
        .paymentMerchantID));
    if(paymentRef.creditCardType == converse.constants.CreditCardType.VisaDebit){
    	paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "isDebitCard", "true"));
    } else{
    	paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "isDebitCard", "false"));
    }	    
    
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentResponseMsg", paymentRef.custom
        .paymentResponseMsg));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentStatusCode", paymentRef.custom
        .paymentStatusCode));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentTransactionType","authorization"));

    creditCard.setCustomAttributes(paymentCustomAttributes);

    payment.setCreditCardOrBankTransferOrBml(creditCard);

    logger.info("OrderService generateCCInfo end --- ");

    return payment;

}

function generateInvoiceInfo(packageRef, orderRef) {
    logger.info("OrderService generateInvoiceInfo begin --- ");

    var payment = new packageRef.ComplexTypePayment();
    payment.setAmount(orderRef.totalGrossPrice.decimalValue);
    payment.setProcessorId("ARVATO");
    //no transaction-id for invoice, send orderNo
    payment.setTransactionId(orderRef.orderNo);

    var customCard = new packageRef.ComplexTypeCustomPaymentMethod();
    customCard.setMethodName("INVOICE");

    payment.setCreditCardOrBankTransferOrBml(customCard);

    logger.info("OrderService generateInvoiceInfo end --- ");

    return payment;

}

function generateRedirectPaymentInfo(packageRef, orderRef, paymentRef, paymentMethodName) {
    logger.info("OrderService generateRedirectPaymentInfo begin --- ");

    var payment = new packageRef.ComplexTypePayment();
    payment.setAmount(orderRef.totalGrossPrice.decimalValue);
    payment.setProcessorId("PAYNEXT");
    //no transaction-id for invoice, send orderNo
    payment.setTransactionId(paymentRef.paymentTransaction.transactionID);

    var customCard = new packageRef.ComplexTypeCustomPaymentMethod();
    customCard.setMethodName(paymentMethodName);

    var paymentCustomAttributes = new packageRef.SharedTypeCustomAttributes();
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentMerchantID", paymentRef.custom.paymentMerchantID));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentRequestID", paymentRef.custom.paymentRequestID));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentResponseMsg", paymentRef.custom.paymentResponseMsg));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentStatusCode", paymentRef.custom.paymentStatusCode));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentTransactionState", paymentRef.custom.paymentTransactionState));
    paymentCustomAttributes.getCustomAttribute().add(getAttrRef(packageRef, "paymentTransactionType", "debit"));     
    customCard.setCustomAttributes(paymentCustomAttributes);

    payment.setCreditCardOrBankTransferOrBml(customCard);

    logger.info("OrderService generateRedirectPaymentInfo end --- ");

    return payment;

}


function generateOrderTotals(packageRef, orderRef) {
    logger.info("OrderService generateOrderTotals begin --- ");

    var totals = new packageRef.ComplexTypeOrderTotals();

    totals.setMerchandizeTotal(getTotalObject(packageRef, orderRef.merchandizeTotalNetPrice, orderRef.merchandizeTotalTax,
        orderRef.merchandizeTotalGrossPrice, orderRef.priceAdjustments));

    totals.setAdjustedMerchandizeTotal(getTotalObject(packageRef, orderRef.adjustedMerchandizeTotalNetPrice,
        orderRef.adjustedMerchandizeTotalTax, orderRef.adjustedMerchandizeTotalGrossPrice));

    totals.setShippingTotal(getTotalObject(packageRef, orderRef.shippingTotalNetPrice, orderRef.shippingTotalTax,
        orderRef.shippingTotalGrossPrice, orderRef.shippingPriceAdjustments));

    totals.setAdjustedShippingTotal(getTotalObject(packageRef, orderRef.adjustedShippingTotalNetPrice,
        orderRef.adjustedShippingTotalTax, orderRef.adjustedShippingTotalGrossPrice));

    totals.setOrderTotal(getTotalObject(packageRef, orderRef.totalNetPrice, orderRef.totalTax,
        orderRef.totalGrossPrice));

    logger.info("OrderService generateOrderTotals end --- ");

    return totals;

}