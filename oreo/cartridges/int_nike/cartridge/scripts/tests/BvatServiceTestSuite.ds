/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_nike:bvat/BvatService.ds");
importScript("int_nike:bvat/command/VerifyEmployeeCommand.ds");
importScript("int_nike:bvat/command/IsAccessibleCommand.ds");
importScript("int_nike:bvat/objects/VerificationRequest.ds");
importScript("int_nike:bvat/objects/VerificationResponse.ds");
importScript("int_nike:bvat/objects/IsAccessibleResponse.ds");

function execute(args : PipelineDictionary) : Number {
    var BVAT = integration.nike.bvat,
        BVAT_CMD = BVAT.command,
        BVAT_OBJ = BVAT.objects;

    var VERIFY_EMPLOYEE_SUCCESS_RESPONSE : String = "<verificationService><id>4002227</id><status>success</status></verificationService>",
        VERIFY_EMPLOYEE_FAILURE_RESPONSE : String = "<verificationService><id></id><status>failure</status></verificationService>";

    var IS_ACCESSIBLE_SUCCESS_RESPONSE : String = "<verificationService><isAccessible>true</isAccessible><status>success</status></verificationService>",
        IS_ACCESSIBLE_FAILURE_RESPONSE : String =
            "<verificationService>" +
            "   <isAccessible>false</isAccessible>" +
            "   <exceptions>" +
            "       <error>" +
            "           <property/>" +
            "           <errorcode>notAccessible</errorcode>" +
            "           <message>Error checking access</message>" +
            "       </error>" +
            "       <error/>" +
            "   </exceptions>" +
            "   <status>failure</status>" +
            "</verificationService>";

     var SERVICE_UNAVAILABLE_RESPONSE : String =
            "<verificationService>" +
            "    <exceptions>" +
            "        <error>" +
            "            <property></property>" +
            "            <errorcode>notAccessible</errorcode>" +
            "            <message>Verification service unavailable</message>" +
            "        </error>" +
            "        <error></error>" +
            "    </exceptions>" +
            "    <status>failure</status>" +
            "</verificationService>";

    var getBvatServiceMock = function() {
        var ServiceMock = BVAT.BvatService.extend({
            initConfiguration: function() {
                return {};
            }
        });

        return new ServiceMock();
    };

    var getBvatCommandMock = function(type, executeFunc) {
        var CommandMock = type.extend({
            execute: function(request) {
                return executeFunc.call(this, request);
            }
        });

        return CommandMock;
    };

    var getVerifyEmployeeCommandMock = function(verificationRequest, executeFunc) {
        var CommandMock = getBvatCommandMock(BVAT_CMD.VerifyEmployeeCommand, executeFunc);
        return new CommandMock(verificationRequest);
    };

    var getIsAccessibleCommandMock = function(bvatID, executeFunc) {
        var CommandMock = getBvatCommandMock(BVAT_CMD.IsAccessibleCommand, executeFunc);
        return new CommandMock(bvatID);
    };

    var executeCommand = function(command) : Status {
        let service = getBvatServiceMock();
        return service.call(command);
    };

    var assertStatusOK = function(status : Status) {
        Assert.isNotNull(status, "status");
        Assert.areEqual(Status.OK, status.getStatus());
    };

    var assertSuccess = function(response) {
        Assert.isTrue(response.isSuccess());
        Assert.isTrue(!response.isFailure());
        Assert.areEqual(response.status, "success");
    };

    var assertFailure = function(response) {
        Assert.isTrue(response.isFailure());
        Assert.isTrue(!response.isSuccess());
        Assert.areEqual(response.status, "failure");
    };

    args.Unit.describe("Nike's BvatService Test Suite")
        .test("VerifyEmployee failure response test", function () {

            let verificationRequest = new BVAT_OBJ.VerificationRequest("123456789", "First", "Last", "10016", "5555");
            let command = getVerifyEmployeeCommandMock(verificationRequest, function(request){
                return VERIFY_EMPLOYEE_FAILURE_RESPONSE;
            });

            let status = executeCommand(command);

            let verificationResponse = new BVAT_OBJ.VerificationResponse(command.response);

            assertStatusOK(status);
            assertFailure(verificationResponse);
            Assert.isTrue(empty(verificationResponse.getBvatID()));
            Assert.isFalse(verificationResponse.isServiceUnavailable());
        })
        .test("VerifyEmployee success response test", function () {

            let verificationRequest = new BVAT_OBJ.VerificationRequest("123456789", "First", "Last", "10016", "5555");
            let command = getVerifyEmployeeCommandMock(verificationRequest, function(request){
                return VERIFY_EMPLOYEE_SUCCESS_RESPONSE;
            });

            let status = executeCommand(command);

            let verificationResponse = new BVAT_OBJ.VerificationResponse(command.response);

            assertStatusOK(status);
            assertSuccess(verificationResponse);
            Assert.areEqual("4002227", verificationResponse.getBvatID());
            Assert.isFalse(verificationResponse.isServiceUnavailable());
        })
        .test("IsAccessible failure response test", function () {

            let command = getIsAccessibleCommandMock("123456789", function(request){
                return IS_ACCESSIBLE_FAILURE_RESPONSE;
            });

            let status = executeCommand(command);

            let isAccessibleResponse = new BVAT_OBJ.IsAccessibleResponse(command.response);

            assertStatusOK(status);
            assertFailure(isAccessibleResponse);
            Assert.isFalse(isAccessibleResponse.getIsAccessible());
            Assert.isFalse(empty(isAccessibleResponse.getExceptions()));
            Assert.isFalse(isAccessibleResponse.isServiceUnavailable());
        })
        .test("IsAccessible success response test", function () {

            let command = getIsAccessibleCommandMock("123456789", function(request){
                return IS_ACCESSIBLE_SUCCESS_RESPONSE;
            });

            let status = executeCommand(command);

            let isAccessibleResponse = new BVAT_OBJ.IsAccessibleResponse(command.response);

            assertStatusOK(status);
            assertSuccess(isAccessibleResponse);
            Assert.isTrue(isAccessibleResponse.getIsAccessible());
            Assert.isTrue(empty(isAccessibleResponse.getExceptions()));
            Assert.isFalse(isAccessibleResponse.isServiceUnavailable());
        })
        .test("Service unavailable test", function () {

            var assertServiceUnavailable = function(command, ResponseType) {
                let status = executeCommand(command);
                let commandResponse = new ResponseType(command.response);

                assertStatusOK(status);
                assertFailure(commandResponse);
                Assert.isFalse(empty(commandResponse.getExceptions()));
                Assert.isTrue(commandResponse.isServiceUnavailable());
            };

            let verifyRequest = new BVAT_OBJ.VerificationRequest("123456789", "First", "Last", "10016", "5555");
            let verifyCommand = getVerifyEmployeeCommandMock(verifyRequest, function(request){
                return SERVICE_UNAVAILABLE_RESPONSE;
            });

            assertServiceUnavailable(verifyCommand, BVAT_OBJ.VerificationResponse);


            let isAccessbileCommand = getIsAccessibleCommandMock("123456789", function(request){
                return SERVICE_UNAVAILABLE_RESPONSE;
            });

            assertServiceUnavailable(isAccessbileCommand, BVAT_OBJ.IsAccessibleResponse);
        })
        .test("Exceptions to String with exceptions in response test", function () {

            var bvatResponse = new BVAT_OBJ.AbstractBvatResponse(SERVICE_UNAVAILABLE_RESPONSE);

            Assert.isFalse(empty(bvatResponse.getExceptions()));
            Assert.areEqual('{"property":"","errorCode":"notAccessible","message":"Verification service unavailable"}', bvatResponse.getExceptionsAsString());
        })
        .test("Exceptions to String without exceptions in response test", function () {

            var bvatResponse = new BVAT_OBJ.AbstractBvatResponse("");

            Assert.isTrue(empty(bvatResponse.getExceptions()));
            Assert.areEqual("", bvatResponse.getExceptionsAsString());
        });

    return PIPELET_NEXT;
};
