/**
 * @input Unit: Object
 */
 

importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Unit.ds"); 
importScript("module_test:Framework/Assert.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:util/ViewHelpers.ds");
importScript("converse_webservices:service/ServiceConfigurationFactory.ds");
importScript("int_nike:customization/objects/BuildsRequest.ds");
importScript("int_nike:customization/objects/NikeBuild.ds");
importScript("int_nike:customization/utils/BuildsResponseParser.ds");
importScript("int_nike:NikeConstants.ds");

function execute(args: PipelineDictionary) : Number {
    let NIKE = integration.nike.customization;
    let NIKE_UTILS = NIKE.utils;
    let CONST = integration.nike.constants;
    let getServiceConfigurationOriginal = converse.webservices.ServiceConfigurationFactory.getServiceConfiguration;
    
    
    let assertRequestXML = function(xmlString) {
        let request : XML = new XML(xmlString);
        Assert.areEqual("root", request.name());
        Assert.areEqual(METRICIDS.join(""), request.metricId.text().toXMLString().replace(/\s/g, ""));
    };

    let setupConfiguration = function() {
        converse.webservices.ServiceConfigurationFactory.getServiceConfiguration = function(serviceName : String) {
            var result = new HashMap();

            result.put("nikeidDomain", "test");
            result.put("lockerItemImageUri", "mtr-{0}/wid-{1}");

            return result;
        }
    }
    
    let teardownConfiguration = function() {
    	converse.webservices.ServiceConfigurationFactory.getServiceConfiguration = getServiceConfigurationOriginal;
    };
    
    let METRICIDS = ["123", "125", "127"];
    
    args.Unit.describe("NikeBuilder Suite")
        .test("BuildsRequest correctly builds parameters", function () {
            let buildsRequest = new NIKE.BuildsRequest(METRICIDS);
            
            let parametersMap = buildsRequest.getParameters();
            
            Assert.isTrue(!empty(parametersMap.xml), "parameters map should contain one parameter named 'xml'");
            assertRequestXML(parametersMap.xml);
        })
        .test("NikeBuild correctly parses the Nike build XML", function () {
            let metricId = 123;
            let country_gender = "us-womens";
            let size = "3";
            let nikeSize = "6";
            let quantity = 1;
            let sku = "M9160";
            let nikeProductId = "chx90001";
            let personalization = "AWESOME";

            let buildXML : XML =
            <build>
                <metricId>{metricId}</metricId>
                <countryCode>gb</countryCode>
                <languageCode>en</languageCode>
                <styleCode>{sku}</styleCode>
                <path>{nikeProductId}</path>
                <s7Images>
                    <viewNumber>1</viewNumber>
                    <url>
                        <![CDATA[dyo_image_url]]>
                    </url>
                </s7Images>
                <size>
                    <sizeType>uk</sizeType>
                    <sizeChart>converse_footwear_chuck_taylor</sizeChart>
                    <size>{size}</size>
                    <skuSize>{nikeSize}</skuSize>
                    <quantity>{quantity}</quantity>
                </size>
                <question>
                    <questionType>iD</questionType>
                    <answer>{personalization}</answer>
                </question>
            </build>;
            
            setupConfiguration();

            let build = new NIKE.NikeBuild(buildXML);
            
            Assert.isTrue(build.getStatus().valid);
            Assert.areEqual(metricId, build.metricId, "metricId doesn't match");
            if (isSite('US')) {
                Assert.areEqual(nikeSize, build.size, "size doesn't match on US site");
            } else {
                Assert.areEqual(size, build.size, "size doesn't match on an EMEA site");
            }
            Assert.areEqual(quantity, build.quantity, "quantity doesn't match");
            Assert.areEqual(sku, build.sku, "sku doesn't match");
            Assert.areEqual(nikeProductId, build.nikeProductId, "nikeProductId doesn't match");
            Assert.areEqual(personalization, build.personalization, "personalization doesn't match");
        
            teardownConfiguration();
        })
        .test("Personalization defaults to an empty string when receiving integration.nike.constants.DefaultPersonalization as value", function () {
            let buildXML : XML =
            <build>
                <metricId>123</metricId>
                <question>
                    <questionType>iD</questionType>
                    <answer>{CONST.DefaultPersonalization}</answer>
                </question>
            </build>;
            
            setupConfiguration();

            let build = new NIKE.NikeBuild(buildXML);
            
            Assert.areEqual("", build.personalization, "personalization field should be empty when a default value is received from Nike");
        })
        .test("The response XML received from Nike is correctly parsed into NikeBuild objects", function () {
            let metricId1 = 123;
            let metricId2 = 125;
            let metricId3 = 127;
            
            let partialResultsXML : XML = 
            <results> 
                <build>
                    <metricId>{metricId2}</metricId>
	                <styleCode>SKU</styleCode>
	                <path>chx90001</path>
	                <s7Images>
	                    <viewNumber>1</viewNumber>
	                    <url>
	                        <![CDATA[dyo_image_url]]>
	                    </url>
	                </s7Images>
	                <size>
	                    <sizeType>uk</sizeType>
	                    <size>3</size>
	                    <skuSize>3</skuSize>
	                    <quantity>1</quantity>
	                </size>
	                <question>
	                    <questionType>iD</questionType>
	                    <answer>MYSHOE</answer>
	                </question>
                </build>
                <build>
                    <metricId>{metricId3}</metricId>
                </build>
            </results>;
            
            setupConfiguration();

            let nikeBuilds : Array = NIKE_UTILS.BuildsResponseParser.parse([ metricId1, metricId2, metricId3 ], partialResultsXML);
            
            Assert.areEqual(3, nikeBuilds.length, "three NikeBuild instances expected as parsing result, even if only two of them were actually received from Nike");
            
            Assert.isTrue(nikeBuilds[0] instanceof NIKE.MissingNikeBuild, "MissingNikeBuild instance should be returned if the build element for a particular metricId was not found in the XML result");
            Assert.isFalse(nikeBuilds[0].getStatus().valid, "MissingNikeBuild instance should return a status with 'valid' field set to false");
            
            Assert.isTrue(nikeBuilds[1] instanceof NIKE.NikeBuild, "NikeBuild instance should be returned when all data for the build are available");
            Assert.isTrue(nikeBuilds[1].getStatus().valid, "Complete NikeBuild instance should return a status with 'valid' field set to true");
            
            Assert.isTrue(nikeBuilds[2] instanceof NIKE.NikeBuild, "NikeBuild instance should be returned even when not all data for the build are available");
            Assert.isFalse(nikeBuilds[2].getStatus().valid, "Partial NikeBuild instance should return a status with 'valid' field set to false");
        
            teardownConfiguration();
        })
        .test("Verify the URL for the DYO image is XML decoded and sizing is applied before assigning to NikeBuild dyoImageUrl", function () {
            let buildXML : XML = <build>
                <metricId>12345</metricId>
                <s7Images>
                    <viewNumber>1</viewNumber>
                    <url>
                        <![CDATA[http://test]]>
                    </url>
                </s7Images>
            </build>;

            let build = new NIKE.NikeBuild(buildXML);
            Assert.isNotEmpty(build.dyoImageUrl, "dyoImageUrl", "DYO Image URL should not be empty");
            let isUrlWellFormed = build.dyoImageUrl.indexOf("/services/imgredirect/fmt-png-alpha/bgc-na/mtr-12345/wid-138/ops-1.9,0.8,0/vw-1") !== -1;
            Assert.isTrue( isUrlWellFormed );
        });

    return PIPELET_NEXT;
};