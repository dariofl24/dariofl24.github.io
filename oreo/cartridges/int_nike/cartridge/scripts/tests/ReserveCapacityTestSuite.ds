/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");

importScript("int_nike:tests/ReserveCapacityTestConstants.ds");
importScript("int_nike:reservecapacity/ReserveCapacityService.ds");
importScript("int_nike:reservecapacity/command/Reserve.ds");
importScript("int_nike:reservecapacity/objects/RequestGenerator.ds");

function execute(args : PipelineDictionary) : Number {

    let CART_OBJ = cart.objects,
        CONSTANTS = converse.constants,
        NIKE = integration.nike.reservecapacity,
        ReserveCapacityService = NIKE.ReserveCapacityService,
        Reserve = NIKE.command.Reserve,
        RequestGenerator = NIKE.RequestGenerator,
        ResponseHandler = NIKE.ResponseHandler;

    let TestConstants = NIKE.tests.Constants;

    let getRequestGenerator = function() {
        return new RequestGenerator(4);
    };

    let getValidItemSummary = function() : Object {
        return getItemSummary('107883F');
    };

    let getItemSummary = function(sku : String ) : Object {
        let itemSummary = new CART_OBJ.ItemSummary();
        itemSummary.setProductType(CONSTANTS.ProductType.C1);
        itemSummary.setSize('9');
        itemSummary.setSku(sku);
        itemSummary.setQuantity(1);
        itemSummary.setMetricID(TestConstants.METRIC_ID);
        return itemSummary;
    };

    let getC1ShipmentSummary = function(itemSummary : Object) {
        let c1ShipmentSummary = new CART_OBJ.ShipmentSummary();
        c1ShipmentSummary.addItemSummary(itemSummary);
        c1ShipmentSummary.setProductType(CONSTANTS.ProductType.C1);
        return c1ShipmentSummary;
    };

    let getBasketSummary = function(c1ShipmentSummary : Object) : Object {
        let basketSummary = new CART_OBJ.BasketSummary();
        basketSummary.addShipmentSummary(c1ShipmentSummary);
        return basketSummary;
    };

    let initBasket = function() {
        return getBasketSummary(getC1ShipmentSummary(getValidItemSummary()));
    };

    let initRequestGenerator = function() {
        let reqGen = getRequestGenerator();

        let c1ShipmentSummary = initBasket().getC1ShipmentSummary();
        let nbr : Number = 1;
        for each (let itemSummary in c1ShipmentSummary.getItemSummaryList()) {
            reqGen.initDoms(itemSummary, nbr);
            nbr++;
        }

        return reqGen;
    };

    let initReserve = function() {
        let c1ShipmentSummary = initBasket().getC1ShipmentSummary();
        let reserve = new Reserve(c1ShipmentSummary);
        reserve.configuration = { expirationDays: 3 };
        return reserve;
    };

    let assertDomsWithQuantity = function(doms : Map) {
        for (let it = doms.keySet().iterator(); it.hasNext(); ) {
            let itemDoms = doms.get(it.next());
            Assert.isGreaterThan(0, itemDoms.getReservedQty());
            Assert.isNotNull(itemDoms.getRequiredDeliveryDate());
        }
    };

    let assertDomsWithoutQuantity = function(doms : Map) {
        for (let it = doms.keySet().iterator(); it.hasNext(); ) {
            let itemDoms = doms.get(it.next());
            Assert.areEqual(0, itemDoms.getReservedQty());
            Assert.isNull(itemDoms.getRequiredDeliveryDate());
        }
    };

    args.Unit.describe("Nike's Reserve Capacity Test Suite")
        .test("RequestGenerator.getItemId", function () { 
            let reqGen = getRequestGenerator();
            let itemSummary = getValidItemSummary();

            Assert.areEqual("107883F-001-9", reqGen.getItemId(itemSummary));
        })
        .test("RequestGenerator.getReservationId", function () {
            let reqGen = getRequestGenerator();
            let itemSummary = getValidItemSummary();

            Assert.areEqual("617518136_1", reqGen.getReservationId(itemSummary.getMetricID(), 1));
        })
        .test("RequestGenerator.expires", function () {
            let reqGen = getRequestGenerator();

            let target : Date = new Date();
            target.setDate(target.getDate() + 4);

            Assert.areEqual((target.getTime()/1000).toFixed(), (reqGen.getExpires().getTime()/1000).toFixed());
        })
        .test("RequestGenerator.promiseXml", function () {
            let reqGen = getRequestGenerator();
            let promiseXml : XML = reqGen.getPromiseXml();

            Assert.areEqual('RESERVE', promiseXml.attribute('Action').toString());
        })
        .test("RequestGenerator.promiseLine", function () {
            let itemSummary = getValidItemSummary();

            let reqGen = getRequestGenerator();
            reqGen.initDoms(itemSummary, 1);

            let lineXml : XML = reqGen.getPromiseLineXml(itemSummary);

            Assert.areEqual(TestConstants.PROMISE_LINE, lineXml);
        })
        .test("RequestGenerator.promiseLines", function () {
            let c1ShipmentSummary = initBasket().getC1ShipmentSummary();
            for (let i : Number = 0; i < 99 ; i ++) {
                c1ShipmentSummary.addItemSummary(getValidItemSummary());
            };

            let reqGen = getRequestGenerator();
            let promiseXml : XML = reqGen.getPromiseXml();
            reqGen.addPromiseLines(promiseXml, c1ShipmentSummary);

            let promiseLinesChildren : XML = promiseXml.PromiseLines.children();

            Assert.areEqual(100, promiseLinesChildren.length());

            let nbr : Number = 1;
            for each (let line : XML in promiseLinesChildren) {
                Assert.areEqual("617518136_" + nbr, line.child('ReservationParameters').attribute('ReservationID').toString());
                nbr++;
            }
        })
        .test("RequestGenerator.getDoms", function () {
            let c1ShipmentSummary = initBasket().getC1ShipmentSummary();
            let reqGen = getRequestGenerator();
            let req : String = reqGen.getRequest(c1ShipmentSummary);
            let doms : Map = reqGen.getDoms();

            Assert.areEqual(TestConstants.METRIC_ID, doms.get(TestConstants.METRIC_ID).getMetricId() );
        })
        .test("ResponseHandler.getReservationId", function () {
            let reqGen = initRequestGenerator();
            let respHndlr = new ResponseHandler(reqGen.getDoms());

            for each (let line : XML in TestConstants.DOMS_RESPONSE_HAS_QTY.PromiseLines.children()) {
                Assert.areEqual('617518136_1', respHndlr.getReservationId(line));
            }
        })
        .test("ResponseHandler.getMetricId", function () {
            let reqGen = initRequestGenerator();
            let respHndlr = new ResponseHandler(reqGen.getDoms());

            for each (let line : XML in TestConstants.DOMS_RESPONSE_HAS_QTY.PromiseLines.children()) {
                Assert.areEqual(TestConstants.METRIC_ID, respHndlr.getMetricId(line));
            }
        })
        .test("ResponseHandler.getResponse with quantity", function () {
            let reqGen = initRequestGenerator();
            let respHndlr = new ResponseHandler(reqGen.getDoms());
            respHndlr.getResponse(TestConstants.DOMS_RESPONSE_HAS_QTY);

            let doms : Map = reqGen.getDoms();

            assertDomsWithQuantity(doms);
        })
        .test("ResponseHandler.getResponse without quantity", function () {
            let reqGen = initRequestGenerator();
            let respHndlr = new ResponseHandler(reqGen.getDoms());
            respHndlr.getResponse(TestConstants.DOMS_RESPONSE_NO_QTY);

            let doms : Map = reqGen.getDoms();

            assertDomsWithoutQuantity(doms);
        })
        .test("Reserve.createRequest", function () {
            let reserve = initReserve();
            let request = reserve.createRequest();

            Assert.isNotNull(request);
        })
        .test("Reserve.handleResponse with quantity", function () {
            let reserve = initReserve();
            reserve.createRequest();
            reserve.handleResponse(TestConstants.DOMS_RESPONSE_HAS_QTY);

            let doms : Map = reserve.getDoms();

            assertDomsWithQuantity(doms);
        })
        .test("Reserve.handleResponse without quantity", function () {
            let reserve = initReserve();
            reserve.createRequest();
            reserve.handleResponse(TestConstants.DOMS_RESPONSE_NO_QTY);

            let doms : Map = reserve.getDoms();

            assertDomsWithoutQuantity(doms);
        });

    return PIPELET_NEXT;
};
