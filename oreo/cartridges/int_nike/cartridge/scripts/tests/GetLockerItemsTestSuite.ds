/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_webservices:service/ServiceConfigurationFactory.ds");
importScript("int_nike:customization/objects/GetLockerItemsRequest.ds");
importScript("int_nike:customization/objects/LockerItem.ds");
importScript("int_nike:customization/utils/LockerItemsResponseParser.ds");
importScript("int_nike:NikeConstants.ds");

function execute(args : PipelineDictionary) : Number {
    let NIKE = integration.nike.customization;
    let NIKE_UTILS = NIKE.utils;
    let CONST = integration.nike.constants;
    let getServiceConfigurationOriginal = converse.webservices.ServiceConfigurationFactory.getServiceConfiguration;
   
    let setupConfiguration = function() {
        converse.webservices.ServiceConfigurationFactory.getServiceConfiguration = function(serviceName : String) {
            var result = new HashMap();

            result.put("nikeidDomain", "test.com");
            result.put("lockerItemImageUri", "/mtr-{0}/wid-{1}");

            return result;
        }
    };
    
    let teardownConfiguration = function() {
    	converse.webservices.ServiceConfigurationFactory.getServiceConfiguration = getServiceConfigurationOriginal;
    };

    let assertLockerItem = function(lockerItem, id, metricId, productId, productName, name) {
        Assert.areEqual(id, lockerItem.id);
        Assert.areEqual(metricId, lockerItem.metricId);
        Assert.areEqual(productId, lockerItem.productId);
        Assert.areEqual(productName, lockerItem.productName);
        Assert.areEqual(name, lockerItem.name);
    }

    args.Unit.describe("Nike's get_items_in_locker service Test Suite")
        .test("GetLockerItemsRequest correctly builds parameters", function () {
            let request = new NIKE.GetLockerItemsRequest("test@test.com");
            let parametersMap = request.getParameters();

            Assert.areEqual("test@test.com", parametersMap.user_id);
            Assert.areEqual(CONST.Channel, parametersMap.channel);
            Assert.areEqual(CONST.LanguageCode, parametersMap.language);
        })
        .test("LockerItem correctly parses the locker item XML", function () {
            let xml : XML = <lockerItem id="111" metricsId="222">
                                <productName>
                                    <![CDATA[product]]>
                                </productName>
                                <name>
                                    <![CDATA[name]]>
                                </name>
                                <url>
                                    <![CDATA[?pid=333&metricsId=222]]>
                                </url>
                            </lockerItem>;

            setupConfiguration();

            let lockerItem = new NIKE.LockerItem(xml);

            Assert.areEqual("111", lockerItem.id);
            Assert.areEqual("222", lockerItem.metricId);
            Assert.areEqual("333", lockerItem.productId);
            Assert.areEqual("product", lockerItem.productName);
            Assert.areEqual("name", lockerItem.name);
            
            teardownConfiguration();
        })
        .test("LockerItemResponseParser correctly parses the locker items XML", function () {
            let xml : XML = <locker>
                                <lockerItem id="111" metricsId="111">
                                    <productName>
                                        <![CDATA[product111]]>
                                    </productName>
                                    <name>
                                        <![CDATA[name111]]>
                                    </name>
                                    <url>
                                        <![CDATA[?pid=111&metricsId=111]]>
                                    </url>
                                </lockerItem>
                                <lockerItem id="222" metricsId="222">
                                    <productName>
                                        <![CDATA[product222]]>
                                    </productName>
                                    <name>
                                        <![CDATA[name222]]>
                                    </name>
                                    <url>
                                        <![CDATA[?pid=222&metricsId=222]]>
                                    </url>
                                </lockerItem>
                                <lockerItem id="333" metricsId="333">
                                    <productName>
                                        <![CDATA[product333]]>
                                    </productName>
                                    <name>
                                        <![CDATA[name333]]>
                                    </name>
                                    <url>
                                        <![CDATA[?pid=333&metricsId=333]]>
                                    </url>
                                </lockerItem>
                            </locker>;

            setupConfiguration();

            let result = NIKE_UTILS.LockerItemsResponseParser.parse(xml);

            Assert.areEqual(3, result.length);

            assertLockerItem(result[0], "111", "111", "111", "product111", "name111");
            assertLockerItem(result[1], "222", "222", "222", "product222", "name222");
            assertLockerItem(result[2], "333", "333", "333", "product333", "name333");
            
            teardownConfiguration();
        });

    return PIPELET_NEXT;
};
