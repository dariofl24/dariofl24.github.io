/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_nike:profane/objects/RequestGenerator.ds");
importScript("int_nike:profane/objects/ResponseParser.ds");

function execute(args : PipelineDictionary) : Number {
    let NIKE = integration.nike.profanecheck;

    args.Unit.describe("Profane Check Test Suite")
        .test("Checking request parameters", function () {
            let words = ['oneword'];
            let requestGenerator = new NIKE.RequestGenerator(words);

            let params = requestGenerator.getParameters();

            Assert.areEqual(params.size(), 3);

            Assert.isNotEmpty(params.x);
            Assert.areEqual('Nike_ID', params.appFlag);
            Assert.isNotEmpty(params.xml);
        })
        .test("Generating request for several words", function () {
            let words = ['word', 'word2', 'wordish'];
            let requestGenerator = new NIKE.RequestGenerator(words);

            let params = requestGenerator.getParameters();

            let xml = new XML(params.xml);
            let wordNodes = xml.children('word');

            Assert.areEqual(wordNodes.length(), 3);

            Assert.areEqual(words[0], wordNodes[0].valueOf().toString());
            Assert.areEqual(words[1], wordNodes[1].valueOf().toString());
            Assert.areEqual(words[2], wordNodes[2].valueOf().toString());
        })
        .test("Generating request for one word", function () {
            let words = ['oneword'];
            let requestGenerator = new NIKE.RequestGenerator(words);

            let params = requestGenerator.getParameters();

            let xml = new XML(params.xml);

            Assert.areEqual(1, xml.children('word').length());
            Assert.areEqual(words[0], xml.child('word').valueOf().toString());
        })
        .test("Parsing valid response", function () {
            let response : String = '<?xml version="1.0" encoding="UTF-8"?>\
                <profanityCheck Value="true">\
                    <rs word="BABA" isAllowed="true">\
                        <message>Accepted Personal ID: BABA</message>\
                    </rs>\
                </profanityCheck>';

            let responseParser = new NIKE.ResponseParser(response);

            Assert.isFalse(responseParser.hasError());
            Assert.isTrue(responseParser.isValid());
        })
        .test("Parsing profane response", function () {
            let response : String = '<?xml version="1.0" encoding="UTF-8"?>\
                <profanityCheck Value="false">\
                    <rs word="FUCK" isAllowed="false">\
                        <message>Declined Personal ID: FUCK . Try a different ID</message>\
                        <reason id="PO">Profane/Offensive</reason>\
                    </rs>\
                </profanityCheck>';

            let responseParser = new NIKE.ResponseParser(response);

            Assert.isFalse(responseParser.hasError());
            Assert.isFalse(responseParser.isValid());
        })
        .test("Parsing error response", function () {
            let response : String = '<?xml version="1.0" encoding="UTF-8"?>\
                <error>Words xml parameter not found</error>';

            let responseParser = new NIKE.ResponseParser(response);

            Assert.isTrue(responseParser.hasError());
            Assert.isTrue(responseParser.isValid());
        });

    return PIPELET_NEXT;
};
