/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("int_nike:customization/command/AddItemToLocker.ds");
importScript("int_nike:customization/objects/AddItemToLockerRequest.ds");
importScript("int_nike:customization/objects/AddItemToLockerResponse.ds");
importScript("int_nike:customization/CustomizationService.ds");
importScript("int_nike:NikeConstants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

function execute(args : PipelineDictionary) : Number {
    let NIKE = integration.nike.customization;
    let NIKE_CMD = NIKE.command;
    let NIKE_UTILS = NIKE.utils;
    let CONST = integration.nike.constants;

    args.Unit.describe("Nike's CustomizationService Test Suite")
        .test("CustomizationService invokes add item to locker nike service successfully.", function () {

            let NikeBuildsServiceMock = Class.extend({
                init : function(serviceName) {
                    //Nothing
                },

                call : function ( command ) : Status{
                	command.serviceClient = { statusCode : 200 };
                    command.handleResponse("&status=successs&id=123");
                    return "";
                }
            });

            let CustomizationServiceStub = NIKE.CustomizationService.extend({
	            init: function() {
	                this.nikeBuildService = new NikeBuildsServiceMock();
	            }
            });


            let customizationService = new CustomizationServiceStub();

            let addItemToLockerResponse = customizationService.addItemToLocker( "test@gmail.com", "My Design Test", "123456", "/pdp/dyo/my_design");

            Assert.isTrue(addItemToLockerResponse.getStatusCode() === 200, "addItemToLockerResponse.statusCode is not correctly assigned.");
            Assert.isTrue(addItemToLockerResponse.getResponse() === "&status=successs&id=123", "addItemToLockerResponse.response is not correctly assigned.");
        })
        .test("CustomizationService invokes add item to locker nike service with errors.", function () {

            let NikeBuildsServiceMock = Class.extend({
                init : function(serviceName) {
                    //Nothing
                },

                call : function ( command ) : Status{
                    command.serviceClient = { statusCode : 500 };
                    command.handleFailure("Some error here");
                    return "";
                }
            });

            let CustomizationServiceStub = NIKE.CustomizationService.extend({
                init: function() {
                    this.nikeBuildService = new NikeBuildsServiceMock();
                }
            });


            let customizationService = new CustomizationServiceStub();

            let addItemToLockerResponse = customizationService.addItemToLocker( "test@gmail.com", "My Design Test", "123456", "/pdp/dyo/my_design");

            Assert.isTrue(addItemToLockerResponse.getStatusCode() === 500, "addItemToLockerResponse.statusCode is not correctly assigned.");
            Assert.isTrue(addItemToLockerResponse.getResponse() === "Some error here", "addItemToLockerResponse.response is not correctly assigned.");
        });

    return PIPELET_NEXT;
};
