/**
 * @input Unit: Object
 */
importPackage(dw.value)
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds"); 
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("int_nike:customization/objects/NikeCart.ds");
importScript("int_nike:NikeConstants.ds");

function execute(args : PipelineDictionary) : Number {
    let BUILDER = integration.nike.customization;
    let CONST = integration.nike.constants;

    let METRICID_1 = "123";
    let METRICID_2 = "125";
    let CARTID_1 = "456";
    let CARTID_2 = "789";
    let STATUS_SUCCESS = "success";

    let itemDefinition1 = { metricId: METRICID_1, cartId: CARTID_1 };
    let itemDefinition2 = { metricId: METRICID_2, cartId: CARTID_2 };

    let assertNikeItem = function(itemDefinition, item) : String{
        let assertResult = item.name() == "item"
            && item.@metricId == itemDefinition.metricId
            && item.@cartId == itemDefinition.cartId;

        Assert.isTrue(assertResult);
    };

    let assertNikeCartItem = function(itemDefinition, item, status : String) : String{
        assertNikeItem(itemDefinition, item);
        Assert.areEqual(status, item.@status);
    };

    args.Unit.describe("NikeCart Test Suite")
        .test("NikeCart xml generation happy path",function () {
            let item1 = new BUILDER.NikeItem(itemDefinition1);
            let item2 = new BUILDER.NikeItem(itemDefinition2);
            let totalItems = 2;

            assertNikeItem(itemDefinition1, item1.getXML());
            assertNikeItem(itemDefinition2, item2.getXML());

            let cart = new BUILDER.NikeCart(totalItems);
            cart.addSuccessItem(item1);
            cart.addSuccessItem(item2);

            let cartXML : XML = cart.getXML();
            let metricIds : ArrayList = new ArrayList(METRICID_1, METRICID_2);

            Assert.areEqual(totalItems, cartXML.item.length(), StringUtils.format("'cart' element should have {0} children 'item' elements!", totalItems));
            Assert.areEqual(totalItems, cartXML.@itemsAdded,  StringUtils.format("'itemsAdded' attribute is expected to have a value of {0} assigned!", totalItems));
            Assert.areEqual(totalItems, cartXML.@totalItems, StringUtils.format("'totalItems' attribute is expected to have a value of {0} assigned!", totalItems));

            for each (let item : XML in cartXML.*) {
                Assert.isTrue(metricIds.contains(item.@metricId.toXMLString()), StringUtils.format("'item' element with attribute 'metricId' = {0} not found under 'cart' element!", item.@metricId));
                assertNikeCartItem(itemDefinition1, item1.getXML(), CONST.Status.Success);
                assertNikeCartItem(itemDefinition2, item2.getXML(), CONST.Status.Success);

                metricIds.remove(item.@metricId.toXMLString());
            }
        });

    return PIPELET_NEXT;
};
