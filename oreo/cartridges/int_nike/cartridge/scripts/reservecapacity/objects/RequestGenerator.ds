importPackage(dw.system);
importPackage(dw.value);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");

importScript("int_nike:reservecapacity/objects/Doms.ds");

(function() {
    
    var NIKE = integration.nike.reservecapacity;
    
    var RequestGenerator = Class.extend({
        
        DEFAULT_COLOR : String = "001",
        
        init: function(expirationDays : Number) {
            this.expirationDays = expirationDays;
            this.doms = new HashMap();
            this.logger = Logger.getLogger("RESERVECAPACITY_RequestGenerator");
        },
        
        getDoms: function() : Map {
            return this.doms;
        },
        
        getRequest: function(c1ShipmentSummary) : String {
            let promiseXml : XML = this.getPromiseXml();
            this.addPromiseLines(promiseXml, c1ShipmentSummary);
            return promiseXml.toXMLString();
        },
        
        getPromiseXml: function() : XML {
            return <Promise OrganizationCode="CONVERSEUS" AllocationRuleId="SYSTEM" OptimizationType="01" EnterpriseCode="CONVERSEUS" Action="RESERVE" Channel="PUBLIC" >
                       <ReservationParameters ExpirationDate={this.getExpires().toISOString()} />
                       <PromiseLines />
                   </Promise>;
        }, 
        
        getExpires: function() : Date {
            let expires : Date = new Date();
            expires.setDate(expires.getDate() +  this.expirationDays);
            return expires;
        }, 

        addPromiseLines: function(promiseXml : XML, c1ShipmentSummary) {
            this.doms.clear();
            
            let promiseLines : XMLList = promiseXml.PromiseLines;
            let itemSummaries : List = c1ShipmentSummary.getItemSummaryList();
            for (let i : Number = 0 ; i < itemSummaries.length; i++) {
                let itemSummary = itemSummaries.get(i);
                this.initDoms(itemSummary, i + 1);
                promiseLines.appendChild(this.getPromiseLineXml(itemSummary));
            }
        },

        initDoms: function(itemSummary, lineId : Number) {
            let itemDoms = new NIKE.Doms();
            itemDoms.setMetricId(itemSummary.getMetricID()); 
            itemDoms.setLineId(lineId);
            
            this.doms.put(itemSummary.getMetricID(), itemDoms);
        },

        getPromiseLineXml : function(itemSummary) : XML {
            let itemDoms = this.doms.get(itemSummary.getMetricID());
            let reservationId : String = this.getReservationId(itemDoms.getMetricId(), itemDoms.getLineId());
            let itemId : String = this.getItemId(itemSummary);
            
            return <PromiseLine ItemID={itemId} StyleNumber={itemSummary.getSku()} 
                           ColorNumber={this.DEFAULT_COLOR} SizeNumber={itemSummary.getSize()} 
                           RequiredQty={itemSummary.getQuantity()} UnitOfMeasure="EACH" 
                           FulfillmentType="NIKEIDDEFAULT" LineId={itemDoms.getLineId()}> 
                       <ReservationParameters ReservationID={reservationId}/>
                       <ShipToAddress Country="US"/>
                   </PromiseLine>;
        },
        
        getReservationId: function(metricId, lineId) : String {
            return StringUtils.format("{0}_{1}", metricId, lineId);
        },
        
        getItemId: function(itemSummary) : String {
            return StringUtils.format("{0}-{1}-{2}", itemSummary.getSku(), this.DEFAULT_COLOR, itemSummary.getSize());
        }
    });
    
    Namespace.extend(integration, {
        nike: {
            reservecapacity: {
                RequestGenerator : RequestGenerator
            }
        }
    });
    
})();
