importPackage(dw.system);
importPackage(dw.value);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libLang.ds");

(function() {

    var ResponseHandler = Class.extend({

        init: function(doms : Map) {
            this.doms = doms;
            this.logger = Logger.getLogger("RESERVECAPACITY_ResponseHandler");
        },
        
        getResponse: function(responseXml : XML) : Map {
            for each (let line : XMLList in responseXml.PromiseLines.children()) {
                let itemDoms = this.doms.get(this.getMetricId(line));
                if (empty(itemDoms)) {
                    this.logger.warn('Found DOMS response for non-existent item summary: {0}', line.toString());
                } 
                else {
                    itemDoms.setReservedQty(this.getReservedQty(line));
                    if (0 < itemDoms.getReservedQty()) {
                        itemDoms.setRequiredDeliveryDate(this.getRequiredDeliveryDate(line));
                    }
                }
            }
            
            return this.doms;
        }, 
        
        getReservationId: function(line: XMLList) : String {
            return line.child('Reservations').child('Reservation').attribute('ReservationID').toString();
        },
        
        getMetricId: function(line: XMLList) : String {
            return this.getReservationId(line).split("_")[0];
        },
        
        getReservedQty: function(line: XMLList) : Number {
            return Number(line.child('Reservations').attribute('TotalReservedQty').toString());
        },
        
        getRequiredDeliveryDate: function(line: XMLList) : Date {
            return Lang.isoStringToDateNoTime(line.attribute('RequiredDeliveryDate').toString());
        }
    });

    Namespace.extend(integration, {
        nike: {
            reservecapacity: {
                ResponseHandler : ResponseHandler
            }
        }
    });
    
})();
