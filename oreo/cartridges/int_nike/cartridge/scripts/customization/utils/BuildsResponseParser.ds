importPackage( dw.system );
importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");

importScript("int_nike:customization/objects/NikeBuild.ds");

(function() {
    var NikeBuild = integration.nike.customization.NikeBuild;
    var MissingNikeBuild = integration.nike.customization.MissingNikeBuild;
    
    var buildNotFound = function(buildXML : XMLList) : Boolean {
        return buildXML.length() == 0;
    };
    
    var fetchErrorString = function(errorXML : XMLList) {
        return errorXML.text().toXMLString();
    }
    
    var BuildsResponseParser = {
        parse: function(metricIds : Array, buildsResultXML : XML) : Array {
            let results : Array = new Array();
            
            for each (let currentMetricId in metricIds) {
                let build = buildsResultXML.build.(metricId==currentMetricId.toString());
                
                if (buildNotFound(build)) {
                    results.push(new MissingNikeBuild(currentMetricId));
                } else {
                    results.push(new NikeBuild(build));
                }
            }
            
            return results;
        }
    };
    
    Namespace.extend(integration, {
        nike: {
            customization: {
                utils: {
                    BuildsResponseParser : BuildsResponseParser
                }
            }
        }
    });
})();