importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libStringUtilsExt.ds");
importScript("converse_core:util/ViewHelpers.ds");

importScript("int_nike:NikeConstants.ds");
importScript("int_nike:customization/utils/NikeBuildValidator.ds");
importScript("int_nike:customization/utils/NikeRendererUtils.ds");

(function() {
    var CONST = integration.nike.constants;
    var NikeBuildValidator = integration.nike.customization.utils.NikeBuildValidator;
    var NikeRendererUtils = integration.nike.customization.utils.NikeRendererUtils;
    var buildInvalidStatus = integration.nike.customization.utils.buildInvalidStatus;

    var getPersonalization = function(buildXML : XMLList) : String {
        let question = buildXML.question.(questionType=="iD");
        let id : String = question.answer.text().toXMLString();
        
        if (empty(id) || id === CONST.DefaultPersonalization) {
            return "";
        }
        
        return id;
    };

    var getDYOImageUrl = function(metricId : String ) : String {
        let sizedImageUrl : String =  NikeRendererUtils.getBuildImageUrl( metricId, CONST.DYOImageWidthInPx );
        return sizedImageUrl;
    };
    
    var NikeBuild = Class.extend({
        init: function(buildXML : XMLList) {
            this.metricId = String(buildXML.metricId);
            if (isSite('US')) {
                this.size = String(buildXML.size.skuSize);
            } else {
                this.size = String(buildXML.size.size);
            }
            this.quantity = String(buildXML.size.quantity);
            this.sku = buildXML.styleCode.text().toXMLString();
            this.nikeProductId = String(buildXML.path);
            this.personalization = getPersonalization(buildXML);
            this.dyoImageUrl = getDYOImageUrl(this.metricId);
        },
        
        getStatus: function() : Object {
            return NikeBuildValidator.validate(this);
        },
        
        invalidate: function() {
            this.invalidated = true;
        }
    });
    
    var InvalidNikeBuild = Class.extend({
        init: function(errorMessage : String, metricId) {
            this.error = errorMessage;
            this.metricId = metricId;
        },
        
        getStatus: function() : Object {
            return buildInvalidStatus(this.error);
        }
    });
    
    var MissingNikeBuild = InvalidNikeBuild.extend({
        init: function(metricId) {
            this._super(StringUtils.format("Could not find build for metricId: {0}", metricId), metricId);
        }
    });

    Namespace.extend(integration, {
        nike: {
            customization: {
                NikeBuild : NikeBuild,
                InvalidNikeBuild : InvalidNikeBuild,
                MissingNikeBuild : MissingNikeBuild
            }
        }
    });
})();