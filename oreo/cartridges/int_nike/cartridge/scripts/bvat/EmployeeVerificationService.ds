importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("int_nike:bvat/BvatService.ds" );
importScript("int_nike:bvat/objects/IsAccessibleRequest.ds");
importScript("int_nike:bvat/objects/IsAccessibleResponse.ds");
importScript("int_nike:bvat/objects/VerificationRequest.ds");
importScript("int_nike:bvat/objects/VerificationResponse.ds");
importScript("int_nike:bvat/command/IsAccessibleCommand.ds");
importScript("int_nike:bvat/command/VerifyEmployeeCommand.ds");

(function() {

    var logger : Logger = Logger.getLogger('EmployeeVerificationService');
    
    var BVAT_NS = integration.nike.bvat,
        BVAT_CMD_NS = BVAT_NS.command, 
        BVAT_OBJ_NS = BVAT_NS.objects;
        
    var Executor = Class.extend({
        
        init: function(requestObj, CommandType, ResponseType, defaultOutput) {
            this.requestObj = requestObj;
            this.CommandType = CommandType;
            this.ResponseType = ResponseType;
            this.defaultOutput = defaultOutput || null;
            
            this.bvatService = new BVAT_NS.BvatService();
        },
        
        execute: function() : Object {
            
            var errorMsg : String = null;
            var output = this.defaultOutput;
            
            try {
                let command = this.createCommand(this.requestObj);
                
                let status : Status = this.bvatService.call(command);
                
                if (command.hasError()) {
                    errorMsg = command.getErrorMessage();
                    logger.error("Error processing Nike BVAT request {0}: {1}", JSON.stringify(this.requestObj), errorMsg);
                }
                else {
                    let responseObj = this.createResponse(command);
                    
                    if (responseObj.isServiceUnavailable()) {
                        errorMsg = responseObj.getExceptionsAsString();
                        logger.error("Nike BVAT service is unavailable: {0}", errorMsg);
                    }
                    else {
                        output = this.processResponse(responseObj);
                    }
                }
            }
            catch(e) {
                errorMsg = e.toString();
                logger.error(errorMsg);
            }
            
            return { "output": output, "errorMsg": errorMsg };
        },
        
        createCommand: function(requestObj) : Object {
            return new this.CommandType(requestObj);
        },
        
        createResponse: function(command) : Object {
            return new this.ResponseType(command.response);
        },
        
        processResponse: function(responseObj) : Object {
            throw new Error("Missing method 'processResponse'.");
        }
    
    }); 
    
    var VerifyEmployeeExecutor = Executor.extend({
        
        processResponse: function(responseObj) : Object {
            if (responseObj.isFailure()) {
                logger.debug("Employee with EmployeeID \"{0}\" failed verification", this.requestObj.employeeID);
            }
            
            return responseObj.isSuccess() ? responseObj.getBvatID() : null;
        }
        
    }); 
    
    var IsAccessibleExecutor = Executor.extend({
        
        processResponse: function(responseObj) : Object {
            if (responseObj.isFailure()) {
                logger.debug("Employee with BvatID \"{0}\" failed accessibility check", this.requestObj.bvatID);
            }
            
            return responseObj.getIsAccessible();
        }
        
    });
    
         
    var EmployeeVerificationService = Class.extend({
        
        verifyEmployee: function(employeeID : String, firstName : String, lastName : String, zip : String, last4SSN : String) : Object {
            var requestObj = new BVAT_OBJ_NS.VerificationRequest(employeeID, firstName, lastName, zip, last4SSN);
            
            var executor = new VerifyEmployeeExecutor(requestObj, 
                                                      BVAT_CMD_NS.VerifyEmployeeCommand, 
                                                      BVAT_OBJ_NS.VerificationResponse);
            
            var result = executor.execute();
            
            return { "bvatID" : result.output, "errorMsg" : result.errorMsg };
        },
        
        isAccessible: function(bvatID : String, currentlyActive : Boolean) : Object {
            var requestObj = new BVAT_OBJ_NS.IsAccessibleRequest(bvatID);
            
            var executor = new IsAccessibleExecutor(requestObj, 
                                                    BVAT_CMD_NS.IsAccessibleCommand, 
                                                    BVAT_OBJ_NS.IsAccessibleResponse,
                                                    currentlyActive || false);
                                                    
            var result = executor.execute();
            
            return { "isAccessible" : result.output, "errorMsg" : result.errorMsg };
        }
        
    });

    Namespace.extend(BVAT_NS, { EmployeeVerificationService: EmployeeVerificationService });

})();
