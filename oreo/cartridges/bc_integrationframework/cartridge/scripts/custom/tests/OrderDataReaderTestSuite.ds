/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.io);

importScript("converse_core:constants.ds");
importScript("converse_core:promotion/PromotionCodeResolver.ds");
importScript("custom/OrderDataReader.ds");
importScript("custom/OrderDataReaderUS.ds");
importScript("custom/tests/TestUtils.ds");

importScript("module_test:Framework/Assert.ds");

let REGULAR_PROMO_CODE = "regular";
let DYO_PROMO_CODE = "dyo";
let PROMOCODE = "TESTCODE";
let NUMBER_OF_COLUMNS = 31;

let PromotionCodeResolverMock = {
    getPromoCodes: function() {
        let promos = {};
        promos[converse.constants.ProductType.Regular] = REGULAR_PROMO_CODE;
        promos[converse.constants.ProductType.C1] = DYO_PROMO_CODE;
        return promos;
    }
};

let OrderDataReader = new converse.utils.OrderDataReaderUS(PromotionCodeResolverMock);
let TestUtils = converse.tests.utils;

function assertLineItemData(assertionData) {
    let lineItemData = assertionData.lineItemData;
    let orderMock = assertionData.order;
    let shipmentMock = assertionData.shipment;
    let productLineItemMock = shipmentMock.getProductLineItems()[assertionData.lineItemNumber];

    Assert.areEqual(shipmentMock.custom.journeysOrderID, lineItemData.get(0));
    Assert.areEqual(orderMock.orderNo, lineItemData.get(1));
    Assert.areEqual(orderMock.billingAddress.city, lineItemData.get(2));
    Assert.areEqual(orderMock.billingAddress.stateCode, lineItemData.get(3));
    Assert.areEqual(orderMock.billingAddress.postalCode, lineItemData.get(4));
    Assert.areEqual(shipmentMock.shippingAddress.city, lineItemData.get(5));
    Assert.areEqual(shipmentMock.shippingAddress.stateCode, lineItemData.get(6));
    Assert.areEqual(shipmentMock.shippingAddress.postalCode, lineItemData.get(7));
    Assert.areEqual(orderMock.customerEmail, lineItemData.get(8));
    Assert.areEqual(productLineItemMock.product.manufacturerSKU, lineItemData.get(10));
    Assert.areEqual(productLineItemMock.product.name, lineItemData.get(11));
    Assert.areEqual(productLineItemMock.product.custom.color, lineItemData.get(12));
    Assert.areEqual(productLineItemMock.product.custom.size, lineItemData.get(13));
    Assert.areEqual(productLineItemMock.product.custom.cut.displayValue, lineItemData.get(14));
    Assert.areEqual(productLineItemMock.quantityValue, lineItemData.get(15));
    Assert.areEqual(productLineItemMock.basePrice.value, lineItemData.get(16));
    Assert.areEqual(productLineItemMock.adjustedPrice.divide(productLineItemMock.quantityValue).value, lineItemData.get(17).value);
    Assert.areEqual(shipmentMock.adjustedShippingTotalPrice.value, lineItemData.get(18));
    Assert.areEqual(assertionData.promotionCode, lineItemData.get(19));
    Assert.areEqual(productLineItemMock.custom.metricID, lineItemData.get(20));
    Assert.areEqual(productLineItemMock.product.custom.pillar.displayValue, lineItemData.get(21));
    Assert.areEqual(productLineItemMock.product.custom.merchPlannerCategory, lineItemData.get(22));
    Assert.areEqual("", lineItemData.get(23));
    Assert.areEqual(productLineItemMock.product.UPC, lineItemData.get(24));
    Assert.areEqual("", lineItemData.get(25));
    Assert.areEqual(productLineItemMock.product.custom.gender.displayValue, lineItemData.get(26));
    Assert.areEqual(orderMock.customerNo, lineItemData.get(27));
    Assert.areEqual(orderMock.couponLineItems, lineItemData.get(29));
}

function execute(args : PipelineDictionary) : Number {

    args.Unit.describe("OrderDataReader Test Suite")
        .test("Order data correctly read from the search result", function () {
            let regularShipmentMock = TestUtils.createShipmentMock({
                shipmentType: converse.constants.ProductType.Regular,
                journeysOrderID: "WEB111",
                priceFactor: 1
            });
            
            let dyoShipmentMock = TestUtils.createShipmentMock({
                shipmentType: converse.constants.ProductType.C1,
                journeysOrderID: "WEB222",
                priceFactor: 2
            });
            
            let orderMock = {
                orderNo: "111",
                customerEmail: "email@email.com",
                creationDate: new Date("02/06/2014 12:33:00 am"),
                customerNo: "000001",
                couponLineItems: PROMOCODE,
                billingAddress: {
                    city: "San-Francisco",
                    stateCode: "CA",
                    postalCode: "99111"
                },
                getShipments: function() {
                    return [ regularShipmentMock, dyoShipmentMock ];
                },
                getCouponLineItems: function() {
                    let couponList = new ArrayList();
                    let clist = {
                        couponCode: PROMOCODE
                    };
                    couponList.add(clist);
                    return couponList;
                }
            };
            
            let lineItemsData : ArrayList = OrderDataReader.read(orderMock);
            
            Assert.areEqual(regularShipmentMock.getProductLineItems().length + dyoShipmentMock.getProductLineItems().length, lineItemsData.length, "Number of data rows is wrong");
            Assert.areEqual(NUMBER_OF_COLUMNS, lineItemsData.get(0).length, "Number of columns in the data row is wrong");
            
            assertLineItemData({
                order: orderMock,
                shipment: regularShipmentMock,
                promotionCode: REGULAR_PROMO_CODE,
                lineItemNumber: 0,
                lineItemData: lineItemsData.get(0)
            });
            
            assertLineItemData({
                order: orderMock,
                shipment: regularShipmentMock,
                promotionCode: REGULAR_PROMO_CODE,
                lineItemNumber: 1,
                lineItemData: lineItemsData.get(1)
            });

            assertLineItemData({
                order: orderMock,
                shipment: dyoShipmentMock,
                promotionCode: DYO_PROMO_CODE,
                lineItemNumber: 0,
                lineItemData: lineItemsData.get(2)
            });
            
            assertLineItemData({
                order: orderMock,
                shipment: dyoShipmentMock,
                promotionCode: DYO_PROMO_CODE,
                lineItemNumber: 1,
                lineItemData: lineItemsData.get(3)
            });
        });

   return PIPELET_NEXT;
}
