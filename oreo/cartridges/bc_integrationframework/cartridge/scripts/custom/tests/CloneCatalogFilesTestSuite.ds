/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.io);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("module_test:Framework/Assert.ds");
importScript("custom/CloneCatalogFiles.ds");



function execute( args : PipelineDictionary ) : Number
{

	var FolderMock = Class.extend({
		
		init : function() {
			this.fileNamesToTest = new ArrayList();
			this.lines = new ArrayList();
		},
		
		addFile : function(fileNameToTest : String ) {
			this.fileNamesToTest.add( fileNameToTest );
		},
		
		listFiles : function( filter ) {
	        		
			let fileList : Collection = new ArrayList();
			
			for each( fileNameToTest in this.fileNamesToTest )
			{
				let fileToTest = new File( File.IMPEX + File.SEPARATOR + fileNameToTest );
				let matches = filter( fileToTest );
				if( matches )
				{
					fileList.add( fileToTest );	
				}
			}
			
			return fileList;
		},
		
		exists : function () {
			return true;
		},
		
		addLine : function (line : String) {
			this.lines.add(line);
		},
		
		getLines : function() : List {
			return this.lines;
		},
		
		close : function(){},
		
		toString : function() {
			return this.lines.join("\n");
		}
		
	});
	
	// ---------------------------------------------------------------------
	
	var FileReaderMock = Class.extend({
		
		init : function(inputContent:String) {
			this.fileLines = inputContent.split("\n");
			this.iterator = null;
		},
		
		getLines : function() : List {
			var nlines : ArrayList = new ArrayList(this.fileLines);
			return nlines;
		},
		
		readLine : function() : String {
			
			if(this.iterator == null){
				this.iterator = (new ArrayList(this.fileLines)).iterator();
			}
			
			if(this.iterator.hasNext()){
				return this.iterator.next();
			}else{
				return null;
			}
			
		}
		
	});
	
	// ---------------------------------------------------------------------	
	
    args.Unit.describe("Clone Catalog Files Test Suite")
        .test("Should receive a Catalog XML file", function() {
            
            let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();
            
            CloneCatalogFiles.getSourceFolder = function() {
            	var folderMock =  new FolderMock();
            	folderMock.addFile( "CloneCatalogFiles_SourceCatalogXML.xml" );
            	return folderMock;
            }
            
            var inputDir : String = File.IMPEX + File.SEPARATOR + "tests" + File.SEPARATOR;
            
            let sourceCatalogXMLFilePattern : String = "CloneCatalogFiles_SourceCatalogXML\.*";
            
            var fileCandidates : Collection = CloneCatalogFiles.getFileListingFromSource( inputDir, sourceCatalogXMLFilePattern );
            
            Assert.areEqual(1, fileCandidates.length, "Should expect only 1 file that matches the pattern");
            
            
        })
        .test("Should not find Catalog XML files if pattern does not match", function() {
        	
        	let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();
            
            CloneCatalogFiles.getSourceFolder = function() {
            	return new FolderMock();
            }
            
        	var inputDir : String = File.IMPEX + File.SEPARATOR + "tests" + File.SEPARATOR;
            
            let sourceCatalogXMLFilePattern : String = inputDir + "NoExistingFile\.xml";
            
            var fileCandidates : Collection = CloneCatalogFiles.getFileListingFromSource( inputDir, sourceCatalogXMLFilePattern );
            
            Assert.areEqual(0, fileCandidates.length, "Should not be any file that matches the pattern");
        })
        .test("Should throw an exception if more than one file matches the pattern", function() {
        	
        	let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();
            
            CloneCatalogFiles.getSourceFolder = function() {
            	var folderMock =  new FolderMock();
            	folderMock.addFile( "CloneCatalogFiles_SourceCatalogXML11.xml");
            	folderMock.addFile( "CloneCatalogFiles_SourceCatalogXML22.xml" );
            	return folderMock;
            }
            
        	var inputDir : String = File.IMPEX + File.SEPARATOR + "tests" + File.SEPARATOR;
        	var catalogids : ArrayList = new ArrayList();
            
            catalogids.add("ConverseBE");
            
            let sourceCatalogXMLFilePattern : String = "CloneCatalogFiles_SourceCatalogXML*\.*";
            
            Assert.exception(function(){ 
            	CloneCatalogFiles.clone( inputDir, sourceCatalogXMLFilePattern,catalogids,null);
            	 },"More than one file found matching the pattern.");
            
            
        })
        .test("Should read the target IDs from a Collection and return an exception if it is empty", function() {
        	
        	let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();
            
            CloneCatalogFiles.getSourceFolder = function() {
            	var folderMock =  new FolderMock();
            	folderMock.addFile( "CloneCatalogFiles_SourceCatalogXML11.xml");
            	return folderMock;
            }
            
        	var inputDir : String = File.IMPEX + File.SEPARATOR + "tests" + File.SEPARATOR;
        	
            let sourceCatalogXMLFilePattern : String = "CloneCatalogFiles_SourceCatalogXML*\.*";
            
            Assert.exception(function(){ 
            	CloneCatalogFiles.clone( inputDir, sourceCatalogXMLFilePattern,new ArrayList(),null);
            	 },"Empty collection passed as argument and no exception thrown");
            
        	
        })
        .test("Should change the catalog-id from the xml text with the passed value.", function() {
        	
let inputContent = "<catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  <note>\
    <to>Tove</to>\
    <from>Jani<from>\
  </note>\
  <heading>Reminder</handing>\
</catalog>";

let expectedContent = "<catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseFR\">\
  <note>\
    <to>Tove</to>\
    <from>Jani<from>\
  </note>\
  <heading>Reminder</handing>\
</catalog>";

			let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();

			CloneCatalogFiles.getFileReader = function() {
            	
            	var readermock = new FileReaderMock(inputContent);
				
            	return readermock;
            }//
            
            var resultMock : FolderMock = new FolderMock();
        	var masterMock : FolderMock = new FolderMock();
        	
        	CloneCatalogFiles.getFileWriter = function(file:File) {
        		return resultMock;
        	}
        	
        	CloneCatalogFiles.appendToFile = function (line:String,rf:FolderMock) {
        		rf.addLine(line);
        	}//
			CloneCatalogFiles.changeTargetID(masterMock,"ConverseFR",new FolderMock());
			
			Assert.areEqual(expectedContent,resultMock.toString());
			         	
        })
        .test("Should change just the first catalog-id value found in the xml text with the passed value.", function() {
        	
        	let inputContent = "<catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  <note>\
    <to>Tove</to>\
    <from>Jani<from>\
    <catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  </note>\
  <catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  <heading>Reminder</handing>\
</catalog>";

let expectedContent = "<catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseFR\">\
  <note>\
    <to>Tove</to>\
    <from>Jani<from>\
    <catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  </note>\
  <catalog xml=\"http://www.demandware.com/xml/impex/catalog/2006-10-31\" catalog-id=\"ConverseUK\">\
  <heading>Reminder</handing>\
</catalog>";

			let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();

			CloneCatalogFiles.getFileReader = function() {
            	
            	var readermock = new FileReaderMock(inputContent);
				
            	return readermock;
            }//
            
            var resultMock : FolderMock = new FolderMock();
        	var masterMock : FolderMock = new FolderMock();
        	
        	CloneCatalogFiles.getFileWriter = function(file:File) {
        		return resultMock;
        	}
        	
        	CloneCatalogFiles.appendToFile = function (line:String,rf:FolderMock) {
        		rf.addLine(line);
        	}//
			CloneCatalogFiles.changeTargetID(masterMock,"ConverseFR",new FolderMock());
			
			Assert.areEqual(expectedContent,resultMock.toString());
			        	
        }).test("Should generate the name of the result files according to the specified target IDs and postfix", function() {
        	
        	let CloneCatalogFiles = new converse.utils.CloneCatalogFiles();
        	
        	let actualPath = CloneCatalogFiles.getTargetCatalogFilePath("/MyDirectory","ConverseBE","_category_assignments");
        	
        	Assert.areEqual( "/MyDirectory/ConverseBE_category_assignments.xml" ,actualPath
        	,"The name is different from expected.");
        });
        
        
        
   return PIPELET_NEXT;
}



        
