/**
* Import order tracking data for site orders
*
* @input Record : Object Order redord to import
* @input ImportType : String The import type (DYO or Inline)
*
* @output ErrorMsg : String The error message if any
*/
importPackage(dw.io);
importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.util);

let logger : Logger = Logger.getLogger('OrderTrackingImport');

let ImportType = {
    Inline: "inline",
    DYO: "dyo"
}

function execute(args : PipelineDictionary) : Number
{
    let record = args.Record;
    let importType : String = args.ImportType.toLowerCase();

    let errorMsg : String = null;
    
    try {
        processRecord(record, importType);
    } catch(e) {
        errorMsg = e.toString();
        logger.error(errorMsg);
    }

    args.ErrorMsg = errorMsg;

    return empty(errorMsg) ? PIPELET_NEXT : PIPELET_ERROR;
}

function processRecord(record: Object, importType : String) {
    let order : Order = findOrderByJourneysOrderID(importType, record.journeysOrderID);
    
    if (!empty(order)) {
        processSiteOrder(order, record, importType);
        record.processed = true;
    } else {
        logger.info(StringUtils.format("No {0} order found for Journeys order ID: {1}", importType, record.journeysOrderID));
    }
}

function processSiteOrder(order : Order, record : Object, importType : String) : Boolean {
    var shipments : Collection = findOrderShipmentsByJourneysOrderID(order, record.journeysOrderID);
    
    if (empty(shipments)) {
        logger.error(StringUtils.format("No {0} shipments found for Journeys order ID: {1}", importType, record.journeysOrderID));
        return false;
    }

    populateOrder(order, record, importType);
    
    for each (let shipment : Shipment in shipments) {
        populateShipment(shipment, record);
    }
    
    return true;
}

function findOrderByJourneysOrderID(importType : String, journeysOrderID : String) : Order {
    return OrderMgr.queryOrder("custom." + importType + "JourneysOrderID = {0}", journeysOrderID);
}

function findOrderShipmentsByJourneysOrderID(order : Order, journeysOrderID : String) : Collection {
        var shipments : Collection = new ArrayList();
    
    for each (let shipment : Shipment in order.getShipments()) {
        if (shipment.custom.journeysOrderID === journeysOrderID) {
            shipments.add(shipment);
        }
    }

    return shipments;
}

function populateOrder(order : Order, record : Object, importType : String) {
    order.custom[importType + "SigmaOrderID"] = record.sigmaOrderID;
    order.custom[importType + "InvoiceNumber"] = record.invoiceNumber;
}

function populateShipment(shipment : Shipment, record : Object) {
    shipment.custom.sigmaOrderID = record.sigmaOrderID;
    shipment.custom.invoiceNumber = record.invoiceNumber;
    
    if (hasInlineAttributes(record)) {
        let sku = getSku(record);
        let size = getSize(record);
        let productId = StringUtils.format("{0}_{1}", sku, size);
        let item = findItemByProductId(shipment, productId)

        if (item) {
            item.custom.itemTrackingNumber = record.trackingNumber;
        }
    }
}

function getSku(record) {
    return record.sku;
}

function getSize(record) {
    return empty(record.size) ? 'ONE' : record.size; 
}

function hasInlineAttributes(record) {
    return !empty(record.trackingNumber) && !empty(record.sku);
}

function findItemByProductId(shipment, productId) {
    let result = null;

    for each (let item in shipment.getProductLineItems()) {
        if (item.productID === productId) {
            result = item;
            break;
        }
    }

    return result;
}
