/**
*
*   @input srcDir : String
*   @input filesRegex : String
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
    var PARENT : File = new File(File.IMPEX + File.SEPARATOR + "src");
    var srcDir : File = new File(PARENT,args.srcDir);
    var archDir : File = new File(srcDir,"archive");
    
    if(!archDir.exists()){
    	archDir.mkdir();
	}
    
    var filesRegex : string = args.filesRegex;
    
    var fileList : Collection = getFileListingFromSource(srcDir, filesRegex);
    
    if(fileList != null && fileList.length > 0){
    	
    	for(var i : Number = 0; i < fileList.length; i++){
    		
    		var file2Copy = fileList[i];
    		
    		var theArchiveFile : File = new File(archDir,file2Copy.getName());
    		copyFileToArchive(file2Copy, theArchiveFile);
    		file2Copy.remove();
    		
    	}//for
    	
    }//if
    
    
    return PIPELET_NEXT;
}

function getFileListingFromSource(theDir : File, filePattern : string) : Collection
{
	var fileList : Collection = new ArrayList();
	
	var regExp : RegExp = new RegExp(filePattern);
	var todayCal : Calendar = new Calendar();
	
	fileList.addAll(theDir.listFiles(function(file : File) 
		{			
			
			var filedate : Date = new Date( file.lastModified() );
			var fileCalendar: Calendar = new Calendar(filedate);
			
			if (!empty(filePattern)) {
				return regExp.test(file.name) && !fileCalendar.isSameDay(todayCal);
			}
			
			return true;
		}));
	
	return fileList;
}

function copyFileToArchive(srFile : File, dtFile : File)
{
	var fReader : FileReader = new FileReader(srFile);
	var fWriter : FileWriter = new FileWriter(dtFile);
	var nextLine : string;
	while((nextLine = fReader.readLine()) != null)
	{
		fWriter.writeLine(nextLine);
	}
	fReader.close();
	fWriter.close();
	dtFile.createNewFile();
	
}
