/**
* Export Rubber Tracks registrations to CSV
*
* @input ExportFile : String The export file name
* @input CustomersToExport : dw.util.Iterator The customers to be exported
*
* @output ErrorMsg : String The error message if any
*/
importPackage(dw.io);
importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("custom/CsvFileWriter.ds");

var logger : Logger = Logger.getLogger('ExportRubberTracks');
var CsvFileWriter = converse.utils.CsvFileWriter;

function execute(args : PipelineDictionary) : Number
{
    let errorMsg : String = null;
    
    try {
        let registrations = getRubberTracksRegistrations(args.CustomersToExport);
        
        writeRubberTracksRegistrationsToCsvFile(args.ExportFile, registrations);
    } catch(e) {
        errorMsg = e.toString();
        logger.error(errorMsg);
    }
    
    args.ErrorMsg = errorMsg;

    return empty(errorMsg) ? PIPELET_NEXT : PIPELET_ERROR;
}

function getRubberTracksRegistrations(customers: Iterator) : Array {
    let result = [];

    while(customers.hasNext()) {
        let registrations = JSON.parse(customers.next().custom.rubberTracksRegistration);

        for each (let reg in registrations) {
            result.push(reg);
        }
    }
    
    return result;
}

function writeRubberTracksRegistrationsToCsvFile(csvFileName : String, registrations : Array) {
    if (empty(registrations)) {
        return;
    }
    
    let csvWriter : CsvFileWriter = null;
    
    try {
        let csvWriter = new CsvFileWriter(csvFileName);
        let header = getCsvHeader(registrations[0]);

        csvWriter.writeNext(header);
        
        for each (let reg in registrations) {
            let row = [];
            
            for each (let value in reg) {
                value = value.replace(/\"/g, '').replace(/\r\n/g, ' ');
                
                row.push(value);
            }
            
            csvWriter.writeNext(row);
        }
    } finally{
        if (csvWriter) {
            csvWriter.close();
        }
    }
}

function getCsvHeader(reg) : Array {
    let result = [];
    
    for (let key in reg) {
        result.push(key);
    }
    
    return result;
}
