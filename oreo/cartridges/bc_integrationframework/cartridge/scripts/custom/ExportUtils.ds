importPackage(dw.system);
importPackage(dw.order);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("converse_core:product/ProductImageResolver.ds");

(function(){

    var ProductImageResolver = converse.product.ProductImageResolver;

    function ellipse(text, length) {
        var ellipsis = '...';
        var result = text;
    
        if (!empty(text) && text.length > length) {
            max = length - ellipsis.length - 1;
            result = text.substring(0, max) + ' ' + ellipsis;
        }
    
        return result;
    }
    
    function removeTags(value) {
        return empty(value) ? value : value.replace(/<\/?.*?>/g, '');
    }
    
    function stripWhitespace(value) {
        return empty(value) ? value : value.replace(/\s+/g, ' ');
    }
    
    function shouldBeExported(product) {
        return product.online && product.variant;
    }
    
    function getProductImageUrl(product) {
        let imageUrl = ProductImageResolver.getProductImage(product, 'large', 0);
    
        return empty(imageUrl) ? '' : imageUrl.getURL();
    }
    
    function getCategory(product) {
        let result = [];
        let gender = this.getGender(product);
        let pillar = product.masterProduct.custom.pillar
        let category = product.masterProduct.custom.merchPlannerCategory
    
        this.addIfNotEmpty(gender, result);
        this.addIfNotEmpty(pillar, result);
        this.addIfNotEmpty(category, result);
    
        return result.length === 0 ? 'Converse' : result.join(', ');
    }
    
    function getGender(product) {
        let gender = product.masterProduct.custom.gender;
        let result = '';
    
        switch(gender) {
            case 'men':
                result = "Men's";
                break;
            case 'women':
                result = "Women's";
                break;
            case 'kids':
                result = "Kid's";
                break;
            case 'unisex':
                result = 'Unisex';
        }
    
        return result;
    }
    
    function addIfNotEmpty(value, arr) {
        if (!empty(value)) {
            arr.push(value);
        }
    }

    function removeLeadingZeros(value) {
        return value.replace(/^0*/g, '');
    }

    var ns = Namespace.extendFromString(converse, "utils");
    Namespace.extend(ns, { 
        ExportUtils : {
            ellipse: ellipse,
            removeTags: removeTags,
            stripWhitespace: stripWhitespace,
            shouldBeExported: shouldBeExported,
            getProductImageUrl: getProductImageUrl,
            getCategory: getCategory,
            getGender: getGender,
            addIfNotEmpty: addIfNotEmpty,
            removeLeadingZeros: removeLeadingZeros
        }
    });

})();
