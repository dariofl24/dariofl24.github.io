/**
* Read Nike employee data from csv. 
*
* @input ImportFile : dw.io.File The file to import
*
* @output ErrorMsg : String The error message if any
* @output EmployeeRecords : Array of Employee Records read from CSV file
*/
importPackage(dw.io);
importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.util);

importScript("custom/libCsvHelper.ds");

let logger : Logger = Logger.getLogger('VerifyEmployeesImport');


function execute(args : PipelineDictionary) : Number
{
    let importFile : File = args.ImportFile;
    let employeeData : Array = [];
    let errorMsg : String = null;
    try {
        employeeData = readEmployeeData(importFile);
    }
    catch(e) {
        errorMsg = e.toString();
        logger.error(errorMsg);
    }

    args.ErrorMsg = errorMsg;
    args.EmployeeRecords = employeeData;

    return empty(errorMsg) ? PIPELET_NEXT : PIPELET_ERROR;
}

function readEmployeeData(importFile : File) : Array {
    let propertyToColumnMap : Map = getPropertyToColumnMap();
    let csvHelper = new CsvHelper({ failOnMissingColumn : true });

    let employeeData : Array = [];

    csvHelper.streamCsvFile(importFile,
                            0,
                            function(headerLine : Array, line : Array, index : Number, isHeader : Boolean) {
                                if (isHeader) return;

                                var record = csvHelper.lineToObject(headerLine, line, propertyToColumnMap);
                                logger.debug("record="+record);
                                record.processed = false;
                                employeeData.push(record);
                            });

    return employeeData;
}

function getPropertyToColumnMap() : Map {
    var map : Map = new HashMap();
    map.put("employeeActive", "Action");
    map.put("login", "EmailAddress");
    map.put("employeeID", "EmplID");
    
    return map;
}

