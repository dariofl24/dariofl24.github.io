importPackage(dw.system);
importPackage(dw.object);
importPackage(dw.util);
importPackage(dw.value);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libLang.ds");

(function() {

    let logger : Logger = Logger.getLogger('DyoSending');

    var DyoSending = Class.extend({
        init: function(configuration : Object, now: Date) {
            this.configuration = configuration;
            this.now = now;
        },

        process : function(orders) : Array {
            logger.info("DyoSending - Starting process.");

            let result = [];

            for each (let order in orders) {
                logger.info("Processing order {0}", order.orderNo);

                let items : Array = this.getDYOItems(order);

                let orderInProductionItemResult = [];
                let preparingForShipmentItemResult = [];

                let latestSentTime : Object = this.getLatestSentTime(items);
                let anItemWasIgnored = false;

                for each (let item in items) {
                    logger.info("Processing item with metricID {0} : {1}", item.custom.metricID, this.getItemDetails(item));
    
                    if(!this.itemIsReady(item)) {
                        logger.info("Item {0} is not ready. Skipping.", item.custom.metricID);
                        continue;
                    }

                    if(this.firstEmailWasSentAndSecondIsNotReady(item)) {
                        logger.info("Item {0}, first email was sent, second is not ready. Skipping.", item.custom.metricID);
                        continue;
                    }

                    if (this.itemWasCompletelySent(item)) {
                        logger.info("Item {0} was completely sent. Skipping.", item.custom.metricID);
                        continue;
                    }

                    if (!this.readyToSendByDateTime(item)) {
                        logger.info("Item {0} not ready by datetime. Ignoring for now.", item.custom.metricID);
                        anItemWasIgnored = true;
                        continue;
                    }

                    if (!this.reachedThreshold(item, latestSentTime)) {
                        logger.info("Item {0} hasn't reached time threshold. Ignoring for now.", item.custom.metricID);
                        anItemWasIgnored = true;
                        continue;
                    }

                    this.processOrderInProductionItems(item, orderInProductionItemResult);
                    this.processPreparingForShipmentItems(item, preparingForShipmentItemResult);
                }

                this.processResult(result, orderInProductionItemResult, order, converse.constants.DyoEmailType.OrderInProduction);
                this.processResult(result, preparingForShipmentItemResult, order, converse.constants.DyoEmailType.PreparingForShipment);

                this.updateOrder(order, anItemWasIgnored);
            };

            logger.info("DyoSending - Process finished.");    

            return result;
        },

        getItemDetails : function(item) : String {
            return StringUtils.format("OrderInProduction - on: {0}, wasSent: {1}; PreparingForShipment - on: {2}, wasSent: {3}",
                item.custom.orderInProductionEmailOn || "(null)", 
                item.custom.orderInProductionEmailWasSent || false,
                item.custom.preparingForShipmentEmailOn || "(null)", 
                item.custom.preparingForShipmentEmailWasSent || false);
        },

        getDYOItems : function(order) : Array {
            for each (let shipment : Shipment in order.getShipments()) {
                if (shipment.custom.productType === converse.constants.ProductType.C1) {
                    return shipment.getProductLineItems();
                }
            }

            logger.warn("Order with no {0} and marked as ready to send email doesn't have C1 shipment.", order.orderNo);
            return [];
        },

        getLatestSentTime : function(items) : Object {
            let result = {
                orderInProduction : new Date(0),
                preparingForShipment : new Date(0)
            };

            for each (let item in items) {
                if (this.isOrderInProductionDateAvailable(item) && this.isOrderInProductionSent(item)) {
                    result.orderInProduction = Lang.maxDate(item.custom.orderInProductionEmailOn, result.orderInProduction);
                }

                if (this.isPreparingForShipmentDateAvailable(item) && this.isPreparingForShipmentSent(item)) {
                    result.preparingForShipment = Lang.maxDate(item.custom.preparingForShipmentEmailOn, result.preparingForShipment);
                }
            }

            return result;
        },

        isOrderInProductionDateAvailable : function(item) : Boolean {
            return !empty(item.custom.orderInProductionEmailOn);
        },

        isPreparingForShipmentDateAvailable : function(item) : Boolean {
            return !empty(item.custom.preparingForShipmentEmailOn);
        },

        isOrderInProductionSent : function(item) : Boolean {
            return item.custom.orderInProductionEmailWasSent || false;
        },

        isPreparingForShipmentSent : function(item) : Boolean {
            return item.custom.preparingForShipmentEmailWasSent || false;
        },        

        itemIsReady : function(item) : Boolean {
            let orderInProductionAvailable = this.isOrderInProductionDateAvailable(item);
            let preparingForShipmentAvailable = this.isOrderInProductionSent(item) && this.isPreparingForShipmentDateAvailable(item);

            return orderInProductionAvailable || preparingForShipmentAvailable;
        },

        firstEmailWasSentAndSecondIsNotReady : function(item) : Boolean {
            let firstEmailWasSent = this.isOrderInProductionSent(item);
            let secondIsNotReady = !this.isPreparingForShipmentDateAvailable(item);

            return firstEmailWasSent && secondIsNotReady;
        },

        shouldUseOrderInProduction : function(item) : Boolean {
            return this.isOrderInProductionDateAvailable(item) && !this.isOrderInProductionSent(item);
        },

        shouldUsePreparingForShipment : function(item) : Boolean {
            return this.isOrderInProductionSent(item) && this.isPreparingForShipmentDateAvailable(item);
        },

        itemWasCompletelySent : function(item) : Boolean {
            return this.isOrderInProductionSent(item) && this.isPreparingForShipmentSent(item);
        },

        readyToSendByDateTime : function(item) : Boolean {
            if (this.shouldUseOrderInProduction(item)) {
                if (item.custom.orderInProductionEmailOn <= this.now) {
                    return true;
                }    
            }
            
            if (this.shouldUsePreparingForShipment(item)) {
                if (item.custom.preparingForShipmentEmailOn <= this.now) {
                    return true;
                }    
            }

            return false;
        },

        reachedThreshold : function(item, latestSentTime) : Boolean {
            if (this.shouldUseOrderInProduction(item)) {
                let hours = Lang.diffHours(item.custom.orderInProductionEmailOn, latestSentTime.orderInProduction);
                
                if (hours >= this.configuration.ItemSendingThresholdInHours) {
                    return true;
                }
            }

            if (this.shouldUsePreparingForShipment(item)) {
                let hours = Lang.diffHours(item.custom.preparingForShipmentEmailOn, latestSentTime.preparingForShipment);
                
                if (hours >= this.configuration.ItemSendingThresholdInHours) {
                    return true;
                }    
            }

            return false;
        },

        processOrderInProductionItems : function(item, itemResult) {
            if (this.shouldUseOrderInProduction(item)) {
                itemResult.push(item);

                logger.info("Item {0} added to OrderInProduction result.", item.custom.metricID);

                item.custom.orderInProductionEmailWasSent = true;
            }
        },

        processPreparingForShipmentItems : function(item, itemResult) {
            if (this.shouldUsePreparingForShipment(item)) {
                itemResult.push(item);

                logger.info("Item {0} added to PreparingForShipment result.", item.custom.metricID);

                item.custom.preparingForShipmentEmailWasSent = true;
            }
        },

        processResult : function(result, itemResult, order, emailType) {
            if (!empty(itemResult)) {
                if (this.emailPassesFilter(order.customerEmail)) {
                    let toResult = {
                        order: order,
                        emailType: emailType,
                        items: itemResult,
                        tracking: this.processTracking(itemResult)
                    };
                    
                    toResult.singleTracking = toResult.tracking.length == 1;
                    result.push(toResult);
                } else {
                    logger.info("Order {0} didn't pass email filter. Ignoring.", order.orderNo);
                }
            }
        },

        emailPassesFilter : function(email : String) : Boolean {
            if (empty(this.configuration.EmailFilter)) {
                return true;
            }

            return this.configuration.EmailFilter.indexOf(email) >= 0;
        },

        processTracking : function(itemResult) : Array {
            let trackingNumbers = itemResult.map(function(i) { return i.custom.itemTrackingNumber });
            let first = trackingNumbers[0];

            let allAreTheSame = true;
            for each (let current in trackingNumbers) {
                if (current != first) {
                    allAreTheSame = false;
                    break;
                }
            };

            if (allAreTheSame) {
                return [ first ];
            } else {
                return trackingNumbers;
            };
        },

        updateOrder : function(order, anItemWasIgnored) {
            if (!anItemWasIgnored) {
                order.custom.readyToSendEmail = false;
                logger.info("Order {0} has no unsent items for the moment.", order.orderNo);
            } else {
                logger.info("Order {0} still has unsent items.", order.orderNo);
            }
        }
    });

    var ns = Namespace.extendFromString(converse, "oms");
    Namespace.extend(ns, { DyoSending : DyoSending });
})();