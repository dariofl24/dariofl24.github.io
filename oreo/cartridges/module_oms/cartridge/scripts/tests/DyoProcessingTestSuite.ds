/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("module_oms:processing/DyoProcessing.ds");
importScript("module_test:Framework/Assert.ds"); 
importScript("converse_core:common/libLang.ds");

function execute(args : PipelineDictionary) : Number {

    let now : Date = new Date();
    let configuration = {
        checkingThreshold : 30,
        firstTrigger : 4,
        secondTrigger : 7,
        delayForFirst : 2,
        delayForSecond : 3,
    }

    let DyoProcessing = new converse.oms.DyoProcessing(configuration, now);

    let nowWithFirstDelay : Date = Lang.addDays(now, 2);
    let nowWithSecondDelay : Date = Lang.addDays(now, 3);

    let AssertProcessed = function(item : Object, status : Number, comment) {
        Assert.isNull(item.custom.updatedStatus, comment + ", updated status");
        Assert.areEqual(status, item.custom.processedStatus, comment + ", processed status should be " + status);
    }

    DyoProcessing.getDYOItems = function(order) : Array {
        return order.items;
    }

    args.Unit.describe("DYO Processing Suite")
        .test("No action if order is older than threshold", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : Lang.addDays(now, -33),
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 3, updatedStatus : 4 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 5 }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            Assert.isFalse(orders[1].custom.updated, "Updated flag of order 1 should be false");
        })
        .test("Mark updated=false if status less than first", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 3 }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            AssertProcessed(orders[0].items[0], 3, "Order 0, Item 0");
        })
        .test("Set 'ready for send' for order if crossed first status", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 3, updatedStatus : 4 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 5 }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            AssertProcessed(orders[0].items[0], 4, "Order 0, Item 0");
            Assert.isTrue(orders[0].custom.readyToSendEmail, "Ready to send flag of order 0 should be true");

            Assert.isFalse(orders[1].custom.updated, "Updated flag of order 1 should be false");
            AssertProcessed(orders[1].items[0], 5, "Order 1, Item 0");
            Assert.isTrue(orders[1].custom.readyToSendEmail, "Ready to send flag of order 1 should be true");
        })
        .test("No changes if new update doesn't cross other status (first)", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true, readyToSendEmail : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 4, updatedStatus : 6, 
                        orderInProductionEmailOn : now, orderInProductionEmailWasSent : false }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true, readyToSendEmail : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 4, updatedStatus : 6, 
                        orderInProductionEmailOn : now, orderInProductionEmailWasSent : true }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            AssertProcessed(orders[0].items[0], 6, "Order 0, Item 0");
            Assert.isTrue(orders[0].custom.readyToSendEmail, "Ready to send flag of order 0 should be true");
            Assert.areDatesEqual(now, orders[0].items[0].custom.orderInProductionEmailOn, "incorrect date for orderInProductionEmailOn on order 0 item 0");
            Assert.isFalse(orders[0].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 0, item 0 should be false");

            Assert.isFalse(orders[1].custom.updated, "Updated flag of order 1 should be false");
            AssertProcessed(orders[1].items[0], 6, "Order 1, Item 0");
            Assert.isTrue(orders[1].custom.readyToSendEmail, "Ready to send flag of order 1 should be true");
            Assert.areDatesEqual(now, orders[1].items[0].custom.orderInProductionEmailOn, "incorrect date for orderInProductionEmailOn on order 0 item 0");
            Assert.isTrue(orders[1].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 1, item 0 should be true");
        })
        .test("No changes if new update doesn't cross other status (second)", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true, readyToSendEmail : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 8, updatedStatus : 9, 
                        preparingForShipmentEmailOn : now, preparingForShipmentEmailWasSent : false }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true, readyToSendEmail : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 8, updatedStatus : 9, 
                        preparingForShipmentEmailOn : now, preparingForShipmentEmailWasSent : true }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            AssertProcessed(orders[0].items[0], 9, "Order 0, Item 0");
            Assert.isTrue(orders[0].custom.readyToSendEmail, "Ready to send flag of order 0 should be true");
            Assert.areDatesEqual(now, orders[0].items[0].custom.preparingForShipmentEmailOn, "incorrect date for preparingForShipmentEmailOn on order 0 item 0");
            Assert.isFalse(orders[0].items[0].custom.preparingForShipmentEmailWasSent, "preparingForShipmentEmailWasSent flag of order 0, item 0 should be false");

            Assert.isFalse(orders[1].custom.updated, "Updated flag of order 1 should be false");
            AssertProcessed(orders[1].items[0], 9, "Order 1, Item 0");
            Assert.isTrue(orders[1].custom.readyToSendEmail, "Ready to send flag of order 1 should be true");
            Assert.areDatesEqual(now, orders[1].items[0].custom.preparingForShipmentEmailOn, "incorrect date for preparingForShipmentEmailOn on order 1 item 0");
            Assert.isTrue(orders[1].items[0].custom.preparingForShipmentEmailWasSent, "preparingForShipmentEmailWasSent flag of order 1, item 0 should be true");
        })
        .test("Set 'ready for send' for order if crossed second status", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 4, updatedStatus : 7 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 8 }}]
                }]

            DyoProcessing.process(orders);

            Assert.isFalse(orders[0].custom.updated, "Updated flag of order 0 should be false");
            AssertProcessed(orders[0].items[0], 7, "Order 0, Item 0");
            Assert.isTrue(orders[0].custom.readyToSendEmail, "Ready to send flag of order 0 should be true");

            Assert.isFalse(orders[1].custom.updated, "Updated flag of order 1 should be false");
            AssertProcessed(orders[1].items[0], 8, "Order 1, Item 0");
            Assert.isTrue(orders[1].custom.readyToSendEmail, "Ready to send flag of order 1 should be true");
        })
        .test("Mark first as sent if second status received", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 4, updatedStatus : 7 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 8 }}]
                }]

            DyoProcessing.process(orders);

            Assert.isTrue(orders[0].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 0, item 0 should be true");
            Assert.isTrue(orders[1].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 1, item 0 should be true");
        })
        .test("Check send delay for first", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 3, updatedStatus : 4 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 5 }}]
                }]

            DyoProcessing.process(orders);

            Assert.areDatesEqual(nowWithFirstDelay, orders[0].items[0].custom.orderInProductionEmailOn, "incorrect date for orderInProductionEmailOn on order 0 item 0");
            Assert.isFalse(orders[0].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 0, item 0 should be false");

            Assert.areDatesEqual(nowWithFirstDelay, orders[1].items[0].custom.orderInProductionEmailOn, "incorrect date for orderInProductionEmailOn on order 1 item 0");
            Assert.isFalse(orders[1].items[0].custom.orderInProductionEmailWasSent, "orderInProductionEmailWasSent flag of order 1, item 0 should be false");
        })
        .test("Check send delay for second", function () {
            let orders = [
                {
                    orderNo : "o1",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", processedStatus : 4, updatedStatus : 7 }}]
                },
                {
                    orderNo : "o2",
                    creationDate : now,
                    custom : { updated : true },
                    items : [{ custom : { metricID : "m1", updatedStatus : 8 }}]
                }]

            DyoProcessing.process(orders);

            Assert.areDatesEqual(nowWithSecondDelay, orders[0].items[0].custom.preparingForShipmentEmailOn, "incorrect date for preparingForShipmentEmailOn on order 0 item 0");
            Assert.isFalse(orders[0].items[0].custom.preparingForShipmentEmailWasSent, "preparingForShipmentEmailWasSent flag of order 0, item 0 should be false");

            Assert.areDatesEqual(nowWithSecondDelay, orders[1].items[0].custom.preparingForShipmentEmailOn, "incorrect date for preparingForShipmentEmailOn on order 1 item 0");
            Assert.isFalse(orders[1].items[0].custom.preparingForShipmentEmailWasSent, "preparingForShipmentEmailWasSent flag of order 1, item 0 should be false");
        });

   return PIPELET_NEXT;
}

