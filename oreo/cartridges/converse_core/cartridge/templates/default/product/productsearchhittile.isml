<iscache type="relative" hour="24" varyby="price_promotion"/>

<isif condition="${!empty(pdict.Product)}">
    <isscript>
        importScript("converse_core:constants.ds");
        importScript("product/ProductUtils.ds");
        importScript("converse_core:search/ProductSearchUtils.ds");
        importScript("converse_core:product/ProductImageResolver.ds");
        importScript("converse_core:product/ProductWithSalesPriceFilter.ds");

        var ProductImageResolver = converse.product.ProductImageResolver;

        var Product = pdict.Product;
        var productUrl = URLUtils.http('Product-Show', 'pid', Product.ID);
        var OrgProduct = null;

        var productToDisplay = Product;
        var selectedColor = null;
        var selectedSize = null;
        
        var avmo=  null;
        var comingSoonDate= null;
        var isorderable= null;
        var flagComingSoon= null;
        
        if (Product.master)
        {
            var productToDisplay : dw.catalog.Product = pdict.ProductToDisplay;
            var variationModel : dw.catalog.ProductVariationModel = Product.variationModel;

            var selectableColors : dw.util.Collection = new dw.util.ArrayList();
            var selectableSizes : dw.util.Collection = new dw.util.ArrayList();
            var varAttrColor : dw.catalog.ProductVariationAttribute = variationModel.getProductVariationAttribute("color");
            var varAttrSize : dw.catalog.ProductVariationAttribute = variationModel.getProductVariationAttribute("size");

            if (varAttrColor != null)
            {
                selectableColors = variationModel.getFilteredValues(varAttrColor);
            }

            if (varAttrSize != null)
            {
                selectableSizes = variationModel.getFilteredValues(varAttrSize);
            }
            
            avmo = productToDisplay.availabilityModel.orderable;
            comingSoonDate = productToDisplay.custom.comingSoon;
            isorderable = productToDisplay.availabilityModel.orderable;
            flagComingSoon= ProductUtils.isDateAfterNowColorVar(productToDisplay.custom.comingSoon);
            
            if (!productToDisplay.availabilityModel.orderable && flagComingSoon) {
                productToDisplay = ProductUtils.getDefaultVariant(variationModel);
            }

            if (productToDisplay && productToDisplay.variant)
            {
                if (varAttrColor != null) {
                    selectedColor = productToDisplay.variationModel.getSelectedValue(varAttrColor);
                }

                if (varAttrSize != null) {
                    selectedSize = productToDisplay.variationModel.getSelectedValue(varAttrSize);
                }

                if (empty(selectedColor) && selectableColors.size() > 0) {
                    selectedColor = selectableColors.get(0);
                }

                if (empty(selectedSize) && selectableColors.size() > 0) {
                    selectedSize = selectableSizes.get(0);
                }

                if (!empty(selectedColor) && !empty(selectedSize)) {
                    productUrl = pdict.Product.variationModel.url('Product-Show');
                }
            } 
        }

        var productLabel = null;
        var productLabelCssClass = null;

        if (ProductUtils.hasBadging(productToDisplay)) {
            productLabel = ProductUtils.getBadging(productToDisplay);
            productLabelCssClass = 'product-label';
        } else if (ProductUtils.isConverseOne(productToDisplay)) {
            productLabel = Resource.msg('global.product.customizable', 'locale', null);
            productLabelCssClass = 'product-label-customizable';
        }

        var minPrice = pdict.CurrentHttpParameterMap.minprice;
        var maxPrice = pdict.CurrentHttpParameterMap.maxprice;

        if (!empty(minPrice)) {
            minPrice = new dw.value.Money(minPrice, converse.constants.CurrencyCode);
        }

        if (!empty(maxPrice)) {
            maxPrice = new dw.value.Money(maxPrice, converse.constants.CurrencyCode);
        }
        
        var categoryID = pdict.CategoryID;
        var isSalesCategory = ProductSearchUtils.isSalesCategory( categoryID );
        var productWithSalesPriceFilter = null;
        
        if( isSalesCategory )
        {
            productWithSalesPriceFilter = ProductWithSalesPriceFilter.filter;
        }
        
    </isscript>

<div class="product-tile" id="${Product.UUID}" data-itemid="${Product.ID}">
	<iscomment>Image</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<div class="product-image">
        <isset name="isGiftCard" value="${ProductUtils.isGiftCard(Product) ? 'gift-card-product' : ''}" scope="page"/>
	    <isset name="productImageMedium" value="${ProductImageResolver.getProductImage(productToDisplay, 'gridwallTile', 0)}" scope="page"/>
	    <isset name="thumbnailUrl" value="${productImageMedium.getURL()}" scope="page"/>
	    <isset name="thumbnailAlt" value="${productImageMedium.alt}" scope="page"/>
	    <isset name="thumbnailTitle" value="${productImageMedium.title}" scope="page"/>
	    
	    <a class="thumb-link" href="${productUrl}" title="${Product.name}">
	        <img src="${thumbnailUrl}" alt="${thumbnailAlt}" title="${thumbnailTitle}" 
	        data-comingsoon='{"iscommingsoon":"${ProductUtils.isDateAfterNowColorVar(productToDisplay.custom.comingSoon)}"}'
	        class="${isGiftCard}" />
	    </a>
	</div>
    
	<iscomment>Product Name</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<div class="product-name">
	    <h2>
	        <a class="name-link" href="${productUrl}" title="${Product.name}">
	            <isprint value="${Product.name}"/>
	        </a>
	    </h2>
	</div>
	    
	<iscomment>Pricing</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	
	<div class="product-pricing" style="display:${(flagComingSoon==true)?'none':'block'};">
	    <iscomment>Renders pricing information depending on the option or variation model, as well as scaled prices and so on.</iscomment>
	    <isif condition="${Product.productSet}">
	        <iscomment>Product set pricing</iscomment>
	        <span class="product-set-price">${Resource.msg('global.buyall','locale',null)}</span>
	    <iselseif condition="${Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue == 'true'}"/>
	        <iscomment>Product master price range depending on the represented variants</iscomment> 
	        <span class="product-sales-price"><isprint value="${minPrice}"/> - <isprint value="${maxPrice}"/></span>
	    <iselse/>                       
	        <iscomment>For Product master without a price range get the pricing from firstRepresentedProduct </iscomment>
	        <isif condition="${Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue != 'true'}"/>
	            <iscomment>Preserve current product instance</iscomment>
	            <isset name="OrgProduct" value="${Product}" scope="page"/>
	            <isset name="Product" value="${pdict.ProductToDisplay}" scope="page"/>
	        </isif>
	        <isset name="PriceModel" value="${Product.getPriceModel()}" scope="page"/>

	        <iscomment>
	            Check whether the product has price in the sale pricebook. If so, then
	            display two prices: crossed-out standard price and sales price.
	        </iscomment>
	        <isinclude template="product/components/standardprice"/>
	        <isset name="SalesPrice" value="${PriceModel.getPrice()}" scope="page"/>
	        <isset name="ShowStandardPrice" value="${StandardPrice.available && SalesPrice.available && StandardPrice.compareTo(SalesPrice) == 1}" scope="page"/>
	
	        <isif condition="${ShowStandardPrice}">
	            <div class="product-discounted-price">
	                <span class="product-sales-price strike" title="Regular Price"><isprint value="${StandardPrice}"/></span>
	                <span class="product-sales-price red" title="Sale Price"><isprint value="${SalesPrice}"/></span>
	            </div>
	        <iselse/>
	            <span class="product-sales-price" title="Sale Price"><isprint value="${SalesPrice}"/></span>
	        </isif>
	        
	        <isif condition="${!empty(OrgProduct)}">
	            <iscomment>Restore current product instance</iscomment>
	            <isset name="Product" value="${OrgProduct}" scope="page"/>
	            <isset name="OrgProduct" value="${null}" scope="page"/>
	        </isif>
	</div>
	</isif>
	
		<isset name="comingsoonmsg" value="${Resource.msg('product.comingsoon.msg', 'product', null)}" scope="page"/> 
		<div class="product-comingsoon comingsoon-msg-div" style="display:${(flagComingSoon==true)?'block':'none'};" >
			<span class="product-sales-price red" title="Coming soon"><isprint value="${comingsoonmsg}"/></span>
		</div>
		
	<iscomment>Label</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
    <isif condition="${!empty(productLabel)}">
        <div class="${productLabelCssClass}">
            <span>${productLabel}</span>
        </div>
    </isif>

	<iscomment>Promotion</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(Product)}" scope="page"/>
	<isif condition="${!empty(promos)}">
	    <div class="product-promo">
	        <isloop items="${promos}" var="promo" status="promoloopstate">
	            <isif condition="${promo.promotionClass === dw.campaign.Promotion.PROMOTION_CLASS_PRODUCT}">
	                <div class="promotional-message <isif condition="${promoloopstate.first}"> first <iselseif condition="${promoloopstate.last}"> last</isif>">
	                    <isprint value="${promo.custom.calloutMessageGridwall}" encoding="off"/>
	                </div>
	            </isif>
	        </isloop>
	    </div>
	</isif>

    <iscomment>Swatches</iscomment>
    <iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
    
    <isif condition="${!empty(selectableColors) && selectableColors.size() > 1 && !empty(varAttrColor) && !empty(selectedSize)}">
        <div class="product-swatches">
            <iscomment>render the palette, the first swatch is always preselected</iscomment>
            <div class="prev-swatch-group"><span>&lt;</span></div>
            <ul class="swatch-list">
                <isloop items="${selectableColors}" var="colorValue" status="varloop">
                    <iscomment>Determine the swatch and the thumbnail for this color</iscomment>
                    
                    <isset name="variant" value="${ProductUtils.getFirstOrderableOrComingsoonVariantForColor(Product, colorValue.getID(), productWithSalesPriceFilter)}" scope="page"/>
                    <isif condition="${empty(variant)}">
                    	<iscontinue/>
                    </isif>
                    
                    <isset name="thumbnail" value="${ProductImageResolver.getProductImage(variant, 'gridwallTile', 0)}" scope="page"/>
                    <isset name="colorHex" value="${variant.custom.mainColorHex}" scope="page"/>

                    <iscomment>If images couldn't be determined, display a "no image" thumbnail</iscomment>
                    <isset name="thumbnailUrl" value="${thumbnail.getURL()}" scope="page"/>
                    <isset name="thumbnailAlt" value="${StringUtils.encodeString(thumbnail.alt,StringUtils.ENCODE_TYPE_HTML)}" scope="page"/>
                    <isset name="thumbnailTitle" value="${StringUtils.encodeString(thumbnail.title,StringUtils.ENCODE_TYPE_HTML)}" scope="page"/>
                    
                    <isset name="swatchproductUrl" value="${Product.variationModel.url('Product-Show', varAttrColor, colorValue.value)}" scope="page"/>
                    <isif condition="${!empty(pdict.ProductSearchResult)}">
                        <isset name="swatchproductUrl" value="${pdict.ProductSearchResult.url( swatchproductUrl )}" scope="page"/>
                    </isif>
                    
                    <iscomment>render a single swatch, the url to the proper product detail page is contained in the href of the swatch link</iscomment>
                    <li>
                        <a href="${swatchproductUrl}"
                            class="swatch" 
                            data-swatch-hex="${colorHex}"
                            style="background-color: ${unsanitizeOR('#' + colorHex)}" 
                            title="${colorValue.displayValue}"
                            data-thumb='{"src":"${thumbnailUrl}","alt":"${thumbnailAlt}","title":"${thumbnailTitle}","iscomingsoon":"${ProductUtils.isDateAfterNowColorVar(variant.custom.comingSoon)}"}'>
                            <span>s</span>
                        </a>
                    </li>
                </isloop>
            </ul>
            <div class="next-swatch-group"><span>&gt;</span></div>
        </div>
        <div class="product-label-morecolors">
            <a href="${productUrl}">${Resource.msg('global.product.morecolors', 'locale', null)}</a>
        </div>
    </isif>
</div>
    
</isif>