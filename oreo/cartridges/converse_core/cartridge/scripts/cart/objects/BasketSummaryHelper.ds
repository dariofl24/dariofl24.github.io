/**
* This helper return a basket summary according to basket passed as argument
*/
importPackage(dw.system);
importPackage(dw.campaign);
importPackage(dw.order);
importPackage(dw.value);
importPackage(dw.util);

importScript("constants.ds");
importScript("common/libNamespace.ds");
importScript("product/ProductUtils.ds");
importScript("cart/objects/BasketSummary.ds");
importScript("promotion/PromotionHelper.ds");
importScript("promotion/PromotionCodeResolver.ds");
importScript("util/SizeUtils.ds");
importScript("util/ViewHelpers.ds");

(function(){

    let CART_OBJ = cart.objects;
    let CURRENCY = converse.constants.CurrencyCode;
    let PMI = converse.constants.PaymentMethodId;
    let SizeUtils = converse.utils.SizeUtils;
    let PromotionHelper = new converse.promotion.PromotionHelper(PromotionMgr);
    let PromotionCodeResolver = new converse.promotion.PromotionCodeResolver(PromotionHelper);
    let ProductType = converse.constants.ProductType;

    let newBucket = function(promoCode : String) : Object {
        return {
                amount: new Money(0, CURRENCY),
                netAmount: new Money(0, CURRENCY),
                taxAmount: new Money(0, CURRENCY),
                shippingNetAmount: new Money(0, CURRENCY),
                shippingGrossAmount: new Money(0, CURRENCY),
                shipmentSummary: new CART_OBJ.ShipmentSummary(),
                promoCode: promoCode,
                giftMessage: "",
                itemCount: 0
            };
    };

    let addBucketToSummary = function(basketSummary, bucket, shippingAddressSummary, productType) {
        if (bucket.itemCount != 0) {
            bucket.shipmentSummary.setUUID(basketSummary.getUUID() + "_" + productType);
            bucket.shipmentSummary.setAmount(bucket.amount);
            bucket.shipmentSummary.setNetAmount(bucket.netAmount);
            bucket.shipmentSummary.setShippingNetAmount(bucket.shippingNetAmount);
            bucket.shipmentSummary.setShippingGrossAmount(bucket.shippingGrossAmount);
            bucket.shipmentSummary.setTaxAmount(bucket.taxAmount);
            bucket.shipmentSummary.setProductType(productType);
            bucket.shipmentSummary.setShippingAddress(shippingAddressSummary);
            bucket.shipmentSummary.setPromoCode(bucket.promoCode);
            bucket.shipmentSummary.setGiftMessage(bucket.giftMessage);

            basketSummary.addShipmentSummary(bucket.shipmentSummary);
        }
    };

    let createShippingMethodSummary = function(shippingMethod : ShippingMethod) : Object {
        let shippingMethodSummary = new CART_OBJ.ShippingMethodSummary();
        shippingMethodSummary.setID(shippingMethod.getID());
        shippingMethodSummary.setGenescoShippingMethodID(shippingMethod.custom.genescoShippingMethodID);
        shippingMethodSummary.setSigmaShippingMethodID(shippingMethod.custom.sigmaShippingMethodID);

        return shippingMethodSummary;
    };

    let setShippingMethodSummary = function(currentBucket, shipment : Shipment) {
        let shippingMethod : ShippingMethod = shipment.getShippingMethod();
        if (shippingMethod == null) {
            return;
        }

        let shippingMethodSummary = createShippingMethodSummary(shippingMethod);
        let productType = shipment.custom.productType;

        switch (productType) {
            case converse.constants.ProductType.C1:
            case converse.constants.ProductType.Regular:
                currentBucket.shipmentSummary.setShippingMethod(shippingMethodSummary);
                break;
            case converse.constants.ProductType.PhysicalGiftCard:
                currentBucket.shipmentSummary.setPGCShippingMethod(shippingMethodSummary);
                break;
            case converse.constants.ProductType.ElectronicGiftCard:
                currentBucket.shipmentSummary.setEGCShippingMethod(shippingMethodSummary);
                break;
        }
    };

    let getItemUnitPrice = function(item : ProductLineItem) {
        return item.getAdjustedNetPrice().divide(item.getQuantity().getValue());
    };

    let getItemGrossUnitPrice = function(item : ProductLineItem) {
        return item.getAdjustedGrossPrice().divide(item.getQuantity().getValue());
    };

    let createItemSummary = function(item : ProductLineItem) : Object {
        let itemSummary : ItemSummary = new CART_OBJ.ItemSummary();
        itemSummary.setSku(item.getProductID());
        itemSummary.setName(item.getProductName());
        itemSummary.setDescription(item.getProductName());
        itemSummary.setUnitPrice(getItemUnitPrice(item));
        itemSummary.setGrossUnitPrice(getItemGrossUnitPrice(item));
        itemSummary.setPrice(item.getAdjustedNetPrice());
        itemSummary.setGrossPrice(item.getAdjustedGrossPrice());
        itemSummary.setQuantity(item.getQuantity().getValue());
        itemSummary.setProductType(item.product.custom.productType.value);
        itemSummary.setPillar(item.product.custom.pillar.value);
        //set custom manufacturerSKU for order export to Genesco when on US site
        //and product has non-empty custom attribute GenescoSKU
        if (isSite('US') && !empty(item.product.custom.GenescoSKU)) {
            itemSummary.setManufacturerSKU(item.product.custom.GenescoSKU);
        } else {
            itemSummary.setManufacturerSKU(item.manufacturerSKU);
        }
        
        if (ProductUtils.isConverseOne(item.product)) {
            itemSummary.setMetricID(item.custom.metricID);
            itemSummary.setPersonalization(item.custom.personalization);
            itemSummary.setDYOImageUrl(item.custom.dyoImageUrl);
            itemSummary.setSize(SizeUtils.transformNikeSize(item.custom.customSize));
        } else {
            itemSummary.setSize(item.product.custom.size);
        }
        
        itemSummary.setGiftCardName(item.custom.giftcardName);
        itemSummary.setGiftCardEmail(item.custom.giftcardEmail);

        return itemSummary;
    };

    let createBasketSummary = function(basket : Basket, includeAddresses : Boolean) : Object {
        let summary = new CART_OBJ.BasketSummary(includeAddresses);

        summary.setUUID(basket.getUUID());
        summary.setAmount(basket.getTotalGrossPrice());
        summary.setShippingNetAmount(basket.getAdjustedShippingTotalNetPrice());
        summary.setShippingGrossAmount(basket.getAdjustedShippingTotalGrossPrice());
        summary.setTaxAmount(basket.getTotalTax());
        summary.setCustomerEmail(basket.getCustomerEmail());

        // TODO: Replace wiht PaymentInstrumentSummary
        summary.setPayPalPaymentInstruments(basket.getPaymentInstruments(PMI.PayPal));
        summary.setCreditCardPaymentInstruments(basket.getPaymentInstruments(PMI.CreditCard));
        summary.setGiftCardPaymentInstruments(basket.getPaymentInstruments(PMI.GiftCard));
        summary.setInvoicePaymentInstruments(basket.getPaymentInstruments(PMI.Invoice));
        
        if(summary.getCreditCardPaymentInstruments().size() > 0){
        	// fix for not sending masked ccnumber to genesco
        	summary.setCreditCardNumber(summary.getCreditCardPaymentInstruments()[0].creditCardNumber);
        }

        return summary;
    };

    let createAddressSummary = function(address : OrderAddress) : Object {
        var addressSummary = null;
        
        if (address != null) {
            addressSummary = new CART_OBJ.OrderAddressSummary();
            addressSummary.setFirstName(address.getFirstName());
            addressSummary.setLastName(address.getLastName());
            addressSummary.setAddress1(address.getAddress1());
            addressSummary.setAddress2(address.getAddress2());
            addressSummary.setCity(address.getCity());
            addressSummary.setState(address.getStateCode());
            addressSummary.setCountry(address.getCountryCode().getValue());
            addressSummary.setPostalCode(address.getPostalCode());
            addressSummary.setPhone(address.getPhone());
        }
        
        return addressSummary;
    };
    
    let canAssignFullDiscountToShipment = function(shipmentMerchandizeAmount, orderLevelDiscountSavings) : Boolean {
        return orderLevelDiscountSavings.multiply(-1) <= shipmentMerchandizeAmount;
    };
    
    let BasketSummaryHelper = {
        getPromotionHelper: function() {
            return PromotionHelper;
        },
        
        getPromotionCodeResolver: function() {
            return PromotionCodeResolver;
        },
        
        getDiscountableMerchandizeAmountForShipment: function(shipmentSummary) : Money {
            let merchandizeAmount : Money = shipmentSummary.getAmount().subtract(shipmentSummary.getShippingNetAmount());
            let discountableMerchandizeAmount : Money = merchandizeAmount.subtract(new Money(1, CURRENCY));
            
            return discountableMerchandizeAmount;
        },
        
        addOrderLevelDiscountsToSummary : function(lineItemContainerSummary, container) {
            let firstShipmentSummary = lineItemContainerSummary.getShipmentSummaryList()[0];
            let firstShipmentMerchandizeAmount : Money = this.getDiscountableMerchandizeAmountForShipment(firstShipmentSummary);
            let orderLevelDiscountSavings : Money = this.getPromotionHelper().getOrderLevelDiscountSavings(container);
         
            if (lineItemContainerSummary.isCombined()) {
                if (canAssignFullDiscountToShipment(firstShipmentMerchandizeAmount, orderLevelDiscountSavings)) {
                    firstShipmentSummary.setOrderDiscountSavings(orderLevelDiscountSavings);
                } else {
                    let discountOverflow : Money = orderLevelDiscountSavings.add(firstShipmentMerchandizeAmount);
                    let secondShipmentSummary = lineItemContainerSummary.getShipmentSummaryList()[1];
                    
                    firstShipmentSummary.setOrderDiscountSavings(firstShipmentMerchandizeAmount.multiply(-1));
                    secondShipmentSummary.setOrderDiscountSavings(discountOverflow);
                }
            } else {
                firstShipmentSummary.setOrderDiscountSavings(orderLevelDiscountSavings);
            }
        },
    
        createLineItemContainerShipments : function(container : LineItemCtnr, summary, shippingAddressSummary) {
            let promoCodes = this.getPromotionCodeResolver().getPromoCodes(container);
            
            let inlineBucket = newBucket(promoCodes[ProductType.Regular]);
            let dyoBucket = newBucket(promoCodes[ProductType.C1]);

            for each(let shipment : Shipment in container.getShipments()) {
                let currentBucket = inlineBucket;

                if (shipment.custom.productType === converse.constants.ProductType.C1) {
                    currentBucket = dyoBucket;
                }

                setShippingMethodSummary(currentBucket, shipment);

                currentBucket.amount = currentBucket.amount.add(shipment.getTotalGrossPrice());
                currentBucket.netAmount = currentBucket.netAmount.add(shipment.getTotalNetPrice());
                currentBucket.taxAmount = currentBucket.taxAmount.add(shipment.getTotalTax());
                currentBucket.shippingNetAmount = currentBucket.shippingNetAmount.add(shipment.getAdjustedShippingTotalNetPrice());
                currentBucket.shippingGrossAmount = currentBucket.shippingGrossAmount.add(shipment.getAdjustedShippingTotalGrossPrice());

                if(shipment.isGift()) {
                    currentBucket.giftMessage = shipment.getGiftMessage();
                }

                for each(let item in shipment.getProductLineItems()){
                    let itemSummary = createItemSummary(item);

                    currentBucket.shipmentSummary.addItemSummary(itemSummary);
                    currentBucket.itemCount++;
                }
            }

            addBucketToSummary(summary, inlineBucket, shippingAddressSummary, converse.constants.ProductType.Regular);
            addBucketToSummary(summary, dyoBucket, shippingAddressSummary, converse.constants.ProductType.C1);
            
            this.addOrderLevelDiscountsToSummary(summary, container);
        },

        getBasketSummary : function(basket : Basket, includeAddresses : Boolean) : Object {
            let basketSummary = createBasketSummary(basket, includeAddresses);
    
            let billingAddressSummary = createAddressSummary(basket.getBillingAddress());
            let shippingAddressSummary = createAddressSummary(basket.getDefaultShipment().getShippingAddress());
                
            basketSummary.setBillingAddress(billingAddressSummary);
            this.createLineItemContainerShipments(basket, basketSummary, shippingAddressSummary);

            return basketSummary;
        },
        
        getAddressSummary: function(address: OrderAddress) : Object {
            return createAddressSummary(address);
        },
        
        getItemSummary: function(item : ProductLineItem) : Object {
            return createItemSummary(item);
        }
    };

    Namespace.extend(cart, { 
        objects: {
            BasketSummaryHelper: BasketSummaryHelper
        }
    });

})();
