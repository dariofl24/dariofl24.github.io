/**
 * CalculateDefaultTax.ds
 *
 * This script determines the tax rates of all line items of the cart
 *
 * The script uses the shipping address associated with a shipment to determine 
 * the tax jurisidiction. If no shipping address is available, the default tax 
 * jurisdiction is used.
 *
 * @input  Basket : dw.order.Basket
 * @input CurrentRequest: dw.system.Request
 */

 importPackage( dw.system );
 importPackage( dw.web );
 importPackage( dw.value );
 importPackage( dw.util );
 importPackage( dw.order );
 importPackage( dw.campaign );
 importPackage( dw.catalog );
 importPackage( dw.customer );
 
 importScript( "converse_core:cart/CartUtils.ds" );
 importScript("converse_core:constants.ds");
importScript("converse_core:util/LocaleInfo.ds");

function execute( pdict : PipelineDictionary ) : Number
{
    calculateTax(pdict);

    return PIPELET_NEXT;
}

/**
 * FUNCTION: calculateTax <p>
 *
 * Determines tax rates for all line items of the basket. Uses the shipping addresses
 * associated with the basket shipments to determine the appropriate tax jurisdiction. 
 * Uses the tax class assigned to products and shipping methods to lookup tax rates. <p>
 *
 * Sets the tax-related fields of the line items. <p>
 *
 * Handles gift certificates, which aren't taxable. <p>
 *
 * Note that the function implements a fallback to the default tax jurisdiction
 * if no other jurisdiction matches the specified shipping location/shipping address.<p>
 *
 * Note that the function implements a fallback to the default tax class if a
 * product or a shipping method does explicitely define a tax class.
 */
function calculateTax(pdict : PipelineDictionary)
{
	var basket : Basket = pdict.Basket;
	
    var shipments : Iterator = basket.getShipments().iterator();
    while(shipments.hasNext())
    {
        var shipment : Shipment = shipments.next();

        // first we reset all tax fields of all the line items
        // of the shipment
        var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
        while(shipmentLineItems.hasNext())
        {
            var lineItem : LineItem = shipmentLineItems.next();
            // do not touch tax rate for fix rate items
            if(lineItem.taxClassID == TaxMgr.customRateTaxClassID)
            {
                lineItem.updateTax(lineItem.taxRate);
            }
            else
            {
                lineItem.updateTax(null);
            }
        }
        
        // identify the appropriate tax jurisdiction
        var taxJurisdictionID : String = null;
        
        // if we have a shipping address, we can determine a tax jurisdiction for it
        if(shipment.shippingAddress != null)
        {
            var location : ShippingLocation = new ShippingLocation(shipment.shippingAddress);
            taxJurisdictionID = TaxMgr.getTaxJurisdictionID(location);
        }else {
        	var location : ShippingLocation = new ShippingLocation();
        	location.setCountryCode(converse.utils.getCurrentCountryCode( pdict.CurrentRequest ));
        	taxJurisdictionID = TaxMgr.getTaxJurisdictionID(location);
        }
        
        if(taxJurisdictionID == null)
        {
            taxJurisdictionID = TaxMgr.defaultTaxJurisdictionID;
        }
        
        // if we have no tax jurisdiction, we cannot calculate tax
        if(taxJurisdictionID == null)
        {
            continue;
        }

        // shipping address and tax juridisction are available
        var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
        while(shipmentLineItems.hasNext())
        {
            var lineItem : LineItem = shipmentLineItems.next();
            var taxClassID : String = lineItem.taxClassID;
            
            Logger.debug("1. Line Item {0} with Tax Class {1} and Tax Rate {2}", lineItem.lineItemText, lineItem.taxClassID, lineItem.taxRate);
            
            // do not touch line items with fix tax rate
            if(taxClassID == TaxMgr.customRateTaxClassID)
            {
                continue;
            }

            // line item does not define a valid tax class; let's fall back to default tax class
            
            if(shipment.productLineItems.contains(lineItem)){
            	
            	if(taxClassID == null && isKidsLineItem(lineItem) )
            	{
                	taxClassID = converse.constants.kidsTaxClass;
                
            	}else {
            		taxClassID = TaxMgr.defaultTaxClassID;
            	}
            	
            }else{
            	taxClassID = TaxMgr.defaultTaxClassID;
            }
            
            

            // if we have no tax class, we cannot calculate tax
            if(taxClassID == null)
            {
                Logger.debug("Line Item {0} has invalid Tax Class {1}", lineItem.lineItemText, lineItem.taxClassID);
                continue;
            }   
        
            // get the tax rate
            taxClassID = "product" in lineItem && lineItem.product.custom.taxExempt ? TaxMgr.taxExemptTaxClassID : taxClassID;
            var taxRate : Number = TaxMgr.getTaxRate(taxClassID, taxJurisdictionID);
            // w/o a valid tax rate, we cannot calculate tax for the line item
            if(taxRate == null)
            {
                continue;
            }               
    
            // calculate the tax of the line item   
            lineItem.updateTax(taxRate);
            Logger.debug("2. Line Item {0} with Tax Class {1} and Tax Rate {2}", lineItem.lineItemText, lineItem.taxClassID, lineItem.taxRate);
        }
    }
    
    CartUtils.updateTaxesForBasketPriceAdjustments(basket);
}

function isKidsLineItem (lineItem : ProductLineItem){
	
	Logger.info("-lineItem.product: "+lineItem.product);
	
	if(lineItem.product != null){
		var product = lineItem.product
		
		if(product.getCustom().gender != null){
			
			if(product.getCustom().gender.value == 'kids' ){
				return true;
			}
		}
		
	}
	
	return false;
}
