importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.order );
importPackage( dw.util );

importScript("converse_core:constants.ds");

function CartUtils() {}

CartUtils.getCartProductSKU = function (basket) {
    var productList = [];
    
    for each  (var product in basket.getAllProductLineItems()) {
        productList.push(product.manufacturerSKU);
    }
    return productList;
}

CartUtils.getAddressList = function(basket, currentCustomer, includeLineItems) {    
    function getAddressObject(addy, plist) {
        var display = addy.ID;
        var key = addy.ID;
        var addyType = "customer";
        if (!empty(plist)) {
            addyType = plist.type;
            var rsc = plist.type==ProductList.TYPE_WISH_LIST ? "wishlist" : "giftregistry"; 
            display = dw.web.Resource.msgf("singleshipping."+rsc, 'checkout', null, plist.owner.profile.firstName);
            key = plist.owner.profile.credentials.login+"??"+addy.ID; 
        }
        
        return {
            UUID : addy.UUID,   
            ID: addy.ID,
            key: key,
            firstName: addy.firstName,
            lastName: addy.lastName,
            address1: addy.address1,
            address2: addy.address2,
            postalCode: addy.postalCode,
            city: addy.city,
            stateCode: addy.stateCode,
            countryCode: addy.countryCode.value,
            phone: addy.phone,
            type: addyType,
            displayValue: display
        };
    }
        
    var al = new ArrayList();
        
    if (CartUtils.empty(basket)) {
        return al;
    }
    
    if (currentCustomer.authenticated && currentCustomer.profile.addressBook.addresses.size() > 0) {
        var addys = currentCustomer.profile.addressBook.addresses;
        for(var i=0,len=addys.length;i<len;i++) {
            al.add(getAddressObject(addys[i], null));
        }
    }   
    if (!includeLineItems) {
        return al;
    }
    
    var lineItems = basket.productLineItems;
    for(var i=0,len=lineItems.length;i<len;i++) {
        var lineItem : ProductLineItem = lineItems[i];
        // if no wish list or registry address items, 
        // or the list owner is the customer, 
        // or the addy is empty, check the next item
        if (empty(lineItem.productListItem) 
            || empty(lineItem.productListItem.list)
            || currentCustomer == lineItem.productListItem.list.owner 
            || empty(lineItem.productListItem.list.shippingAddress)) {
            continue;
        }
        
        // finally...       
        var plist = lineItem.productListItem.list;      
        var addy : CustomerAddress = plist.shippingAddress; 
        
        // build object which can be converted to a json string using JSON.stringify()      
        al.add(getAddressObject(addy, plist));      
    }   
    return al;
};

CartUtils.getProductListAddress = function(id : String, basket, currentCustomer) {
    var addys = CartUtils.getAddressList(basket, currentCustomer);
    if (id in addys) {
        return addys[id];
    }
    for(var i=0,len=addys.length;i<len;i++) {
        if (addys[i].id==id || addys[i].key==id) {
            return addys[i];
        }
    }   
    return {};
};

CartUtils.updateTaxesForBasketPriceAdjustments = function(basket : Basket) {
    if(!basket.getPriceAdjustments().empty || !basket.getShippingPriceAdjustments().empty)
    {
        let basketPriceAdjustmentsTaxRate : Number = 0;
                
        let basketPriceAdjustments : Iterator = basket.getPriceAdjustments().iterator();
        while(basketPriceAdjustments.hasNext())
        {
            let basketPriceAdjustment : PriceAdjustment = basketPriceAdjustments.next();
            basketPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate);
        }

        let basketShippingPriceAdjustments : Iterator = basket.getShippingPriceAdjustments().iterator();
        while(basketShippingPriceAdjustments.hasNext())
        {
            let basketShippingPriceAdjustment : PriceAdjustment = basketShippingPriceAdjustments.next();
            basketShippingPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate);
        }
    }
};

CartUtils.applyTaxes = function(basket : Basket, taxRatePerShipment : Object) {
    for each (let shipment : Shipment in basket.getShipments()) {
        let taxRateInfo = taxRatePerShipment[shipment.custom.productType];
        if (empty(taxRateInfo)) {
            continue;
        }

        for each (let item : ProductLineItem in shipment.getProductLineItems()) {
            if (item.getProduct().getID().toLowerCase() === taxRateInfo.referenceItemSku) {
                item.updateTax(taxRateInfo.taxRate, taxRateInfo.taxBasis);
                break;
            }
        }
    }
};

CartUtils.hasPaymentFailures = function(basket : Basket) : Boolean {
    for each (let paymentInstrument in basket.getPaymentInstruments()) {
        if (paymentInstrument.custom.processingFailed) {
            return true;
        }
    }
    
    return false;
};

CartUtils.clearPaymentFailures = function(basket : Basket) {
    for each (let paymentInstrument in basket.getPaymentInstruments()) {
        paymentInstrument.custom.processingFailed = false;
    }
};

CartUtils.empty = function(basket : Basket) : Boolean {
    return empty(basket) || (empty(basket.productLineItems) && empty(basket.giftCertificateLineItems));
};

CartUtils.notEmpty = function(basket : Basket) : Boolean {
    return !CartUtils.empty(basket);
};

CartUtils.getGenescoShipmentTypes = function(basket : Basket) : ArrayList {
    let PRODUCT_TYPE = converse.constants.ProductType;
    let shipmentTypes : SortedSet = new SortedSet();
    
    for each (let shipment : Shipment in basket.shipments) {
        if (shipment.custom.productType === PRODUCT_TYPE.C1) {
            shipmentTypes.add(PRODUCT_TYPE.C1);
        } else {
            shipmentTypes.add(PRODUCT_TYPE.Regular);
        }
    }
    
    return shipmentTypes;
};

CartUtils.hasRegularItems = function(basket : Basket) : Boolean {
    let PRODUCT_TYPE = converse.constants.ProductType;
    return CartUtils.hasItemsOfType(PRODUCT_TYPE.Regular, basket);
};

CartUtils.hasRegularItemsOnly = function(basket : Basket) : Boolean {
    let PRODUCT_TYPE = converse.constants.ProductType;
    let result = true;
    
    for each (let shipment : Shipment in basket.shipments) {
        if (shipment.custom.productType !== PRODUCT_TYPE.Regular) {
            result = false;
            break;
        }
    }

    return result;
};

CartUtils.hasC1Items = function(basket : Basket) : Boolean {
    let PRODUCT_TYPE = converse.constants.ProductType;
    return CartUtils.hasItemsOfType(PRODUCT_TYPE.C1, basket);
};

CartUtils.hasItemsOfType = function(productType : String, basket : Basket) : Boolean {
    let result = false;
    
    for each (let shipment : Shipment in basket.shipments) {
        if (shipment.custom.productType === productType) {
            result = true;
            break;
        }
    }

    return result;
};

CartUtils.getLastAddedProductLineItem = function(basket : Basket, productType : String) : ProductLineItem {
    let allItems : Collection = basket.getAllProductLineItems();
    
    let lastAddedItem : ProductLineItem;
    let mostRecentDate : Date = new Date(0);
    
    let acceptByProductType = function(lineItem) { 
        return empty(productType) || lineItem.product.custom.productType.value === productType; 
    };
    
    let addedAfter = function(date, lineItem) {
        return date < lineItem.getCreationDate();
    };
    
    for each (let lineItem : ProductLineItem in allItems) {
        if (acceptByProductType(lineItem) && addedAfter(mostRecentDate, lineItem)) {
            lastAddedItem = lineItem;
            mostRecentDate = lineItem.getCreationDate();
        }
    }
    
    return lastAddedItem;
};