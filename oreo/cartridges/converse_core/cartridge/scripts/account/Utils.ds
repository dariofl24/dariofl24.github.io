/**
 * This script provides utility functions shared across other account
 * related scripts. Reused script components for account management 
 * should be contained here, while this script is imported into the 
 * requiring script.
 */
importPackage(dw.customer);
importPackage(dw.order);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);
importPackage(dw.web);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:employee/EmployeeUtils.ds");

/**
 * Determines a unique address ID for an address to be save the given
 * address book. The function first checks the city as the candidate ID 
 * or appends a counter to the city (if already used as address ID) and 
 * checks the existence of the resulting ID candidate. If the resulting 
 * ID is unique this ID is returned, if not the counter is incremented and
 * checked again.
 */
function determineUniqueAddressID( city : String, addressBook : AddressBook )
{
    var counter : Number = 0;
    var existingAddress : CustomerAddress = null;

    // check, if attribute "city" is set and has a value
    if( city == null || empty(city) )
    {
        Logger.debug("Cannot determine unique address ID from non existing or not set attribute \"city\".");
        return null;
    }

    // initialize the candidate ID
    var candidateID : String = city;

    while( existingAddress == null )
    {
        existingAddress = addressBook.getAddress(candidateID);
        if( existingAddress != null )
        {
            // this ID is already taken, increment the counter 
            // and try the next one
            counter++;
            candidateID = city + "-" + counter;
            existingAddress = null;
        }
        else
        {
            return candidateID;
        }
    }

    // should never go here
    return null;
}

/**
 * Returns a possible equivalent address to the given order address from the 
 * address book or null, if non equivalent address was found.
 */
function getEquivalentAddress(addressBook : AddressBook, orderAddress : OrderAddress) : CustomerAddress
{
    var address : CustomerAddress = null;
    for each(address in addressBook.addresses)
    {
        if(address.isEquivalentAddress(orderAddress))
        {
            return address;
        }
    }
    return null;
}

function isEmployee(customer : Customer) : Boolean {
    return customer.isAuthenticated() && converse.employee.EmployeeUtils.isEmployee(customer.profile);
}

function isSiteUser(customer : Customer) : Boolean {
    return customer.isAuthenticated() && customer.profile.custom.lastLoginType.value === converse.constants.LoginType.SITE;
}

function isSocialUser(customer : Customer) : Boolean {
    return customer.isAuthenticated() && customer.profile.custom.lastLoginType.value === converse.constants.LoginType.SOCIAL;
}

function getFullName(profile : Profile) : String {
    var fullName : String = "";
    
    if (!empty(profile.firstName)) {
        fullName += profile.firstName;
        
        if (!empty(profile.lastName)) {
            fullName += " " + profile.lastName;
        }
    }
    
    return fullName;
}

function getUsernameFromEmail(email : String) : String {
    return empty(email) ? "" : email.slice(0,email.indexOf("@"));
}

function getCustomerUsername(customer : Customer, defaultUsername : String) : String {
    var username : String = "";
    
    var profile : Profile = customer.getProfile();
    if (!empty(profile)) {
        username = getFullName(profile);
        
        if (empty(username)) {
            username = getUsernameFromEmail(profile.getEmail());
        }
    }
    
    if (empty(username) && !empty(defaultUsername)) {
        username = defaultUsername;
    }
    
    return username;
}

function getCustomerThumbnailURL(customer : Customer) : String {
    return getProtocolNeutralCustomerImageURL(customer, "profile.custom.thumbnailURL");
}

function getCustomerPhotoURL(customer : Customer) : String {
    return getProtocolNeutralCustomerImageURL(customer, "profile.custom.photoURL");
}

function getProtocolNeutralCustomerImageURL(customer, urlAttribute) : String {
    var result = null;
    if (isSocialUser(customer)) {
        var url = Lang.getObjectProperty(customer, urlAttribute);
        result = Lang.toProtocolNeutralURL(url);
    }
    return result;
}
