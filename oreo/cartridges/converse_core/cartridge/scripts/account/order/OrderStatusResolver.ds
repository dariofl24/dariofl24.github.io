importPackage(dw.system);
importPackage(dw.object);
importPackage(dw.order);
importPackage(dw.util);
importPackage(dw.web);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:product/ProductUtils.ds");
importScript("converse_core:util/ViewHelpers.ds");

importScript("converse_featuretoggle:lib/FeatureToggleService.ds");

if (isSite('US')) {
    importScript("int_sigma:orderstatus/services/SigmaOrderStatusService.ds");
}

(function(){

    var getNikeStatesMap = function() : Map {
        var map : Map = new HashMap();
        var iter : SeekableIterator = null;
        
        try {
            iter = CustomObjectMgr.getAllCustomObjects("NikeOrderState");
            
            while (iter.hasNext()) {
                var state : CustomObject = iter.next();
                map.put(state.custom.ID, state);
            }
        } finally {
            if (iter) {
                iter.close();
            }
        }

        return map;
    };

    var OrderStatusResolver = Class.extend({

        init: function(order : Order) {
            this.order = order;
            this.nikeStatesMap = getNikeStatesMap();
            this.dyoStatusEnabled = converse.featuretoggle.FeatureToggleService.getFeature("dyo-status").isEnabled();
        },

        resolveOrderStatus: function() {
        	if (isSite('US')) {
                // Sigma order status is retrieved every time (unlike Nike order status that comes as a feed).
                //This is relevant only to US site, though. EMEA has all relevant data set on Order/Shipment/ProductLineItem
                this.applySigmaOrderStatus();
        	}

            for each (let shipment : Shipment in this.order.getShipments()) {
                for each (let item : ProductLineItem in shipment.getProductLineItems()) {
                    var itemStatus : String =  null;
                    if (!ProductUtils.isConverseOne(item.product)) {
                        //inline product
                        itemStatus = this.getItemStatus(item);
                    } else {
                        //DYO product
                        var lastNikeStatus : String = this.getLastNikeItemStatus(item);
                        itemStatus = this.getLocalizedNikeStatusMessage(lastNikeStatus);
                        var trackingNumber = this.getTrackingNumber(lastNikeStatus);
                        if (!empty(trackingNumber)) item.custom.itemTrackingNumber = this.getTrackingNumber(lastNikeStatus);
                    }
                    item.setExternalLineItemStatus(itemStatus);
                }
            }
        },

        applySigmaOrderStatus: function() {
            let SigmaOrderStatusService = integration.sigma.orderstatus.SigmaOrderStatusService;
            
            SigmaOrderStatusService.applyOrderStatus(this.order);
        },
        
        getItemStatus: function(item : ProductLineItem) : String {
        	let itemStatus : String = null;
            if (isSite('US')) {
                itemStatus = this.getSigmaItemStatus(item);

                if (empty(itemStatus)) {
                    itemStatus = this.getDefaultItemStatus();
                }
            } else {
                if (empty(item.custom.productStatus) || empty(item.custom.productStatus.value)) {//need to treat Enum property this way
                    itemStatus = this.getDefaultItemStatus();
                } else {
                	itemStatus = item.custom.productStatus.value;
                }
            }

            return itemStatus;
        },
        //this function will return null if dyo-status feature toggle is off
        getLastNikeItemStatus: function(item : ProductLineItem) : String {
            if (!this.dyoStatusEnabled) {
                return null;
            }
            
            let nikeStatuses : Array = item.custom.nikeLineItemStatus;

            if (!empty(nikeStatuses)) {
                let lastNikeStatusJson : String = nikeStatuses[nikeStatuses.length - 1];
                let lastNikeStatus : Object = JSON.parse(lastNikeStatusJson);
                
                return lastNikeStatus;
            }

            return null;
        },

        getLocalizedNikeStatusMessage: function(lastNikeStatus : Object) : String {
           if (empty(lastNikeStatus)) {
                return this.getDefaultNikeStatus();
           }
           var lastNikeStatusState : CustomObject = this.nikeStatesMap.get(lastNikeStatus.newStateID);
           var statusKey = lastNikeStatusState.custom.name.toLowerCase();
           var localizedStatus = Resource.msg('dyo.status.'+statusKey, 'dyo', null);
           return localizedStatus;
        },

        getSigmaItemStatus: function(item : ProductLineItem) : String {
            return item.custom.sigmaLineItemStatus;
        },
        
        getDefaultItemStatus: function() : String {
	        return this.isOrderDelayed() ? Resource.msg('order.status.delayed', 'customerservice', null) : Resource.msg('order.status.inprocess', 'customerservice', null);
        },
        
        getDefaultNikeStatus: function() : String {
            return this.isOrderDelayed() ? Resource.msg('dyo.status.factory_delayed', 'dyo', null) : Resource.msg('dyo.status.initial', 'dyo', null);
        },

        getTrackingNumber : function(lastNikeStatus : Object) {
            let trackingNumber : String = null;

            if (!empty(lastNikeStatus) && !empty(lastNikeStatus.packageID)) { 
                trackingNumber = lastNikeStatus.packageID;
            }

            return trackingNumber;
        },

        isOrderDelayed: function() : Boolean {
            let created : Date = this.order.getCreationDate();
            let now : Date = new Date();
            let daysDiff : Number = Lang.diffDays(now, created);

            return daysDiff > converse.constants.OrderDelayThresholdInDays;
        }

    });

    var ns = Namespace.extendFromString(converse, "account.order");
    Namespace.extend(ns, { OrderStatusResolver: OrderStatusResolver });
})();
