importPackage(dw.system);
importPackage(dw.object);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:common/libNamespace.ds");

(function(){
    
    function getTemplateCustomObject(customObjectType : String) : CustomObject {
        var templateCustomObjectKey : String = generateTemplateCustomObjectKey(customObjectType);
    
        var templateCustomObject : CustomObject = CustomObjectMgr.getCustomObject(customObjectType, templateCustomObjectKey);
        
        if (empty(templateCustomObject)) {
            try {
                templateCustomObject = CustomObjectMgr.createCustomObject(customObjectType, templateCustomObjectKey);
            }
            catch(ex) {
                if (isDuplicateKeyException(ex)) {
                    templateCustomObject = CustomObjectMgr.getCustomObject(customObjectType, templateCustomObjectKey);
                }
                else {
                    throw ex;
                }
            }
        }
        
        return templateCustomObject;
    }
    
    function generateTemplateCustomObjectKey(customObjectType : String) : String {
        return customObjectType + "Template";
    }
    
    function isDuplicateKeyException(ex) : Boolean {
        return ex.toString().toLowerCase().indexOf('key is not unique') >= 0;
    }
    
    function getCustomAttributeDefinition(extObject : ExtensibleObject, attributeName : String) : ObjectAttributeDefinition {
        var typeDef : ObjectTypeDefinition = extObject.describe();
        
        var attributeDef : ObjectAttributeDefinition = typeDef.getCustomAttributeDefinition(attributeName);
        
        if (empty(attributeDef)) {
            throw new Error(StringUtils.format("No custom attribute definition with name \"{0}\" found", attributeName));
        }
    
        return attributeDef;
    }
    
    function getCustomAttributeDefinitionValues(extObject : ExtensibleObject, attributeName : String) : Collection {
        var attributeDef : ObjectAttributeDefinition = getCustomAttributeDefinition(extObject, attributeName);
        
        return attributeDef.getValues();
    }
    
    Namespace.extend(converse, { 
        object: {
            ObjectUtils: {
            	getTemplateCustomObject: getTemplateCustomObject,
                getCustomAttributeDefinition: getCustomAttributeDefinition,
                getCustomAttributeDefinitionValues: getCustomAttributeDefinitionValues
            }
        }
    });

})();
