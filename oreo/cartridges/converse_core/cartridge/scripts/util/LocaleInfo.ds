    importPackage(dw.system);
importPackage( dw.util );
importPackage( dw.customer );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

(function() {
    
    var localization = converse.constants.localization;
    var allSites = getSitesAvailable();
    
    var siteNameNormalizedTargetRegex = new RegExp("([C|c]onverse [A-Z]{2})");
    var siteNameNormalizedNotAllowedCharsRegex = new RegExp("[^A-Za-z0-9 ]");
    var siteNameRegex = new RegExp("(converse\-)([A-Za-z]{2})");
    var DATEF_REGEX = new RegExp (/^(0?[1-9]|[12][0-9]|3[01])[\/](0?[1-9]|1[012])[\/]\d{4}$/);

    function getLocaleInfo(site, locale) {
        if ((site in localization) && (locale in localization[site])) {
            return localization[site][locale];
        }
        return null;
    }

    function getAllLocaleInfo() {
        var urlList = [];

        for each (var site in allSites) {
            var siteID = site.getID();
            var allowedLocales = site.getAllowedLocales();

            if (!(siteID in localization)) {
                continue;
            }

            for each (var locale in allowedLocales) {
                var siteInfo = localization[siteID];
                siteInfo[locale]['siteID'] = siteID;
                urlList.push(siteInfo[locale]);
            }
        }

        return urlList;
    }
    
    function getLocalizedCountryName(siteID : String, locale : String) : String {
        var localeInfo = getLocaleInfo(siteID, locale);
        if (localeInfo) {
            return localeInfo.country.name;
        }
        return null;
    }
    
    function createLocationURL(siteID : String, 
                           locale : String, 
                           pipeline : String,
                           redirectQueryString : String,
                           queryString : String) : String {

        var urlAction : dw.web.URLAction = new dw.web.URLAction(pipeline, siteID, locale);
        var url = dw.web.URLUtils.abs(urlAction).toString();
        
        var params = (!empty(redirectQueryString) ? redirectQueryString : '');
    
        if (!empty(queryString)) {
            params = params + (empty(redirectQueryString) ? '?' : "&") + queryString;
        }
        
        return url.concat(params);
    }
    
    function getLocaleCountry(locale : String) : String {
        if (empty(locale)) {
            return null;
        }
        var country : String = locale.substring(3, 5).toLowerCase();
    
        if (locale.equalsIgnoreCase("default")) {
            country = "us";
        }
        if (country == "gb") {
            country = "uk";
        }
        return country;
    }
    
    function getCanonicalLink(locale : String) : String {
        
        var countryCode : String = getLocaleCountry(locale);
        var currentLanguage :String = getLocaleLanguage(locale);
        var defaultLang : String = getLocaleLanguage(Site.getCurrent().getDefaultLocale());
        var country_lang : String; 
        
        var urlAction : dw.web.URLAction = new dw.web.URLAction("Default-Start");
        var params = dw.web.URLUtils.url(urlAction).toString();
        var country_lang = dw.web.URLUtils.http(urlAction).toString();
        
        country_lang = country_lang.replace(params, "/" + countryCode);
        
        if (currentLanguage !== defaultLang) {
            country_lang = country_lang.concat("/", currentLanguage, "/go");
        }
        
        return country_lang;
    }
    
    
    /**
    *   gets the language code of the passed locale  
    */
    function getLocaleLanguage(locale : String) : String {
    	if (empty(locale)) {
            return null;
        }
        var langCode : String = locale.substring(0, 2);
    
        if (locale.equalsIgnoreCase("default")) {
            langCode = "en";
        }
        return langCode;
    }
    
    /**
    *   gets sites available, using custom preference.  
    */
    function getSitesAvailable() {
        var sites = Site.getAllSites();
        var sitesAvailable = new ArrayList(); 
        
        for each (s in sites) {
            var sitePrefs : SitePreferences = s.getPreferences();
            var isAvailable : Booelan = sitePrefs.getCustom()["availability"];
            if (isAvailable) {
                sitesAvailable.add(s);
            }
        }
        
        return sitesAvailable;
    }
    
    /**
    *
    */
    function getSitesOnline() {
        var sites = Site.getAllSites();
        var sitesOnline = new ArrayList(); 
        
        for each (s in sites) {
            if (s.status === Site.SITE_STATUS_ONLINE || s.status === Site.SITE_STATUS_PROTECTED ) {
                sitesOnline.add(s.getID());
            }
        }
        
        return sitesOnline;
    }
    
    /**
     * gets the Site ID based on the Country Code. Returns the first Site ID found in Localization
     * that matches the Country Code.
     */
     function getSiteIDByCountryCode( countryCode: String ){
     	if (empty(countryCode)) {
     	  return null;
     	}
     	
        for each (var siteKey in Object.keys( localization ) ) {
        	var site = localization[siteKey];
            for each (var localeKey in Object.keys( site ) ) {
            	var locale = site[localeKey];
            	if( locale.hasOwnProperty('country') && locale.country.hasOwnProperty('code') ){
            	   var currentCountryCode = locale['country']['code'];
            	   if( currentCountryCode == countryCode ) {
            	       return siteKey;
            	   }
            	}
            	
                
            }
        }
        
        return null;
     }
     
     /**
      * Gets the current ISO3166_1 Alpha2Code country based on the Locale from CurrentRequest
      */
     function getCurrentCountryCode( currentRequest ) {
        if( currentRequest != null ) {
            var currentLocale = currentRequest.getLocale();
            return converse.utils.getCountryCodeByLocale( currentLocale );
        }
        
        return null;
     }
     
     function getCountryForAddressOBJ(address){
     	var countryCode = address.countryCode;
     	
     	if(countryCode != null && countryCode.length >0){
     		return countryCode;
     	}
     	
     	return getDefaultcountryforSite(Site.current);
     }
     
     function getCountryForAddress(address){
     	var countryCode = address.countryCode.value;
     	
     	if(countryCode != null && countryCode.length >0){
     		return countryCode;
     	}
     	
     	return getDefaultcountryforSite(Site.current);
     }
     
     function getDefaultcountryforSite(site){
     	var obj= localization[site.getID()];
     	
     	return obj['defaultCC'];
     }
     
     /**
      * Gets the current ISO3166_1 Alpha2Code country based on the Locale
      */
     function getCountryCodeByLocale( currentLocale ) {
        
        for each (var siteKey in Object.keys( localization ) ) {
        var site = localization[siteKey];
            for each (var localeKey in Object.keys( site ) ) {
                if( localeKey == currentLocale ) {
                   var locale = site[localeKey];
                   return locale['country']['code'];
                }
                
            }
        }
        
        return null;
     }
     
     function getCustomerStoredAddressesLimit(site) {
     	
     	var locale = localization[site.getID()];
     	
     	return locale.storedAddressesLim || converse.constants.MaxAddressCount;
     }
     
    function getDomain( ) 
	{
	    var hostName = dw.system.Site.getCurrent().getHttpHostName();
	    if( hostName.indexOf("demandware.net") >= 0 )
	    {
	        hostName = hostName.replace("-",".","g");
	    }
	    
	    return hostName;
	}
	
	function normalizeSiteName( siteName : String )
	{
		if( empty(siteName) )
		{
			return siteName;
		}
		
		var normalizedSiteName = null;
		
		var normalizedSiteNameMatches: Array = siteName.match(siteNameNormalizedTargetRegex);
		
		if( normalizedSiteNameMatches !== null && normalizedSiteNameMatches.length > 1 )
		{
		    normalizedSiteName = normalizedSiteNameMatches[1];
		} else {
		    normalizedSiteName = siteName.replace(siteNameNormalizedNotAllowedCharsRegex, "");
		}
		
		
		return normalizedSiteName
	}
	
	function getLocaleDateFormat(currentRequest){
		
		var date = dw.util.StringUtils.formatCalendar(new dw.util.Calendar(),currentRequest.getLocale(), dw.util.Calendar.INPUT_DATE_PATTERN);

		var date_format = "";
		var date_separator = "";

		if(DATEF_REGEX.test(date.toString())){
			
			date_format = "dd/mm/yy";
			date_separator = "/";
			
		} else {
			date_format = "dd.mm.yy";
			date_separator = ".";
		}
		
		return {
			dateFormat: date_format,
			dateSeparator:date_separator
		};
	}

    Namespace.extend(converse, {
        utils: {
            getLocaleInfo: getLocaleInfo,
            getAllLocaleInfo: getAllLocaleInfo,
            getLocalizedCountryName: getLocalizedCountryName,
            createLocationURL: createLocationURL,
            getCanonicalLink: getCanonicalLink,
            getLocaleLanguage: getLocaleLanguage,
            getSitesAvailable: getSitesAvailable,
            getSitesOnline: getSitesOnline,
            getLocaleCountry: getLocaleCountry,
            getLocaleDateFormat: getLocaleDateFormat,
            getSiteIDByCountryCode : getSiteIDByCountryCode,
            getCurrentCountryCode : getCurrentCountryCode,
            getDefaultcountryforSite : getDefaultcountryforSite,
            getCustomerStoredAddressesLimit:getCustomerStoredAddressesLimit,
            getCountryForAddress : getCountryForAddress,
            getCountryForAddressOBJ : getCountryForAddressOBJ,
            getCountryCodeByLocale : getCountryCodeByLocale,
            getDomain : getDomain,
            normalizeSiteName : normalizeSiteName
        }
    });
})();