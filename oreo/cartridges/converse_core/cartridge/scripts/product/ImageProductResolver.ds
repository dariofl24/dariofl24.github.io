importPackage(dw.system);
importPackage(dw.catalog);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

(function() {

    var ImageProductResolutionStrategy = Class.extend({
        
        resolve: function(product : Product, variationModel : ProductVariationModel) : Object {
            throw new Error("Missing method 'resolve'.");
        }
        
    });
    
    var ColorImageProductResolutionStrategy = ImageProductResolutionStrategy.extend({

        resolve: function(product : Product, variationModel : ProductVariationModel) : Object {
            var colorVariationAttribute : ProductVariationAttribute = variationModel.getProductVariationAttribute('color');
            return colorVariationAttribute ? variationModel.getSelectedValue(colorVariationAttribute) : null;
        }
        
    });
    
    var VariantBasedImageProductResolutionStrategy = ImageProductResolutionStrategy.extend({
        
        init: function(checkOrderable) {
            this.checkOrderable = checkOrderable;
        },
        
        isVariantOrderable: function(variant : Variant) : Boolean {
            return !empty(variant) && (variant.getAvailabilityModel().isOrderable() || !this.checkOrderable);
        }
        
    });
    
    var DefaultVariantImageProductResolutionStrategy = VariantBasedImageProductResolutionStrategy.extend({
        
        resolve: function(product : Product, variationModel : ProductVariationModel) : Object {
            var defaultVariant : Variant = variationModel.getDefaultVariant(); 
            return this.isVariantOrderable(defaultVariant) ? defaultVariant : null;
        }
        
    });
    
    var VariantsImageProductResolutionStrategy = VariantBasedImageProductResolutionStrategy.extend({

        resolve: function(product : Product, variationModel : ProductVariationModel) : Object {
            var it : Iterator = variationModel.getVariants().iterator();
            while (it.hasNext()) {
                let variant = it.next();
                if (this.isVariantOrderable(variant)) {
                    return variant;
                }
            }
            
            return null;
        }
        
    });
    
    var IMAGE_PRODUCT_RESOLUTION_STRATEGIES : Array = [
        new ColorImageProductResolutionStrategy(),
        new DefaultVariantImageProductResolutionStrategy(true),
        new VariantsImageProductResolutionStrategy(true),
        new DefaultVariantImageProductResolutionStrategy(false),
        new VariantsImageProductResolutionStrategy(false)
    ];

    function getImageProduct(product : Product, variationModel : ProductVariationModel) : Object {
        var imageProduct = null;
        
        if (product.master && variationModel) {
            for each (let strategy in IMAGE_PRODUCT_RESOLUTION_STRATEGIES) { 
                imageProduct = strategy.resolve(product, variationModel);
                if (!empty(imageProduct)) {
                    break;
                }
            }
        }
        
        if (empty(imageProduct)) {
            imageProduct = product;
        }
        
        return imageProduct;
    }

    Namespace.extend(converse, { 
        product: {
            ImageProductResolver: {
                getImageProduct: getImageProduct
            }
        }
    });

})();
