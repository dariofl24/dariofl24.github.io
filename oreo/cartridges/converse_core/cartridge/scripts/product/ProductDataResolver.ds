importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.web );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:util/ViewHelpers.ds");

importScript("converse_core:product/ProductUtils.ds");

(function() {
    let SizeChartSortWeights = [
            { chart: converse.constants.SizeChart.Standard,    weight : 5 },
            { chart: converse.constants.SizeChart.Chuck,       weight : 6 },
            { chart: converse.constants.SizeChart.Jack,        weight : 7 },
            { chart: converse.constants.SizeChart.Womens,      weight : 8 },
            { chart: converse.constants.SizeChart.Mens,        weight : 9 },
            { chart: converse.constants.SizeChart.Unisex,      weight : 10 },
            { chart: converse.constants.SizeChart.KidsNewborn, weight : 1 },
            { chart: converse.constants.SizeChart.KidsToddler, weight : 2 },
            { chart: converse.constants.SizeChart.KidsYouth,   weight : 3 },
            { chart: converse.constants.SizeChart.KidsExtyouth, weight : 4 },
        ];
        
    let getVariantsForColorAndAnySize = function(colorAttrVal, productVariationModel : ProductVariationModel) : ArrayList {
        let allSizeValues = productVariationModel.getAllValues(productVariationModel.getProductVariationAttribute("size"));
        let filteredSizeVariants = new ArrayList();

        for each (let sizeValue in allSizeValues) {
            let filters = new HashMap();
            filters.put("color", colorAttrVal.ID);
            filters.put("size", sizeValue.ID);

            let variants = productVariationModel.getVariants(filters);
            if (!empty(variants)) {
                filteredSizeVariants.add({ sizeValue: sizeValue, variant: variants[0] });
            }
        }

        return filteredSizeVariants;
    }

    let getAvailableVariantsForColor = function(colorAttrVal, productVariationModel : ProductVariationModel) : ArrayList {
        let filteredVariants = new ArrayList();

        let filters = new HashMap();
        filters.put("color", colorAttrVal.ID);

        let variants = productVariationModel.getVariants(filters);
        if (!empty(variants)) {
            for each(let variant in variants) {
                if (variant.availabilityModel.orderable) {
                    filteredVariants.add(variant);
                }
            }
        }

        return filteredVariants;
    }

    let getVariantsForColor = function(colorAttrVal, productVariationModel : ProductVariationModel) : ArrayList {
        let allSizeValues = productVariationModel.getAllValues(productVariationModel.getProductVariationAttribute("size"));
        let allSizeChartValues = productVariationModel.getAllValues(productVariationModel.getProductVariationAttribute("sizeChart"));

        let filteredVariants = new ArrayList();
        
        for each (let sizeValue in allSizeValues) {
            for each (let sizeChartValue in allSizeChartValues) {
                let filters = new HashMap();
                filters.put("color", colorAttrVal.ID);
                filters.put("size", sizeValue.ID);
                filters.put("sizeChart", sizeChartValue.ID);

                let variants = productVariationModel.getVariants(filters);
                if (!empty(variants)) {
                    filteredVariants.add(variants[0]);
                }
            }
        }

        return filteredVariants;
    }

    let addColorVariationInfo = function(variantsInfo, product, productVariationModel, sizeVariantsForColor) : ArrayList {
        let result = new ArrayList();

        let colorVarAttr = productVariationModel.getProductVariationAttribute("color");
        let selectedColorAttribute = ProductUtils.getVariationAttribute(product, 'color');
        let masterVariationModel = product.isVariant() ? product.masterProduct.variationModel : product.variationModel;
        
        for each (let attributeValue in productVariationModel.getAllValues(colorVarAttr)) {
            let variantForColor = ProductUtils.getVariantForColor(product.masterProduct, attributeValue.ID);
            if (!empty(variantForColor)) {

                let variantInfo = {
                    selected: !empty(selectedColorAttribute) && attributeValue.value === selectedColorAttribute.value,
                    displayValue: empty(attributeValue.displayValue) ? attributeValue.value : attributeValue.displayValue,
                    variant: variantForColor,
                    mainColorHex: variantForColor.custom.mainColorHex
                };

                variantInfo.linkToVariant = ProductUtils.getUrlForColorVariant(masterVariationModel, colorVarAttr, attributeValue);

                result.add(variantInfo);
            }
        }

        variantsInfo.colorVariationInfos = result;
    }

    let addSizeVariationInfo = function(variantsInfo, product, productVariationModel) : ArrayList {
        let colorAttrVal = ProductUtils.getVariationAttribute(product, 'color');
        let sizeVariantsForColor = getVariantsForColorAndAnySize(colorAttrVal, productVariationModel);

        let result = new ArrayList();

        let sizeChart = ProductUtils.getSizeChart(product);
        let sizeVarAttr = productVariationModel.getProductVariationAttribute("size");
        let selectedSizeValue = ProductUtils.getVariationAttributeValue(product, 'size');
        let originallySelectedSizeNotAvailable = false;
        
        for each (let variantInfo in sizeVariantsForColor) {
            let variantSizeChartVal = ProductUtils.getVariationAttributeValue(variantInfo.variant, 'sizeChart');

            let hideSize = ProductUtils.hideSize(variantInfo.sizeValue.value, variantSizeChartVal);

            let _linkToVariant;
            if (productVariationModel.getSelectedVariant()==null) {
                //when we have a default variant on the PDP, it is not reflected in productVariationModel as selected
                //productVariationModel.urlSelectVariationValue() in ProductUtils won't work correclty b/c it doesn't know
                //that the color for default variantion was 'selected' and won't add it to the resulting URL
                _linkToVariant = productVariationModel.url('Product-Variation', 'color', colorAttrVal, sizeVarAttr, variantInfo.sizeValue); 
            } else {
			    _linkToVariant = ProductUtils.getUrlForSelectedVariationValue(productVariationModel, sizeVarAttr, variantInfo.sizeValue);
            }
            let sizeVariationInfo = {
                sizeChartValue: variantSizeChartVal,
                selectedByAttribute: !empty(selectedSizeValue) && variantInfo.sizeValue.value === selectedSizeValue,
                selected: false,
                orderable: variantInfo.variant.availabilityModel.orderable,
                linkToVariant: _linkToVariant,
                variant: variantInfo.variant
            };

            sizeVariationInfo.displayValue = (sizeChart && sizeChart.containsSize(variantInfo.sizeValue.value))
                ? sizeChart.getSizeDisplayValue(variantInfo.sizeValue.value)
                : variantInfo.sizeValue.displayValue;

            if (!hideSize) {
                result.add(sizeVariationInfo);
            }

            if (sizeVariationInfo.selectedByAttribute && (!sizeVariationInfo.orderable || hideSize)) {
                originallySelectedSizeNotAvailable = true;
            }
        }

        variantsInfo.sizeVariationInfos = result;
        variantsInfo.originallySelectedSizeNotAvailable = originallySelectedSizeNotAvailable;
    }

    let findSizeChartSortWeight = function(sizeChartValue) {
        for each(let weightGroup in SizeChartSortWeights) {
            if (weightGroup.chart === sizeChartValue) {
                return weightGroup.weight;
            }   
        }

        return 0;
    }
    
    let addSizeVariationWithAgeRangeInfo = function(variantsInfo, product, productVariationModel) : ArrayList {
        let result = new ArrayList();
        let originallySelectedSizeNotAvailable = false;

        let sizeVarAttr = productVariationModel.getProductVariationAttribute("size");
        let sizeChartVarAttr = productVariationModel.getProductVariationAttribute("sizeChart");
        let imageVariationVarAttr = productVariationModel.getProductVariationAttribute("image-variation");
        
        let selectedSizeValue = ProductUtils.getVariationAttributeValue(product, 'size');
        let selectedSizeChartValue = ProductUtils.getVariationAttributeValue(product, 'sizeChart');
        let selectedColorAttrVal = ProductUtils.getVariationAttribute(product, 'color');

        let availableVariants = getVariantsForColor(selectedColorAttrVal, productVariationModel);
        
        for each (let availableVariant in availableVariants) {
            let variantColor = ProductUtils.getVariationAttribute(availableVariant, 'color');
            let variantSize = ProductUtils.getVariationAttribute(availableVariant, 'size');
            let variantSizeChart = ProductUtils.getVariationAttribute(availableVariant, 'sizeChart');
            let variantImageVariation = ProductUtils.getVariationAttribute(availableVariant, 'image-variation');

            let variantSizeVal = ProductUtils.getVariationAttributeValue(availableVariant, 'size');
            let variantSizeChartVal = ProductUtils.getVariationAttributeValue(availableVariant, 'sizeChart');
            
            let hideSize = ProductUtils.hideSize(variantSizeVal, variantSizeChartVal);

            let linkWithSizeAndChart = ProductUtils.getUrlForSize(productVariationModel, variantColor, variantSize, variantSizeChart, variantImageVariation);

            let variationInfo = {
                sizeValue: variantSizeVal,
                sizeChartValue: variantSizeChartVal,
                selectedByAttribute: (!empty(selectedSizeValue)) && (!empty(selectedSizeChartValue)) && (variantSizeVal === selectedSizeValue) && (variantSizeChartVal === selectedSizeChartValue),
                selected: false,
                orderable: availableVariant.availabilityModel.orderable,
                linkToVariant: linkWithSizeAndChart,
                variant: availableVariant,
                sizeChartWeight: findSizeChartSortWeight(variantSizeChartVal)
            };

            let sizeChart = ProductUtils.getSizeChart(availableVariant);
            variationInfo.displayValue = (sizeChart && sizeChart.containsSize(variantSizeVal))
                ? sizeChart.getSizeDisplayValue(variantSizeVal)
                : variantSizeVal.displayValue;

            variationInfo.sizeWeight = sizeChart.getWeightOfSizeInSizeChart( variationInfo.sizeValue );

            if (!hideSize) {
                result.add(variationInfo);
            }

            if (variationInfo.selectedByAttribute && (!variationInfo.orderable || hideSize)) {
                originallySelectedSizeNotAvailable = true;
            }

        }

        result.sort(new PropertyComparator('+sizeChartWeight','+sizeWeight'));

        variantsInfo.sizeVariationInfos = result;
        variantsInfo.originallySelectedSizeNotAvailable = originallySelectedSizeNotAvailable;
    }

    let ensureOrderableVariantSelected = function(variantsInfo, productVariationModel) {
        let sizeVarAttr = productVariationModel.getProductVariationAttribute("size");

        let shouldLookForNextOrderableVariant = variantsInfo.originallySelectedSizeNotAvailable;
        let orderableVariantFound = false;
        let outOfStockVariant = null;
        let comingSoon = false;

        for each (let variantInfo in variantsInfo.sizeVariationInfos) {
        	
        	if(variantInfo.variant){
        		if(variantInfo.variant.custom.comingSoon){
        			
        			comingSoon= ProductUtils.isDateAfterNowColorVar(variantInfo.variant.custom.comingSoon);
        		}	
        	}
        	
            if (shouldLookForNextOrderableVariant && variantInfo.orderable) {
                orderableVariantFound = true;
            }
            else if (variantInfo.selectedByAttribute && variantInfo.orderable) {
                orderableVariantFound = true;
            } 
            else if (variantInfo.selectedByAttribute && !variantInfo.orderable) {
                shouldLookForNextOrderableVariant = true;
            }
            else {
                continue;
            }

            if (orderableVariantFound || comingSoon) {
                variantInfo.selected = true;
                variantsInfo.variantToDisplay = variantInfo.variant;

                break;
            }

            if (variantInfo.variant.custom.showIfOutOfStock) {
                outOfStockVariant = variantInfo.variant;
            }
        }
       
        if(!orderableVariantFound && !comingSoon){
            variantsInfo.sizeVariationInfos[0].selectedByAttribute = false;
            variantsInfo.variantToDisplay = empty(outOfStockVariant) ? productVariationModel.defaultVariant : outOfStockVariant;
            variantsInfo.outOfStock = true;
        } 
        
        variantsInfo.comingSoon = comingSoon;
        
    }

    let isVariableByAgeRange = function(product: Product) {
        return ProductUtils.isKidsSneaker(product) || 
               ProductUtils.isKidsApparel(product);
    }

    let displayPriceRange = function(product: Product, variantsInfo) {
        let result = false;

        if (product.master && variantsInfo.minPrice && variantsInfo.maxPrice) {
            result = variantsInfo.minPrice.compareTo(variantsInfo.maxPrice) < 0;
        }

        return result;
    }

    let getStandartPrice = function(priceModel) {
        let standardPrice = null;
        if (('listPriceDefault' in dw.system.Site.current.preferences.custom) && !empty(dw.system.Site.current.preferences.custom.listPriceDefault)) {
            standardPrice = priceModel.getPriceBookPrice(dw.system.Site.current.preferences.custom.listPriceDefault);
        } else {
            standardPrice = priceModel.getPriceBookPrice('list-prices');
        }

        return standardPrice;
    }

    let updateMinMaxPricesPerColor = function(variantsInfo) {
        variantsInfo.minPrice = null;
        variantsInfo.maxPrice = null;

        let product = variantsInfo.variantToDisplay;
        let selectedColorAttrVal = ProductUtils.getVariationAttribute(product, 'color');

        let variants = getAvailableVariantsForColor(selectedColorAttrVal, product.variationModel);
        for each(let variant in variants) {
            let priceModel = variant.priceModel;
            let salePrice = priceModel.getPrice();

            if (salePrice.available) {
                if(variantsInfo.minPrice) {
                    if (variantsInfo.minPrice.value > salePrice.value) {
                        variantsInfo.minPrice = salePrice;   
                    }
                } else {
                    variantsInfo.minPrice = salePrice;                  
                }

                if(variantsInfo.maxPrice) {
                    if (variantsInfo.maxPrice.value < salePrice.value) {
                        variantsInfo.maxPrice = salePrice;   
                    }
                } else {
                    variantsInfo.maxPrice = salePrice;                  
                }
            }
        }
    }

    let updateProductDataForSelectedVariant = function(variantsInfo) {
        if (empty(variantsInfo.variantToDisplay)) {
            Logger.error("ProductDataResolver.ds >>> variantsInfo.variantToDisplay is empty for URI: {0}?{1}", request.getHttpPath(), request.getHttpQueryString());
            return;
        }
        
        variantsInfo.ID = variantsInfo.variantToDisplay.ID;
        if (isSite('US') && !empty(variantsInfo.variantToDisplay.custom.GenescoSKU)) {
            variantsInfo.manufacturerSKU = variantsInfo.variantToDisplay.custom.GenescoSKU;
        } else {
            variantsInfo.manufacturerSKU = variantsInfo.variantToDisplay.manufacturerSKU;
        }
        variantsInfo.notShowcase = variantsInfo.variantToDisplay.custom.productType.value !== converse.constants.ProductType.Showcase;
        variantsInfo.dyo = false;
        variantsInfo.displayVariations = variantsInfo.variantToDisplay.isMaster() || variantsInfo.variantToDisplay.isVariant();
        variantsInfo.displayAvailabilityInfo = !variantsInfo.variantToDisplay.master && variantsInfo.notShowcase;
        variantsInfo.customizeLink = ProductUtils.canBeCustomized(variantsInfo.variantToDisplay) ? ProductUtils.getCustomizeLink(variantsInfo.variantToDisplay) : null;
        variantsInfo.availability = ProductUtils.getAvailability(variantsInfo.variantToDisplay, 1);
        variantsInfo.productURL = ProductUtils.getProductLink(variantsInfo.ID);
        variantsInfo.brand = variantsInfo.variantToDisplay.custom.brandSegment;
        variantsInfo.vairesByAgeRange = isVariableByAgeRange(variantsInfo.variantToDisplay);

        updateMinMaxPricesPerColor(variantsInfo);
        
    }

    let ProductDataResolver = {
        forProductDetailPage: function(product : Product, requestProduct: Product, currentVariationModel : ProductVariationModel) : Object {
            let selectedColorAttr = ProductUtils.getVariationAttribute(product, 'color');

            if (empty(selectedColorAttr)) {
                Logger.error("ProductDataResolver.ds >>> selectedColorAttr is null for URI: {0}?{1}", request.getHttpPath(), request.getHttpQueryString());
            }

            let productVariationModel = !empty(currentVariationModel) ? currentVariationModel : product.variationModel;

            let variantsInfo = { selectedColorAttribute : selectedColorAttr };

            addColorVariationInfo(variantsInfo, product, productVariationModel);

            if (isVariableByAgeRange(product)) {
                addSizeVariationWithAgeRangeInfo(variantsInfo, product, productVariationModel);
            } else {
                addSizeVariationInfo(variantsInfo, product, productVariationModel);
            }
            

            ensureOrderableVariantSelected(variantsInfo, productVariationModel);
            updateProductDataForSelectedVariant(variantsInfo);

            variantsInfo.displayPriceRange = displayPriceRange(requestProduct, variantsInfo);
            
            return variantsInfo;
        }
        
    }

    Namespace.extend(converse, {
        product: {
            ProductDataResolver: ProductDataResolver
        } 
    });
})();