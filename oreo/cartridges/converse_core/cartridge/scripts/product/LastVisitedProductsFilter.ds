importPackage( dw.system );
importPackage( dw.util );
importPackage (dw.catalog );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:common/libNamespace.ds");

(function() {
    
    function excludeCurrentProductFromCollection(lastVisitedProducts: Collection, currentProduct: Product) {
        var masterProduct : Product = currentProduct.variant ? currentProduct.variationModel.master : null;
        var productToRemove : Product = lastVisitedProducts.contains(currentProduct) ? currentProduct : masterProduct;
        lastVisitedProducts.remove(productToRemove);
    }

    function reduceCollectionSizeToMaximumAllowed(lastVisitedProducts: Collection, maxProductsInCollection: Number) {
        while (lastVisitedProducts.size() > maxProductsInCollection) {
            let lastProduct : Product = lastVisitedProducts[lastVisitedProducts.size()-1];
            lastVisitedProducts.remove(lastProduct);
        }
    }

    var LastVisitedProductsFilter = {
        filter: function(currentProduct: Product, lastVisitedProducts : Collection, maxProductsInCollection : Number) {
            if ( empty(lastVisitedProducts) ) {
                return;
            }
            excludeCurrentProductFromCollection(lastVisitedProducts, currentProduct);
            reduceCollectionSizeToMaximumAllowed(lastVisitedProducts, maxProductsInCollection);
        }
    }

    Namespace.extend(converse, {
        product: {
            LastVisitedProductsFilter: LastVisitedProductsFilter
        } 
    });
})();