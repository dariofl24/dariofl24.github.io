importPackage(dw.system);
importPackage(dw.catalog);
importPackage(dw.campaign);
importPackage(dw.util);
importPackage(dw.value);
importPackage(dw.web);
importPackage(dw.order);
importPackage(dw.content);

importScript("converse_core:constants.ds");
importScript("converse_core:product/ProductImageSO.ds" );
importScript("converse_core:product/SizeChartWrapper.ds");
importScript("converse_core:product/PriceResolver.ds");    
importScript("converse_core:util/ViewHelpers.ds");

var PriceResolver = converse.product.PriceResolver;

function sanitize(inS : String) {
    return inS.replace(/\W/g,'');
}

function isOnSale(product) {
	let result = false;
	let pricing = PriceResolver.getProductPricing(product);
    let isStandardPriceAvailable = PriceResolver.isStandardPriceAvailable(pricing);
    let isSalePriceAvailable = PriceResolver.isSalesPriceAvailable(pricing);

    if (isStandardPriceAvailable && isSalePriceAvailable)
    {
    	result = !pricing.standardPrice.equals(pricing.salesPrice);
    }
    
    return result;
}

function unsanitizeOR( anURL ) {
	return anURL.toString().replace('%7c','|','g').replace('%7C','|','g');
}


function shouldShowProduct(p){
	return (p.custom.showIfOutOfStock || p.availabilityModel.orderable || p.custom.comingSoon);
}

function isDateAfterNow(comingSoonDate) {
	
	if(!comingSoonDate){
		return null;
	}
	
	var todayCalendar = new Calendar();
	
	var csDate : Date = new Date(comingSoonDate);
	
	var comingSoonCalendar = new Calendar(csDate);
	var defaultDate = new Date("");
	
	if(csDate.toDateString().equalsIgnoreCase(defaultDate.toDateString()) ){
		
		return false;
	}
	
	var result = comingSoonCalendar.after(todayCalendar);
	
	return result;
}

var ProductUtils = function(){}

ProductUtils.getAvailability = function(item : Product, quantity : Object) {
    var qty = isNaN(quantity) ? 1 : Number(quantity).toFixed();
    var avm : ProductAvailabilityModel = item.availabilityModel;
    
    var availability = {
        statusQuantity: qty,
        ats: 0 ,
        inStockDate: '',
        levels : {},
        hasBackordered: false,
        hasUnavailable: false,
        showPreorderMsg: false
    };

    if (!empty(avm)) {
        availability.inStock = avm.inStock;
        availability.status = avm.availabilityStatus;
        availability.availableForSale = avm.availability > 0;

        if (availability.availableForSale && !empty(avm.inventoryRecord)) {
            availability.ats = avm.inventoryRecord.perpetual ? "999" : avm.inventoryRecord.ATS.value.toFixed().toString();
        }
        
        var avmLevels = ProductAvailabilityLevels = avm.getAvailabilityLevels((qty < 1) ? 1 : qty);
        availability.isAvailable = avmLevels.notAvailable.value == 0;
        availability.inStockMsg = Resource.msgf('global.quantityinstock','locale',"", avmLevels.inStock.value.toFixed());
        availability.preOrderMsg = Resource.msgf('global.quantitypreorder','locale',"", avmLevels.preorder.value.toFixed());

        availability.hasInStock = avmLevels.inStock.value != 0;
        availability.hasBackordered = avmLevels.backorder.value != 0;
        availability.hasPreordered = avmLevels.preorder.value != 0;
        availability.hasUnavailable = avmLevels.notAvailable.value != 0;
        
        availability.levels[ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK] = avmLevels.inStock.value;
        availability.levels[ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER] = avmLevels.preorder.value;
        availability.levels[ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER] = avmLevels.backorder.value;
        availability.levels[ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE] = avmLevels.notAvailable.value;
    }

    if (!empty(avm) && !empty(avm.inventoryRecord) && !empty(avm.inventoryRecord.inStockDate)) {
        var inStockCal = new Calendar(avm.inventoryRecord.inStockDate);
        var currentDate = new Calendar();
        availability.showPreorderMsg = currentDate.before(inStockCal);
        availability.inStockDate = StringUtils.formatCalendar(new Calendar(avm.inventoryRecord.inStockDate), 'MM/dd/yyyy');
        availability.backOrderMsg = Resource.msgf('global.quantitybackorder','locale',"", avmLevels.backorder.value.toFixed(), availability.inStockDate);
        availability.inStockDateMsg = Resource.msgf('global.inStockDate','locale',"", availability.inStockDate);
        availability.preOrderMsg = Resource.msgf('global.preOrderInStockDate','locale',"", avmLevels.preorder.value.toFixed(), availability.inStockDate);
    }
    
    return availability;
};

ProductUtils.getMaxOrderQuantityForProduct = function ( quantity : Number, product : Product, basket : Basket ) {
    if(empty(product.custom.maxOrderQuantity)) {
        return "";
    }
    var totalQuantity = quantity || 0;
    var maxOrderQuantity = product.custom.maxOrderQuantity;
    if(!empty(basket)) {
    var productLineItems = basket.productLineItems.iterator();
        while (productLineItems.hasNext()) {
            var productLineItem : ProductLineItem = productLineItems.next();
            if(product.manufacturerSKU == productLineItem.manufacturerSKU) {
                totalQuantity += productLineItem.quantityValue;
            }
        }
    }

    if (totalQuantity > maxOrderQuantity) {
        return StringUtils.format("Limit {0} pair per order", maxOrderQuantity);
    }

    return "";
};

ProductUtils.getPricing = function(item : Product) : Object {
    /* product pricing 
    *
    * There is currently no way to check if the list pricebook is actually
    * assigned to the site.  Therefore, we do a sanity check:  If the
    * product has no price according to standard price lookup rules,
    * then we know the list price book is not assigned to the site.
    * (The converse is not true so this check is not perfect.)
    * 
    * Todo:  Improve this logic.
    */

    var priceModel = item.getPriceModel();
    var standardPrice = null;

    if (!priceModel.getPrice().available) {
        standardPrice = Money.NOT_AVAILABLE;
    } 
    else if (('listPriceDefault' in Site.current.preferences.custom) && !empty(Site.current.preferences.custom.listPriceDefault)) {
        standardPrice = priceModel.getPriceBookPrice(Site.current.preferences.custom.listPriceDefault);
    } 
    else {
        standardPrice = priceModel.getPriceBookPrice('list-prices');
    }
    
    var salesPrice = priceModel.getPrice(); 
    var showStdPrice = standardPrice.available && salesPrice.available && standardPrice.compareTo(salesPrice) == 1;
    var promoPrice = Money.NOT_AVAILABLE;
    var isPromoPrice = false;

    var promos = PromotionMgr.activeCustomerPromotions.getProductPromotions(item);
    if (!(empty(promos))) { 
        var promo = promos[0];  
        var promoClass = promo.getPromotionClass();
        if (promoClass && promoClass.equals(Promotion.PROMOTION_CLASS_PRODUCT)) {
            if (item.optionProduct) {
                promoPrice = (pdict.CurrentOptionModel) ? 
                             promo.getPromotionalPrice(item, pdict.CurrentOptionModel) :
                             promo.getPromotionalPrice(item, item.getOptionModel());
            }
            else {
                promoPrice = promo.getPromotionalPrice(item);
            }
        }
        
        if (promoPrice.available && salesPrice.compareTo(promoPrice) != 0) {
            showStdPrice = isPromoPrice = true;
            standardPrice = salesPrice;
            salesPrice = promoPrice;
        }
    }

    var pricing = {
        showStandardPrice : showStdPrice,
        isPromoPrice : isPromoPrice,
        standard : standardPrice.value,
        formattedStandard : StringUtils.formatMoney(standardPrice),
        sale : salesPrice.value,
        formattedSale : StringUtils.formatMoney(salesPrice),
        salePriceMoney : salesPrice,
        standardPriceMoney : standardPrice,
        quantities : []
    };
    
    var priceTable = priceModel.getPriceTable();
    for (var qty in priceTable.getQuantities()) {
        pricing.quantities.push({
            unit: empty(qty.unit) ? "" : qty.unit, 
            value: empty(qty.value) ? 0 : qty.value.toFixed()
        });
    }   
    
    return  pricing;
};

ProductUtils.getVariantForColor = function(prod : Product, colorId : String) {
    var newProduct = null;
    var variants = prod.getVariants();
    
    if (variants == null || variants.length == 0) {
        return prod;
    }
        
    for each (var p in variants) { 
        if ( shouldShowProduct(p) && p.custom.color == colorId) {
            newProduct = p;
            
            break;
        }
    }

    return newProduct;
};

ProductUtils.getColorVariationInfo = function(colorVariationInfos : ArrayList, productId : String) {
	
	var varId= productId.replace(new RegExp("_[0-9]+"),"");
	
	for each(var colorVarInfo in colorVariationInfos){
		var pid = colorVarInfo.variant.ID.replace(new RegExp("_[0-9]+"),"");
		if(varId.equalsIgnoreCase(pid)){
			return colorVarInfo;
		}
	}
	
	return colorVariationInfos[0];
};

ProductUtils.getFirstOrderableOrComingsoonVariantForColor = function(prod : Product, colorId : String, filter: Object ) {
	
    var filterToUse = filter || function(productToFilter) { return productToFilter; };
    
    var variants : Array = prod.getVariants();
    
    if (variants == null || variants.length === 0) {
        return null;
    }

    for each (var p : Product in variants) {
        if (shouldShowProduct(p) ) {
            if (empty(colorId) || p.custom.color === colorId) {
                let productFound = filterToUse( p );
                if( productFound )
                {
                	return productFound;
                }
            }
        }
    }

    return null;
};

ProductUtils.isDateBeforeNow = function(productToDisplay : Product) {
	
	var comingSoonDate = productToDisplay.custom.comingSoon;
	
	if(!comingSoonDate){
		return null;
	}
	
	var todayCalendar = new Calendar();
	
	var comingSoonCalendar = new Calendar(comingSoonDate);
	
	var result = comingSoonCalendar.before(todayCalendar);
	
	return result;
};


ProductUtils.isDateAfterNowColorVar = function(comingSoonDate : String) : Boolean {
	
	var result = isDateAfterNow(comingSoonDate);
	
	return result;
};

ProductUtils.getDefaultVariant = function(pvm : ProductVariationModel) {
    
    var variant = pvm.selectedVariant;
    
    if (!empty(variant)) {
        return variant; 
    }

    var attDefs = pvm.getProductVariationAttributes();
    var map : Map = new HashMap();
    
    for (var i = 0, len = attDefs.length; i < len; i++) {
        var attribute = attDefs[i]; 
        var selectedValue = pvm.getSelectedValue(attribute);
        
        if (!empty(selectedValue) && selectedValue.displayValue.length > 0) {
            map.put(attribute.ID, selectedValue.ID);
        }
    }
    
    if (map.empty && (!empty(pvm.defaultVariant)) && (pvm.defaultVariant.custom.showIfOutOfStock || pvm.defaultVariant.availabilityModel.orderable || pvm.defaultVariant.custom.comingSoon)) {
        return pvm.defaultVariant;
    }
    
    var variants =  pvm.getVariants(map);
    
    for (var i = 0,len = variants.length; i < len; i++) {
        var p : Variant = variants[i];

        if (shouldShowProduct(p)) {
            return p;
        }
    }
    
    return null;
};

ProductUtils.getProductLineItemLink = function(productLineItem: ProductLineItem) : URL {
    let productLink : URL;
    
    if (productLineItem == null) {
        return null;
    }
    
    if (ProductUtils.isGiftCard(productLineItem.product)) {
        if (ProductUtils.isElectronicGiftCard(productLineItem.product)) {
            productLink = URLUtils.http('ElectronicGiftCard-Purchase');
        } 
        else {
            productLink = URLUtils.http('PhysicalGiftCard-Purchase');
        }
    } 
    else {
        let parameters = ['pid', productLineItem.productID];
        
        if (!empty(productLineItem.categoryID)) {
            parameters = parameters.concat(['cid', productLineItem.categoryID]);
        }
        
        if (!empty(productLineItem.custom.metricID)) {
            parameters = parameters.concat(['metricId', productLineItem.custom.metricID]);
        }
        
        productLink = URLUtils.http('Product-Show', parameters);
    }
    
    return productLink;
};

ProductUtils.getProductLink = function(productID : String) : URL {
    return URLUtils.http('Product-Show','pid', productID);
};

ProductUtils.isRegular = function(product: Product) : Boolean {
    return product.custom.productType.value === converse.constants.ProductType.Regular;
};

ProductUtils.isShowCase = function(product: Product) : Boolean {
    return product.custom.productType.value === converse.constants.ProductType.Showcase;
};

ProductUtils.isElectronicGiftCard = function(product: Product) : Boolean {
    return product.custom.productType.value === converse.constants.ProductType.ElectronicGiftCard;
};

ProductUtils.isPhysicalGiftCard = function(product: Product) : Boolean {
    return product.custom.productType.value === converse.constants.ProductType.PhysicalGiftCard;
};

ProductUtils.isGiftCard = function(product: Product) : Boolean {
    var productType = product.custom.productType.value;
    return productType === converse.constants.ProductType.ElectronicGiftCard ||
        productType === converse.constants.ProductType.PhysicalGiftCard;
};

ProductUtils.isConverseOne = function(product: Product) : Boolean {
    return product.custom.productType.value === converse.constants.ProductType.C1;
};

ProductUtils.getVariationAttributeValue = function(product: Product, attributeName: String) : Object {
    var attribute = ProductUtils.getVariationAttribute(product, attributeName);
    return (attribute == null) ? null : attribute.value;
};

ProductUtils.getVariationAttribute = function(product: Product, attributeName: String) : Object {
    var variationModel: ProductVariationModel = product.variationModel;
    var attribute = variationModel.getProductVariationAttribute(attributeName);
    return (attribute == null) ? null : variationModel.getSelectedValue(attribute);
};

ProductUtils.getCrossSellsProducts = function(product: Product, maxRecs: Number) : Collection {
    var recommendations : Iterator = product.getOrderableRecommendations(1).iterator();
    var recProducts : Collection = new ArrayList();

    var maxRecs = maxRecs || 3, counter = 0;

    while (recommendations.hasNext()) {
        var recommendation : Recommendation = recommendations.next();
        var recommendedProduct : Product = recommendation.getRecommendedItem();

        recProducts.add(recommendedProduct);

        if (++counter >= maxRecs) {
            break;
        }
    }

    return recProducts;
};

ProductUtils.getProductSize = function(lineItem : ProductLineItem) : String {
    var size: String = "";
    var product: Product = lineItem.product;

    if (ProductUtils.isConverseOne(product)) {
        size = lineItem.custom.displayCustomSize;
    } 
    else if (lineItem.custom.displayCustomSize) {
        size = lineItem.custom.displayCustomSize;
    } 
    else if (product.variant) {
        size = ProductUtils.getVariationAttributeValue(product, "size");
    }
    
    return size;
};

ProductUtils.isSizeChartEnabled = function(product) : Boolean {
    if (product.custom.pillar.value.toLowerCase() === converse.constants.Pillar.Accessories) {
        return false;
    }

    if (!empty(product.custom.sizeChart)) {
        if (ContentMgr.getContent(product.custom.sizeChart) != null) {
            return true;
        }
    }
    
    return false;
}

ProductUtils.isSizeChartMessageEnabled = function(product) : Boolean {
    return !empty(product.custom.sizeChartMessaging);
};

ProductUtils.isKidsSizeChartEnabled = function(product) : Boolean {
    let result = ProductUtils.isSizeChartMessageEnabled(product);
    result = result && product.custom.gender.value === converse.constants.Gender.Kids;
    result = result && product.custom.brandSegment.value === converse.constants.BrandSegment.AllStar;

    return result;
};

ProductUtils.canBeCustomized = function(product: Product) : Boolean {
    return product != null && !empty(product.custom.dyoVersionProductID);
};

ProductUtils.getCustomizeLink = function(product: Product) : URL {
    if (product == null) {
        return null;
    }
    
    let parameters : Array = [];

    let dyoVersionProductID = product.custom.dyoVersionProductID;
    if (!empty(dyoVersionProductID)) {
        parameters = parameters.concat(['pid', dyoVersionProductID]);
        
        let dyoVersionInspirationID = product.custom.dyoVersionInspirationID;
        if (!empty(dyoVersionInspirationID)) {
            parameters = parameters.concat(['metricId', dyoVersionInspirationID]);
        }
    }

    return empty(parameters) ? null : URLUtils.http('Product-Show', parameters);
};

ProductUtils.getDefaultVariationProduct = function(product: Product) {
    var result : Product;

    if (product.master) { 
        var defaultVariant = product.variationModel.getDefaultVariant();
        if (defaultVariant != null && defaultVariant.availabilityModel.orderable) {
            result = defaultVariant;
        } else {
            result = ProductUtils.getDefaultVariant(product.variationModel);
        }
    }

    return result;
};

ProductUtils.getProductToShow  = function(product, defaultVariant) {
    return empty(defaultVariant) ? product : defaultVariant;
};

ProductUtils.getSizeChartBySizeChartName = function(product: Product) {
	if (empty(product.custom.sizeChart)) {
        Logger.info("Product {0} does not have an assigned size chart.", product.ID);
        return null;
    }
	
	return converse.constants.SizeChartMapping[product.custom.sizeChart];
}

ProductUtils.getSizeChartByMaterialConverseId = function (product: Product) {
	if (empty(product.custom.MaterialConverseID)) { 
		Logger.info("Product {0} does not have an assigned material converse id.", product.ID);
		return null;
	}
	
	return converse.constants.SizeChartMappingByMaterial[product.custom.MaterialConverseID];
}

ProductUtils.getSizeChart = function(product: Product) {
    if (product == null) {
        return null;
    }

    let sizeChart;
    
    if (isSite('US')) {
    	sizeChart = ProductUtils.getSizeChartBySizeChartName(product);
    } else {
    	sizeChart = ProductUtils.getSizeChartByMaterialConverseId(product);
    	if (empty(sizeChart)) {
    		sizeChart = ProductUtils.getSizeChartBySizeChartName(product);
    	}
    }
    
    if (empty(sizeChart)) {
        Logger.error("Cannot find size chart for product {1}.", product.ID);
        return null;
    }
    
    return new SizeChartWrapper(sizeChart);
};

ProductUtils.getSizeChartAsset = function(product: Product) {
	let sizeChartAsset = null;
    if (!isSite('US') && !empty(product.custom.MaterialConverseID)) {
    	let sizeChart = ProductUtils.getSizeChartByMaterialConverseId(product);
    	if (!empty(sizeChart)) {
    		sizeChartAsset = "MCID_" + product.custom.MaterialConverseID;
    	} else {
    		sizeChartAsset = product.custom.sizeChart;
    	}
    } else {
    	sizeChartAsset = product.custom.sizeChart;
    }
    
    return sizeChartAsset;
}

ProductUtils.hasBadging = function(product: Product) : Boolean {
    return !empty(product.custom.badging);
};

ProductUtils.getBadging = function(product: Product) {
    return product.custom.badging;
};

ProductUtils.getUrlForSelectedVariationValue = function(productVariationModel, variationAttribute, value) : String {
    return productVariationModel.urlSelectVariationValue('Product-Variation', variationAttribute, value);
};

ProductUtils.getUrlForUnselectedVariationValue = function(productVariationModel, variationAttribute) : String {
    return productVariationModel.urlUnselectVariationValue('Product-Variation', variationAttribute);
};

ProductUtils.getUrlForSize = function(productVariationModel, colorValue, sizeValue, sizeChartValue, imageVariationValue) : String {
    let colorAttr = productVariationModel.getProductVariationAttribute('color');
    let sizeAttr = productVariationModel.getProductVariationAttribute('size');
    let sizeChartAttr = productVariationModel.getProductVariationAttribute('sizeChart');
    let imageVariationAttr = productVariationModel.getProductVariationAttribute('image-variation');

    return productVariationModel.url('Product-Variation', 
            colorAttr, colorValue, 
            sizeAttr, sizeValue, 
            sizeChartAttr, sizeChartValue, 
            imageVariationAttr, imageVariationValue);
};

ProductUtils.getUrlForColorVariant = function(productVariationModel, colorAttr, colorValue) : String {
    let imageVariationAttr = productVariationModel.getProductVariationAttribute('image-variation');
    return productVariationModel.url('Product-Variation', colorAttr, colorValue, imageVariationAttr, '');
};

ProductUtils.isModelImage = function (gender: String, category: String) {
    if ((gender.toLowerCase() === converse.constants.Gender.Men 
        || gender.toLowerCase() === converse.constants.Gender.Women) 
        && (category.toLowerCase() === converse.constants.Pillar.Apparel)) {
        return true;
    } else {
        return false;
    }
};

ProductUtils.isApparel = function(product: Product) : Boolean {
    return !empty(product.custom.pillar.value) && (product.custom.pillar.value.toLowerCase() === converse.constants.Pillar.Apparel);
};

ProductUtils.isSneaker = function(product: Product) : Boolean {
    return !empty(product.custom.pillar.value) && (product.custom.pillar.value.toLowerCase() === converse.constants.Pillar.Sneakers);
};

ProductUtils.isKids = function(product: Product) : Boolean {
    return !empty(product.custom.gender.value) && (product.custom.gender.value.toLowerCase() === converse.constants.Gender.Kids);
}

ProductUtils.isKidsSneaker = function(product: Product) : Boolean {
    return ProductUtils.isKids(product) && ProductUtils.isSneaker(product);
};

ProductUtils.isKidsApparel = function(product: Product) : Boolean {
    return ProductUtils.isKids(product) && ProductUtils.isSneaker(product);
};

ProductUtils.getBusinessUnitId = function(product: Product) {
    let result = converse.constants.BusinessUnitId.Regular;   

    if (ProductUtils.isConverseOne(product)) 
    {
        result = converse.constants.BusinessUnitId.DYO;
    }
    else if (isOnSale(product))
    {
        result = converse.constants.BusinessUnitId.OnSale;
    }

    return result;
};

ProductUtils.sortKidsYouthSizes = function(result: List) {
    let startPos = -1;
    for ( let i = 0; i < result.size(); i++ ) {
        if( result[i].sizeChartWeight === converse.constants.KidsYouth.Weight ) {
            startPos = i;
            break;
        }
    }
    if( startPos >= 0 ) {
        while( result.get(result.size()-1).sizeValue !== converse.constants.KidsYouth.UpperSize ) {
            result.addAt(startPos, result.pop());
        }
    }
};

ProductUtils.hideSize = function(size: String, sizeChart: String) {
    let sizeChartMapping;
    if (isSite('US')) {
        return false;
    }
    if (isSite('GB')) {
        sizeChartMapping = converse.constants.SizesToHide.GB[sizeChart];
    } else {
        sizeChartMapping = converse.constants.SizesToHide.EU[sizeChart];
    }

    for each (let hiddenSize in sizeChartMapping) {
        if(size == hiddenSize) {
            return true
        }
    }
    return false;
};