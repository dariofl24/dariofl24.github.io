importPackage(dw.system);
importPackage(dw.customer);
importPackage(dw.catalog);
importPackage(dw.campaign);
importPackage(dw.object);
importPackage(dw.util);
importPackage(dw.value);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libLang.ds");

(function() {

    var FallBackPriceList: String = "list-prices";

    function getPriceQuantities(priceModel: ProductPriceModel) : Array {
        var priceTable: ProductPriceTable = priceModel.getPriceTable();
        var priceQuantities: Array = [];

        for (let qty in priceTable.getQuantities()) {
            let unit = empty(qty.unit) ? "" : qty.unit;
            let value = empty(qty.value) ? 0 : qty.value.toFixed();

            priceQuantities.push({
                unit: unit,
                value: value
            });
        }

        return priceQuantities;
    }

    function getFirstVariantIfMasterWithNoRange(product: Product) : Product {
        var priceModel: ProductPriceModel = product.getPriceModel();
        var variants: Collection = product.getVariationModel().getVariants();

        return (product.master && !priceModel.isPriceRange() && variants.size() > 0) ? variants[0] : product;
    }

    var PriceBuilder = Class.extend({
        init: function(product: Product) {
            this.product = getFirstVariantIfMasterWithNoRange(product);
            this.priceModel = this.product.getPriceModel();
            this.pricing = {};
        },

        add: function(name: String, value: Object) {
            this.pricing[name] = value;
        },

        getProductPromotions: function(product: Product) : Collection {
            return PromotionMgr.getActiveCustomerPromotions().getProductPromotions(product);
        },

        getPromotionalPrice: function() : Money {
            var promos: Collection = this.getProductPromotions(this.product);
            var promotionalPrice: Money = Money.NOT_AVAILABLE;

            if (!empty(promos)) {
                let promo: Promotion = promos[0];
                let promotionClass: String = promo.getPromotionClass();

                if (promotionClass !== null && promotionClass.equals(Promotion.PROMOTION_CLASS_PRODUCT)) {
                    promotionalPrice = promo.getPromotionalPrice(this.product);
                }
            }

            return promotionalPrice;
        },

        getShowStandardPrice: function(standardPrice: Money, salesPrice: Money) : Boolean {
            return standardPrice.available && salesPrice.available && standardPrice.compareTo(salesPrice) == 1;
        },

        getPriceBookPrice: function() : Money {
            var DefaultPriceList: String = Site.current.preferences.custom["listPriceDefault"];
            var priceBookID: String = empty(DefaultPriceList) ? FallBackPriceList : DefaultPriceList;
            return this.priceModel.getPriceBookPrice(priceBookID);
        },

        getStandardPrice: function() : Money {
            var priceAvailable: Boolean = this.priceModel.getPrice().available;
            return priceAvailable ? this.getPriceBookPrice() : Money.NOT_AVAILABLE;
        },

        setUpStandardPrices: function() {
            var salesPrice: Money = this.priceModel.getPrice();
            var standardPrice: Money = this.getStandardPrice();
            var showStandardPrice: Boolean = this.getShowStandardPrice(standardPrice, salesPrice);
            var promoPrice: Money = this.getPromotionalPrice();
            var isPromoPrice: Boolean = false;

            if (promoPrice.available && salesPrice.compareTo(promoPrice) !== 0) {
                showStandardPrice = isPromoPrice = true;
                standardPrice = salesPrice;
                salesPrice = promoPrice;
            }

            this.add("showStandardPrice", showStandardPrice);
            this.add("isPromoPrice", isPromoPrice);
            this.add("standardPrice", standardPrice);
            this.add("standardPriceFormatted", StringUtils.formatMoney(standardPrice));
            this.add("salesPrice", salesPrice);
            this.add("salesPriceFormatted", StringUtils.formatMoney(salesPrice));

            return this;
        },

        setUpPriceRange: function() {
            var minPrice: Money = Money.NOT_AVAILABLE;
            var maxPrice: Money = Money.NOT_AVAILABLE;
            var isPriceRange: Boolean = false;

            if (this.product.master && this.priceModel.isPriceRange()) {
                minPrice = this.priceModel.getMinPrice();
                maxPrice = this.priceModel.getMaxPrice();
                isPriceRange = true;
            }

            this.add("isPriceRange", isPriceRange);
            this.add("minPrice", minPrice);
            this.add("maxPrice", maxPrice);

            return this;
        },

        setUpProductQuantities: function() {
            this.add("basePriceQuantity", this.priceModel.getBasePriceQuantity());
            this.add("quantities", getPriceQuantities(this.priceModel));

            return this;
        },

        getPricing: function() {
            this.setUpStandardPrices();
            this.setUpPriceRange();
            this.setUpProductQuantities();

            return this.pricing;
        }
    });

    var LineItemPriceBuilder = PriceBuilder.extend({
        init: function(lineItem: ProductLineItem) {
            this.lineItem = lineItem;
            this._super(lineItem.getProduct());
        },

        getPromotionalPrice: function() : Money {
            var adjustedPrice: Money = this.lineItem.getAdjustedPrice();
            var quantityValue: Number = this.lineItem.getQuantityValue();
            return adjustedPrice.divide(quantityValue);
        }
    });

    Namespace.extend(converse, {
        product: {
            PriceBuilder: PriceBuilder,
            LineItemPriceBuilder: LineItemPriceBuilder
        }
    });

})();