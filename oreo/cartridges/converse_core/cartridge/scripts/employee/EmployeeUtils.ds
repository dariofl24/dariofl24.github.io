importPackage(dw.system);
importPackage(dw.customer);
importPackage(dw.object);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libLang.ds");
importScript("converse_core:common/libNamespace.ds");

(function(){
    
    var EmployeeRelativeState = converse.constants.EmployeeRelative.State;
    
    function isDuplicateEmployeeAccount(employeeEmail : String, employeeID : String) : Boolean {
        var duplicate : Boolean = false;
        
        var it : SeekableIterator = null;
        try {
            it = CustomerMgr.queryProfiles("email != {0} and custom.employeeID = {1}", null, employeeEmail, employeeID);
            duplicate = it.hasNext();
        }
        finally {
            if (it) {
                it.close();
            }
        }
        
        return duplicate;
    }
    
    function isEmployee(profile : Profile) : Boolean {
        return !empty(profile) && !empty(profile.custom.employeeBvatID);
    }
    
    function isEmployeeRelative(profile : Profile) : Boolean {
        return !empty(profile) && !empty(profile.custom.parentEmployeeID);
    }
    
    function isActiveEmployee(employee : Profile) : Boolean {
        return isEmployee(employee) && employee.custom.employeeActive;
    }
    
    function getEmployee(profile : Profile) : Profile {
        return isEmployee(profile) ? profile : getParentEmployee(profile);
    }
    
    function getParentEmployee(profile : Profile) : Profile {
        var parentEmployee : Profile = null;
        
        if (isEmployeeRelative(profile)) {
            parentEmployee = CustomerMgr.queryProfile("customerNo = {0}", profile.custom.parentEmployeeID);
        }
        
        return parentEmployee;
    }
    
    function getEmployeeRelatives(employeeCustomerNo : String) : List {
        var relatives : List = new ArrayList();
        
        var it : SeekableIterator = null;
        try {
            it = CustomObjectMgr.queryCustomObjects("EmployeeRelative", "custom.employeeID = {0}", "custom.created desc", employeeCustomerNo);
            while (it.hasNext()) {
                relatives.add1(it.next());
            }
        }
        finally {
            if (it) {
                it.close();
            }
        }
        
        return relatives;
    }
    
    function isEmployeeDiscountEligible(profile : Profile) : Boolean {
        var eligible : Boolean = false;
        
        var employee : Profile = getEmployee(profile);
        
        if (isActiveEmployee(employee)) {
            if (isEmployeeRelative(profile)) {
                eligible = areRelativeTermsAndConditionsAccepted(profile);
            }
            else {
                eligible = true;
            }
        }
        
        return eligible;
    }
    
    function getRelativeByCustomerNo(customerNo : String) : CustomObject {
        return CustomObjectMgr.queryCustomObject("EmployeeRelative", "custom.customerNo = {0}", customerNo);
    }
    
    function getRelativeByEmail(email : String) : CustomObject {
        return CustomObjectMgr.queryCustomObject("EmployeeRelative", "custom.email ilike {0}", email);
    }
    
    function getRelativeByEmailAndEmployeeCustomerNo(email : String, employeeCustomerNo : String) : CustomObject {
        return CustomObjectMgr.queryCustomObject("EmployeeRelative", "custom.email = {0} and custom.employeeID = {1}", email, employeeCustomerNo);
    }
    
    function areRelativeTermsAndConditionsAccepted(profile : Profile) : Boolean {
        var relative : CustomObject = getRelativeByCustomerNo(profile.customerNo);
        
        return !empty(relative) && relative.custom.state.value === EmployeeRelativeState.ACCEPTED;
    }
    
    function shouldDisplayRelativeTermsAndConditions(profile : Profile) : Boolean {
        var relative : CustomObject = getRelativeByEmail(profile.email);
        
        return !empty(relative) && relative.custom.state.value === EmployeeRelativeState.DEFAULT;
    }
    
    function setRelativeTermsAndConditionsAccepted(profile : Profile, accepted : Boolean) {
        var relative : CustomObject = getRelativeByEmail(profile.email);
        
        relative.custom.state = accepted ? EmployeeRelativeState.ACCEPTED : EmployeeRelativeState.DECLINED;
        relative.custom.agreedToTerms = accepted ? Site.getCalendar().getTime() : null;
        relative.custom.customerNo = profile.customerNo;
        
        profile.custom.parentEmployeeID = relative.custom.employeeID;
    }
    
    function deleteEmployeeRelative(employeeCustomerNo : String, relativeEmail : String) : Boolean {
        var relative : CustomObject = getRelativeByEmailAndEmployeeCustomerNo(relativeEmail, employeeCustomerNo);
        
        if (!empty(relative)) {
            CustomObjectMgr.remove(relative);
            return true;
        }
        
        return false;
    }
    
    Namespace.extend(converse, { 
        employee: {
            EmployeeUtils: {
                isDuplicateEmployeeAccount: isDuplicateEmployeeAccount,
                isEmployee: isEmployee,
                isEmployeeRelative: isEmployeeRelative,
                isActiveEmployee: isActiveEmployee,
                getEmployee: getEmployee,
                getParentEmployee: getParentEmployee,
                getEmployeeRelatives: getEmployeeRelatives,
                getRelativeByCustomerNo: getRelativeByCustomerNo,
                getRelativeByEmail: getRelativeByEmail,
                getRelativeByEmailAndEmployeeCustomerNo: getRelativeByEmailAndEmployeeCustomerNo,
                isEmployeeDiscountEligible: isEmployeeDiscountEligible,
                shouldDisplayRelativeTermsAndConditions: shouldDisplayRelativeTermsAndConditions,
                setRelativeTermsAndConditionsAccepted: setRelativeTermsAndConditionsAccepted,
                deleteEmployeeRelative: deleteEmployeeRelative
            }
        }
    });

})();
