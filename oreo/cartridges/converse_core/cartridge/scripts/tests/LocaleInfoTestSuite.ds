/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds"); 
importScript("constants.ds");
importScript("converse_core:util/LocaleInfo.ds");

function execute(args : PipelineDictionary) : Number {

    let createLocaleInfoEntry = function () {
        return {
                localeValue: 'en_US',
                language: 'EN',
                hreflang: 'en-us',
                country: {
                    code: 'US',
                    name: 'United States'
                }
        };
    };

    args.Unit.describe("Locale Info Test Suite")
        .test("getLocalizedCountryName returns value for valid input", function () {
            Assert.areEqual("United States", converse.utils.getLocalizedCountryName("converse", "en_US"));
        })
        .test("getLocalizedCountryName returns null for bad site", function () {
            Assert.areEqual(null, converse.utils.getLocalizedCountryName("conver", "en_US"));
        })
        .test("getLocalizedCountryName returns null for bad locale", function () {
            Assert.areEqual(null, converse.utils.getLocaleInfo("converse", "es_US"));
        })
        .test("getLocaleInfo returns object for valid input", function () {
            let object = createLocaleInfoEntry();
            let result = converse.utils.getLocaleInfo("converse", "en_US");
            
            Assert.isNotNull(result);
            Assert.areEqual(object.localeValue, result.localeValue);
            Assert.areEqual(object.language, result.language);
            Assert.areEqual(object.hreflang, result.hreflang);
            Assert.areEqual(object.country.code, result.country.code);
            Assert.areEqual(object.country.name, result.country.name);
        })
        .test("getLocaleInfo returns null for bad site", function () {
            Assert.areEqual(null, converse.utils.getLocaleInfo("conver", "en_US"));
        })
        .test("getLocaleInfo returns null for bad locale", function () {
            Assert.areEqual(null, converse.utils.getLocaleInfo("converse", "es_US"));
        })
        .test("getLocaleCountry returns value for valid locale", function () {
            Assert.areEqual("us", converse.utils.getLocaleCountry("en_US"));
        })
        .test("getLocaleCountry returns null for null locale", function () {
            Assert.isNull(converse.utils.getLocaleCountry(null));
        })
        .test("getLocaleCountry returns null for undefined locale", function () {
            Assert.isNull(converse.utils.getLocaleCountry(undefined));
        })
        .test("getLocaleCountry returns null for empty locale", function () {
            Assert.isNull(converse.utils.getLocaleCountry(""));
        })
        .test("getLocaleCountry returns us for default locale", function () {
            Assert.areEqual("us", converse.utils.getLocaleCountry("default"));
        })
        .test("getLocaleCountry returns uk for Great Britain locales", function () {
            Assert.areEqual("uk", converse.utils.getLocaleCountry("en_GB"));
        })
        .test("getLocaleLanguage returns value for valid locale", function () {
            Assert.areEqual("en", converse.utils.getLocaleLanguage("en_US"));
        })
        .test("getLocaleLanguage returns null for null locale", function () {
            Assert.isNull(converse.utils.getLocaleLanguage(null));
        })
        .test("getLocaleLanguage returns null for undefined locale", function () {
            Assert.isNull(converse.utils.getLocaleLanguage(undefined));
        })
        .test("getLocaleLanguage returns null for empty locale", function () {
            Assert.isNull(converse.utils.getLocaleLanguage(""));
        })
        .test("getLocaleLanguage returns us for default locale", function () {
            Assert.areEqual("en", converse.utils.getLocaleLanguage("default"));
        })
        .test("getLocaleInfo returns info in valid format", function () {
            let object = createLocaleInfoEntry();
            object['siteID'] = 'converse';
            
            let result = converse.utils.getAllLocaleInfo();
            
            Assert.isNotNull(result);
            Assert.isTrue(result.length > 0);
            
            for each (locale in result) {
                if (locale.siteID == 'converse') {
                    Assert.areEqual(object.siteID, locale.siteID);
                    Assert.areEqual(object.localeValue, locale.localeValue);
		            Assert.areEqual(object.language, locale.language);
		            Assert.areEqual(object.hreflang, locale.hreflang);
		            Assert.areEqual(object.country.code, locale.country.code);
		            Assert.areEqual(object.country.name, locale.country.name);
		            break;
                }
            }
        })
        .test("getSitesAvailable returns a list of available sites", function () {
            
            let result = converse.utils.getSitesAvailable();
            
            Assert.isNotNull(result);
            Assert.isTrue(result.length > 0);
            
            for each (site in result) {
	            var sitePrefs : SitePreferences = site.getPreferences();
	            var isAvailable : Booelan = sitePrefs.getCustom()["availability"];
	            Assert.isTrue(isAvailable);
            }
        })
        .test("getCanonicalLink should return 'http://HostName/countrycode' format for country's primary language", function () {
            let defaultLocale = converse.utils.getLocaleLanguage(Site.getCurrent().getDefaultLocale());
            let countryCode = converse.utils.getLocaleCountry(defaultLocale);
            let currentLanguage = converse.utils.getLocaleLanguage(defaultLocale);
            
            let result = "http://" + converse.utils.getDomain() + "/" + countryCode;
            
            Assert.areEqual(result, converse.utils.getCanonicalLink(defaultLocale));
        })
        .test("getCanonicalLink should return 'http://HostName/countrycode/language/go' format for country's secundary language", function () {
            let testLocale = "te_ST"
            let countryCode = converse.utils.getLocaleCountry(testLocale);
            let currentLanguage = converse.utils.getLocaleLanguage(testLocale);
            
            let result = "http://" + converse.utils.getDomain() + "/" + countryCode + "/" + currentLanguage + "/go";
            
            Assert.areEqual(result, converse.utils.getCanonicalLink(testLocale));
        })
        .test("createLocationURL should match regExpStr", function () {
            
            let testLocale = "en_US";
            let testSite = "converse";
            let testPipeline = "Page-Show";
            let testParams = "cid=Careers-About-Us";
            let testRedirect = "?redirect=true";
            
            let regExpStr = "\\/.*" + testSite + ".*(" + testLocale + "|" + converse.utils.getLocaleLanguage(testLocale) + ").*\\" + testRedirect + "&" + testParams;
            
            Assert.isTrue(converse.utils.createLocationURL(testSite, testLocale, testPipeline, testRedirect, testParams).match(regExpStr));
        })
        .test("createLocationURL should match regExpStr for no redirect string nor parameters", function () {
            
            let testLocale = "en_DE";
            let testSite = "converse-de";
            let testPipeline = "Home-Show";
            let testParams = null;
            let testRedirect = null;
            
            let regExpStr = "(http:\\/\\/|https:\\/\\/)" + converse.utils.getDomain() + "\\/.*" + testSite + ".*(" + testLocale + "|" + converse.utils.getLocaleLanguage(testLocale) + ").*(?!\\?redirect=true).*";
            
            Assert.isTrue(converse.utils.createLocationURL(testSite, testLocale, testPipeline, testRedirect, testParams).match(regExpStr));
        })
        .test("createLocationURL should match regExpStr for redirect string but no parameters", function () {
            
            let testLocale = "en_US";
            let testSite = "converse";
            let testPipeline = "Cart-Show";
            let testParams = null;
            let testRedirect = "?redirect=true";
            
            let regExpStr = "\\/.*" + testSite + ".*(" + testLocale + "|" + converse.utils.getLocaleLanguage(testLocale) + ").*\\" + testRedirect;
            
            Assert.isTrue(converse.utils.createLocationURL(testSite, testLocale, testPipeline, testRedirect, testParams).match(regExpStr));
        })
        .test("createLocationURL should match http://siteName/s/converse/en/go format for default pipeline and default locale", function () {
            
            let testLocale = "default";
            let testSite = "converse";
            let testPipeline = "Default-Start";
            let testParams = null;
            let testRedirect = null;
            
            let expectedUrlPath = "/s/converse/en/go";
            
            Assert.isTrue(converse.utils.createLocationURL(testSite, testLocale, testPipeline, testRedirect, testParams).indexOf(expectedUrlPath) > -1);
        })
        .test("getSiteIDByCountryCode should return a valid associated Site ID to the country", function () {
            
            Assert.areEqual("converse-gb", converse.utils.getSiteIDByCountryCode("GB") );
            Assert.areEqual("converse-de", converse.utils.getSiteIDByCountryCode("DE") );
            Assert.areEqual("converse-eu", converse.utils.getSiteIDByCountryCode("DK") );
            Assert.areEqual("converse-eu", converse.utils.getSiteIDByCountryCode("IE") );  
            Assert.areEqual("converse-eu", converse.utils.getSiteIDByCountryCode("FI") );  
            Assert.areEqual(null, converse.utils.getSiteIDByCountryCode("SE") );        
        })
        .test("getCurrentCountryCode should return a valid country code based on Request", function () {
            var requestEn_DE = {
                getLocale: function() {
                    return "en_DE";
                }
            };
            
            Assert.areEqual("DE", converse.utils.getCurrentCountryCode( requestEn_DE) );   
        })
        .test("getCurrentCountryCode should return a valid country code based on Request even if site supports multiple countries", function () {
            var requestEn_FI = {
                getLocale: function() {
                    return "en_FI";
                }
            };
            
            Assert.areEqual("FI", converse.utils.getCurrentCountryCode( requestEn_FI) );   
        })
        
        .test("getCurrentCountryCode should return null if no site exist supporting the specific Locale", function () {
            var requestEn_MX = {
                getLocale: function() {
                    return "en_MX";
                }
            };
            
            Assert.isNull(converse.utils.getCurrentCountryCode( requestEn_MX) );   
        })
        
        .test("normalizeSiteName should return normalized Site Names", function () {
            
            Assert.areEqual("Converse EU", converse.utils.normalizeSiteName("Converse EU: IE / DK / FI") );
            Assert.isNull(converse.utils.normalizeSiteName(null) ); 
            Assert.areEqual("Converse BE", converse.utils.normalizeSiteName("Converse BE") ); 
            Assert.areEqual("Converse mx", converse.utils.normalizeSiteName("Converse mx") ); 
            Assert.areEqual("Converse FR", converse.utils.normalizeSiteName("Converse FR/LU") );
            Assert.areEqual("Converse ES", converse.utils.normalizeSiteName("Converse ES/PT") );
            Assert.areEqual("Converse DE", converse.utils.normalizeSiteName("Converse DE/AT") );
            Assert.areEqual("converse IT", converse.utils.normalizeSiteName("converse IT") );
            Assert.areEqual("some other site 12325", converse.utils.normalizeSiteName("some other site 123,25") );     
        })
       
	return PIPELET_NEXT;

}
