/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("util/HTMLLinkInfoGenerator.ds");

importScript("module_test:Library/JSMockito.ds");

function containsSiteIdWithLocale( list : List, target : converse.utils.SiteIdWithLocale ) {
    for each( siteIdWithLocale in list ) {
        if( target.equals( siteIdWithLocale ) ) {
            return true;
        }
    }
    
    return false;
};

function containsHTMLLinkInfo( list : List, target : converse.utils.HTMLLinkInfo ) {
    for each( htmlLinkInfo in list ) {
        if( target.equals( htmlLinkInfo ) ) {
            return true;
        }
    }
    return false;
};

function execute(args : PipelineDictionary) : Number {
    
    args.Unit.describe("HTMLLinkInfoGenerator Test Suite")
        .test("Get all siteIds with locales", function () {
            
            var allSites = [
                {
                	getID : function(){ return "converse-be"},
                	getAllowedLocales : function(){
                	   return [
                	       "en_BE",
                	       "fr_BE",
                	       "nl_BE"
                	   ];
                	}
                },
                {
                    getID : function(){ return "converse-de"},
                    getAllowedLocales : function(){
                       return [
                           "en_DE",
                           "de_DE"
                       ];
                    }
                }
            ];
            
            let htmlLinkInfoGenerator = new converse.utils.HTMLLinkInfoGenerator("converse-de", "de_DE");
            
            htmlLinkInfoGenerator.getAllSites = function(){return allSites; };
            
            let siteIdsWithLocales = htmlLinkInfoGenerator.getAllSiteIdsWithLocales();
            
            Assert.areEqual( 5, siteIdsWithLocales.size() );
            
            var actualFirstSiteIdWithLocale = siteIdsWithLocales.get(0);
            Assert.areEqual("de_DE", actualFirstSiteIdWithLocale.getLocale() );
            Assert.areEqual("converse-de", actualFirstSiteIdWithLocale.getSiteId() );
            
            Assert.isTrue( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-be", "en_BE") ) );
            Assert.isTrue( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-be", "fr_BE") ) );
            Assert.isTrue( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-be", "nl_BE") ) );
            Assert.isTrue( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-de", "en_DE") ) );
            Assert.isFalse( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-de", "fr_DE") ) ); 
            Assert.isFalse( containsSiteIdWithLocale( siteIdsWithLocales, new converse.utils.SiteIdWithLocale("converse-gb", "en_DE") ) );           
        })
        .test("Get alternate links", function () {
            
            var pdict = {};
            
            var allSites = [
                {
                    getID : function(){ return "converse-be"},
                    getAllowedLocales : function(){
                       return [
                           "en_BE",
                           "fr_BE",
                           "nl_BE"
                       ];
                    }
                },
                {
                    getID : function(){ return "converse-de"},
                    getAllowedLocales : function(){
                       return [
                           "en_DE",
                           "de_DE"
                       ];
                    }
                }
            ];
            
            let htmlLinkInfoGenerator = new converse.utils.HTMLLinkInfoGenerator("converse-de", "de_DE");
            
            htmlLinkInfoGenerator.getSiteIdsWithLocales = function(currentSiteId, currentLocale){
                var list = new ArrayList();
                list.add( new converse.utils.SiteIdWithLocale("converse-be", "en_BE") );
                list.add( new converse.utils.SiteIdWithLocale("converse-be", "fr_BE") );
                list.add( new converse.utils.SiteIdWithLocale("converse-be", "nl_BE") );
                list.add( new converse.utils.SiteIdWithLocale("converse-de", "en_DE") );
                list.add( new converse.utils.SiteIdWithLocale("converse-de", "de_DE") );
                
                return list;	
            };
            
            htmlLinkInfoGenerator.getSiteCanonicalUrl = function(pdict, locale, siteId ){
                return "http://domain/" + siteId + "/" + locale;     
            };
            
            let htmlLinkInfoList = htmlLinkInfoGenerator.getAlternateLinks( pdict );
            
            Assert.areEqual( 5, htmlLinkInfoList.size() );
            
            Assert.isTrue( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-be/en_BE", "en-BE") ) );
            Assert.isTrue( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-be/fr_BE", "fr-BE") ) );
            Assert.isTrue( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-be/nl_BE", "nl-BE") ) );
            Assert.isTrue( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-de/en_DE", "en-DE") ) );
            Assert.isTrue( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-de/de_DE", "de-DE") ) );
            Assert.isFalse( containsHTMLLinkInfo( htmlLinkInfoList, new converse.utils.HTMLLinkInfo("alternate","http://domain/converse-gb/en_GB", "en-GB") ) );           
        })
        ;

    return PIPELET_NEXT;
};
