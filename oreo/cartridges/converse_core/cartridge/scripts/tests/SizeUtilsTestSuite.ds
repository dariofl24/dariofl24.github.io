/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

importScript("util/SizeUtils.ds");

function execute(args : PipelineDictionary) : Number {
    let SizeUtils = converse.utils.SizeUtils;

    args.Unit.describe("Genesco SizeUtils Test Suite")
        .localized_test("Nike size correctly converted for US site", [Unit.Sites.US], function () {
            let nikeFullSize1 : String = "3";
            let nikeFullSize2 : String = "13";
            let nikeHalfSize1 : String = "4.5";
            let nikeHalfSize2 : String = "12.5";

            Assert.areEqual("030", SizeUtils.transformNikeSize(nikeFullSize1));
            Assert.areEqual("130", SizeUtils.transformNikeSize(nikeFullSize2));
            Assert.areEqual("045", SizeUtils.transformNikeSize(nikeHalfSize1));
            Assert.areEqual("125", SizeUtils.transformNikeSize(nikeHalfSize2));
        })
        .localized_test("Nike size correctly converted for DE site", [Unit.Sites.DE], function () {
            let nikeFullSize1 : String = "3";
            let nikeFullSize2 : String = "13";
            let nikeHalfSize1 : String = "4.5";
            let nikeHalfSize2 : String = "12.5";

            Assert.areEqual(nikeFullSize1, SizeUtils.transformNikeSize(nikeFullSize1));
            Assert.areEqual(nikeFullSize2, SizeUtils.transformNikeSize(nikeFullSize2));
            Assert.areEqual(nikeHalfSize1, SizeUtils.transformNikeSize(nikeHalfSize1));
            Assert.areEqual(nikeHalfSize2, SizeUtils.transformNikeSize(nikeHalfSize2));
        })
        .test("An exception is thrown in case Nike size is empty or not a number", function () {
            let invalidNikeSizes = ["w.ws", null, undefined, "", "...", "2.ff", "0", "0.0"];

            for each (let nikeSize in invalidNikeSizes) {
                Assert.exception(SizeUtils.transformNikeSize, "Nike size to Genesco size conversion expected to fail for Nike size = " + nikeSize, nikeSize);
            }
        });

    return PIPELET_NEXT;
};
