/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("converse_core:constants.ds");
importScript("converse_core:product/ProductUtils.ds");
importScript("converse_core:search/ProductSearchUtils.ds");


importScript("module_test:Framework/Assert.ds"); 

function execute(args : PipelineDictionary) : Number {

    args.Unit.describe("ProductSearchUtils Suite")
        .test("Should return the first Product Variation in the ProductSearchHit if Search was refined by color Attribute", function () {
        	
        	let firstRepresentedProduct = {
        		ID : "firstRepresentedProduct"
        	};
        	
        	let productSearchHit = {
        		firstRepresentedProduct : firstRepresentedProduct
        	};
        	
        	let productSearchModel = {
        		isRefinedByAttribute : function(attributeName : String ) : Boolean {
        			if( attributeName === 'color' )
        			{
        				return true;
        			}
        			return false;
        		},
        		
        		isCategorySearch : function() : Boolean 
        		{
        			return false;
        		},

				getCategoryID : function() : String
				{
					return "myCategory";
				}
        	}
        	
        	
            let productVariationModel = ProductSearchUtils.getProductVariantForProductTile( productSearchHit, productSearchModel );
            
            Assert.areEqual("firstRepresentedProduct", productVariationModel.ID, "Resolved to wrong product variation");
    	
    	})
        .test("Should return the default Product Variation in the ProductSearchHit if Search was NOT refined by color Attribute", function () {
        	
        	let defaultProductVariationModel = {
        		ID : "defaultProductVariationModel"
        	};
        	
        	let productVariationModelInSearchHit = {
        		ID : "productVariationModelInSearchHit"
        	};
        	
        	let productSearchHit = {
        		product : productVariationModelInSearchHit
        	};
        	
        	let productSearchModel = {
        		isRefinedByAttribute : function(attributeName : String ) : Boolean {
        			if( attributeName === 'color' )
        			{
        				return false;
        			}
        			return true;
        		},
        		
        		isCategorySearch : function() : Boolean 
        		{
        			return false;
        		},

				getCategoryID : function() : String
				{
					return "myCategory";
				}
        	}
        	
        	var getDefaultVariationProductOriginal = ProductUtils.getDefaultVariationProduct;
        	
        	
			ProductUtils.getDefaultVariationProduct = function(product)
        	{
        		if( product.ID === "productVariationModelInSearchHit" )
        		{
        			return defaultProductVariationModel;
        		}
        	}
	    	
	    	
	        let productVariationModel = ProductSearchUtils.getProductVariantForProductTile( productSearchHit, productSearchModel );
	            
	        Assert.areEqual("defaultProductVariationModel", productVariationModel.ID, "Resolved to wrong product variation");
        	
        	
        })
        .test("Should return a  Product Variation with Sales Price becase of Sale Category search", function () {
        	
        	let firstRepresentedProduct = {
        		ID : "firstRepresentedProduct"
        	};
        	
        	let productVariationWithSalePrice = {
        		ID : "productVariationWithSalePrice"
        	};
        	
        	let productSearchHit = {
        		firstRepresentedProduct : firstRepresentedProduct
        	};
        	
        	let productSearchModel = {
        		isRefinedByAttribute : function(attributeName : String ) : Boolean {
        			if( attributeName === 'color' )
        			{
        				return false;
        			}
        			return true;
        		},
        		
        		isCategorySearch : function() : Boolean 
        		{
        			return true;
        		},
        		
        		getCategoryID : function() : String
        		{
					return "All Sales";
        		}
        	}
        	
        	var getProductVariationWithSalesPriceOriginal = ProductSearchUtils.getProductVariationWithSalesPrice;
        	ProductSearchUtils.getProductVariationWithSalesPrice =  function(productSearchHit)
        	{
        		return productVariationWithSalePrice;
        	}
        	
        	try{
            	let productVariationModel = ProductSearchUtils.getProductVariantForProductTile( productSearchHit, productSearchModel );
            
            	Assert.areEqual("productVariationWithSalePrice", productVariationModel.ID, "Resolved to wrong product variation");
        	}
        	finally
        	{
        		ProductSearchUtils.getProductVariationWithSalesPrice = getProductVariationWithSalesPriceOriginal;
        	}
    		
    	})
        .test("Should indicate if the Category is a Sales Category", function () {
        	
        	Assert.isTrue(ProductSearchUtils.isSalesCategory( "All Sales" ), "It should be a sales category");
        	
        })
        .test("Should indicate a null is not a a Sales Category", function () {
        	
        	Assert.isFalse(ProductSearchUtils.isSalesCategory( null ), "It should be a sales category");
        	
        })
        .test("Should indicate it is not a  the Category is a Sales Category", function () {
        	
        	Assert.isFalse(ProductSearchUtils.isSalesCategory( "All Sneakers" ), "It should be a sales category");
        	
        })
        .test("Should indicate the ProductSearchModel is for a search of a Sales Category", function () {
        	
        	let productSearchModel = {
        	
        		isCategorySearch : function()
        		{ 
        			return true; 
        		},
        		
        		getCategoryID : function()
        		{
        			return "All Sales (EU)";
        		}
        	
        	}
        	
        	
        	Assert.isTrue(ProductSearchUtils.isSearchForSalesCategory( productSearchModel ), "It should be a sales category search");
        	
        })
        
        .test("Should indicate the ProductSearchModel is NOT for a search of a Sales Category because of the Category", function () {
        	
        	let productSearchModel = {
        	
        		isCategorySearch : function()
        		{ 
        			return true; 
        		},
        		
        		getCategoryID : function()
        		{
        			return "All Sneakers";
        		}
        	
        	}
        	
        	
        	Assert.isFalse(ProductSearchUtils.isSearchForSalesCategory( productSearchModel ), "It should be a sales category search");
        	
        })
        .test("Should indicate the ProductSearchModel is NOT for a search of a Sales Category because it was not based on Categories", function () {
        	
        	let productSearchModel = {
        	
        		isCategorySearch : function()
        		{ 
        			return false; 
        		}
        	
        	}
        	
        	
        	Assert.isFalse(ProductSearchUtils.isSearchForSalesCategory( productSearchModel ), "It should be a sales category search");
        	
        })
        
        .test("Should get a ProductVariant of a set of Represented Products that is in Sale", function () {
        	
        	
        	var pricing1 = {
        		standard : 10,
        		sale : 10
        	}
        	
        	var pricing2 = {
        		standard : 10,
        		sale : 5
        	}
        	
        	var pricing3 = {
        		standard : 10,
        		sale : 10
        	}
        	
        	var productVariation1 = {
        		ID : "productVariation1"
        		
        	}
        	
        	var productVariation2 = {
        		ID : "productVariation2"
        	}
        	
        	var productVariation3 = {
        		ID : "productVariation3"
        	}
        	
        	var productSearchHit = {
        	
        		getRepresentedProducts : function()
        		{ 
        			return [
        				productVariation1,
        				productVariation2,
        				productVariation3
        			]; 
        		}
        	
        	}
        	
        	var getPricingOriginal = ProductUtils.getPricing;
        	
        	ProductUtils.getPricing = function( productVariation ) : Object
        	{
        		if( productVariation.ID === "productVariation1" )
        		{
        			return pricing1;
        			
        		} else if( productVariation.ID === "productVariation2" )
        		{
        			return pricing2;
        			
        		} else if( productVariation.ID === "productVariation3" )
        		{
        			return pricing3;
        			
        		} 
        	}
        	
        	try{
        		let productVariationWithSalesPrice = ProductSearchUtils.getProductVariationWithSalesPrice( productSearchHit );
        		
        		Assert.areEqual("productVariation2", productVariationWithSalesPrice.ID, "It should be a product variant in Sales");
        	}
        	finally
        	{
        		ProductUtils.getPricing = getPricingOriginal;
        	}
        })
        ;

   return PIPELET_NEXT;
}
