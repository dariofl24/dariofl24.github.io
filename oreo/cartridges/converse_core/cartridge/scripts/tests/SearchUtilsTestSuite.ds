/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("converse_core:constants.ds");
importScript("converse_core:util/SearchUtils.ds");

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Library/JSMockito.ds"); 

function execute(args : PipelineDictionary) : Number {

    let Utils = converse.search.SearchUtils;
    let FeatureToggleService = converse.featuretoggle.FeatureToggleService;
    
    let VARIATION_PRODUCT_ID = "M9160_050";
    let FIRST_REPRESENTED_PRODUCT_ID_1 = "M9165_020";
    let FIRST_REPRESENTED_PRODUCT_ID_2 = "M9169_020";
    let FIRST_REPRESENTED_PRODUCT_SKU_2 = "M9169";
    let REPRESENTED_PRODUCT_ID_3 = "M9169_030";
    let REPRESENTED_PRODUCT_SKU_3 = "M9169";
    let REPRESENTED_PRODUCT_ID_4 = "M9169_050";
    let REPRESENTED_PRODUCT_SKU_4 = "M9199";
    let MASTER_PRODUCT_ID = "MP_50";

    let createProduct = function(productOptions) {
        return {
            getID: function() {
                return productOptions.ID;
            },
            isMaster: function() {
                return productOptions.isMaster;
            },
            manufacturerSKU: productOptions.SKU
        };
    };

    let createSearchModel = function(searchModelOptions) {
        let searchHits : ArrayList = new ArrayList();
        
        for each (let searchHitsOption in searchModelOptions.searchHitsOptions) {
            let representedProducts : ArrayList = new ArrayList();
            
            for each (let representedProductOptions in searchHitsOption.representedProductsOptions) {
                representedProducts.add(createProduct(representedProductOptions));
            }
            
            searchHits.add({
                getRepresentedProducts : function() {
                    return representedProducts;
                },
                getFirstRepresentedProduct : function() {
                    return this.getRepresentedProducts().get(0);
                }
            });
        }

        return {
            getCount: function() {
                return searchModelOptions.count;
            },
            getSearchPhrase: function() {
                return searchModelOptions.searchPhrase;
            },
            getProducts: function() {
                return new ArrayList(createProduct(searchModelOptions.targetProductOptions)).iterator();
            },
            getProductSearchHits: function() {
                return searchHits.iterator();
            }
        };
    };

    args.Unit.describe("Search Utils Suite")
        .test("Should return variation productID if only one product found and it is not a master product", function () {
            let searchModel = createSearchModel({
                count: 1,
                targetProductOptions: {
                    ID: VARIATION_PRODUCT_ID,
                    isMaster: false
                }
            });
            
            Assert.areEqual(VARIATION_PRODUCT_ID, Utils.resolveProductID(searchModel), "Resolved to wrong product");
        })
        .test("Should return the productID for the first represented variation of a master product if there is only one represented product", function () {
            let searchModel = createSearchModel({
                count: 1,
                searchPhrase: "m9169",
                targetProductOptions: {
                    ID: MASTER_PRODUCT_ID,
                    isMaster: true
                },
                searchHitsOptions: [{
                    representedProductsOptions: [{
                        ID: FIRST_REPRESENTED_PRODUCT_ID_1
                    }]
                }]
            });
            
            Assert.areEqual(FIRST_REPRESENTED_PRODUCT_ID_1, Utils.resolveProductID(searchModel), "Resolved to wrong product");
        })
        .test("Should return the productID for the first represented variation if all represented products have the same manufacturerSKU", function () {
            let searchModel = createSearchModel({
                count: 1,
                searchPhrase: "m9169",
                targetProductOptions: {
                    ID: MASTER_PRODUCT_ID,
                    isMaster: true
                },
                searchHitsOptions: [{
                    representedProductsOptions: [{
                        SKU: FIRST_REPRESENTED_PRODUCT_SKU_2,
                        ID: FIRST_REPRESENTED_PRODUCT_ID_2
                    }, {
                        SKU: REPRESENTED_PRODUCT_SKU_3
                    }]
                }]
            });
            
            Assert.areEqual(FIRST_REPRESENTED_PRODUCT_ID_2, Utils.resolveProductID(searchModel), "Resolved to wrong product");
        })
        .test("Should return the productID for the master product if not all represented products have the same manufacturerSKU", function () {
            let searchModel = createSearchModel({
                count: 1,
                searchPhrase: "m9169",
                targetProductOptions: {
                    ID: MASTER_PRODUCT_ID,
                    isMaster: true
                },
                searchHitsOptions: [{
                    representedProductsOptions: [{
                        SKU: FIRST_REPRESENTED_PRODUCT_SKU_2,
                        ID: FIRST_REPRESENTED_PRODUCT_ID_2
                    }, {
                        SKU: REPRESENTED_PRODUCT_SKU_4
                    }]
                }]
            });
            
            Assert.areEqual(MASTER_PRODUCT_ID, Utils.resolveProductID(searchModel), "Resolved to wrong product");
        })
        .test("Should return null when there are more than one resutls in the search and 'search-by-sku-enhancement' feature is toggled OFF", function () {
            let searchModel = createSearchModel({
                count: 2,
                targetProductOptions: {
                    ID: VARIATION_PRODUCT_ID,
                    isMaster: false
                }
            });
            
            FeatureToggleService.isFeatureEnabled = function() {
                return false;
            }
            
            Assert.areEqual(null, Utils.resolveProductID(searchModel), "Resolved to wrong product");
        })
        .test("Should return the productID of the concrete variation when it's a search by SKU and 'search-by-sku-enhancement' feature is toggled ON", function () {
            let searchModel = createSearchModel({
                count: 2,
                searchPhrase: "m9169",
                targetProductOptions: {
                    ID: MASTER_PRODUCT_ID,
                    isMaster: true
                },
                searchHitsOptions: [{
                    representedProductsOptions: [{
                        SKU: REPRESENTED_PRODUCT_SKU_3,
                        ID: REPRESENTED_PRODUCT_ID_3
                    }, {
                        SKU: REPRESENTED_PRODUCT_SKU_4,
                        ID: REPRESENTED_PRODUCT_ID_4
                    }]
                }]
            });
            
            FeatureToggleService.isFeatureEnabled = function() {
                return true;
            }
            
            Assert.areEqual(REPRESENTED_PRODUCT_ID_3, Utils.resolveProductID(searchModel), "Resolved to wrong product");

        });

   return PIPELET_NEXT;
}
