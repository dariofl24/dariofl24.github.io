/**
 * @input Unit: Object
 */

importPackage(dw.util);
importPackage(dw.value);
importPackage(dw.campaign);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Mocks/BasketSummaryMocks.ds");

importScript("constants.ds");
importScript("common/libInheritance.ds");
importScript("cart/objects/BasketSummary.ds");
importScript("cart/objects/BasketSummaryHelper.ds");
importScript("util/ViewHelpers.ds");

function execute(args: PipelineDictionary) {
    
    let TEST_MOCKS = converse.test.mocks;
    let CART_OBJ = cart.objects;
    let CURRENCY = converse.constants.CurrencyCode;
    let PromotionType = converse.constants.PromotionType;
    
    let MOCK_BASKET_UUID = "axxssfds333";
    let TEST_DYO_SIZES = { nikeSize: "13", genescoSize: "130" };
    let ORDER_SAVINGS : Money = new Money(-5, CURRENCY);
    let ORDER_PROMO_CODE = '500offorder';

    let CreateMoney = function(amount) {
        return new Money(amount, CURRENCY);
    };

    let CreateQuantity = function(quantity) {
        return new Quantity(quantity, "items");
    };
    
    let CreateBillingMockOrderAddress = function() {
        return new TEST_MOCKS.MockOrderAddress("BillingName", "BillingLastName", "everGreen 12", "evergreen 24", "hongkong", "HK", "China", "77666", "512-666-7777");
    };
    
    let CreateShippingMockOrderAddress = function() {
        return new TEST_MOCKS.MockOrderAddress("ShippingName", "ShippingLastName", "everGreen 12", "evergreen 24", "hongkong", "HK", "China", "77666", "512-666-7777");
    };
    
    let regularItem = TEST_MOCKS.MockItemFromObject({
            'productName': "Lebron tennis", 
            'adjustedPrice': CreateMoney("670"), 
            'adjustedNetPrice': CreateMoney("670"), 
            'adjustedGrossPrice': CreateMoney("680"), 
            'quantity': CreateQuantity("10"),
            'productId': "Lebron2548",
            'productType': converse.constants.ProductType.Regular,
            'pillar': converse.constants.Pillar.Apparel,
            'manufacturerSKU': 'SKU_Lebron2548',
            'size': 'RS'
        });

    let dyoItem = TEST_MOCKS.MockItemFromObject({
            'productName': "Mike tennis",
            'adjustedPrice': CreateMoney("1125"),
            'adjustedNetPrice': CreateMoney("1125"), 
            'adjustedGrossPrice': CreateMoney("1135"), 
            'quantity': CreateQuantity("25"),
            'productId': "Mike987",
            'productType': converse.constants.ProductType.C1,
            'pillar': "converse create",
            'manufacturerSKU': 'SKU_Mike987',
            'size': '',
            'customSize': TEST_DYO_SIZES.nikeSize,
            'metricID': 'FAKE_01',
            'personalization': 'JORA',
            'dyoImageUrl': 'fake_DYO_image'
        });

    let pgcItem = TEST_MOCKS.MockItemFromObject({
            'productName': "Phisical Gift Card", 
            'adjustedPrice': CreateMoney("108"),
            'adjustedNetPrice': CreateMoney("108"), 
            'adjustedGrossPrice': CreateMoney("118"), 
            'quantity': CreateQuantity("2"), 
            'productId': "PGC123",
            'productType': converse.constants.ProductType.PhysicalGiftCard,
            'pillar': "gift cards",
            'manufacturerSKU': 'SKU_PGC123',
            'size': 'PS'
        });

    let egcItem = TEST_MOCKS.MockItemFromObject({
            'productName': "Electronic Gift Card",
            'adjustedPrice': CreateMoney("69"),
            'adjustedNetPrice': CreateMoney("69"), 
            'adjustedGrossPrice': CreateMoney("79"), 
            'quantity': CreateQuantity("3"),
            'productId': "EGC321",
            'productType': converse.constants.ProductType.ElectronicGiftCard,
            'pillar': "gift cards",
            'manufacturerSKU': 'SKU_EGC123',
            'size': 'ES'
        });
    
    let regularItems : dw.util.Collection = new dw.util.ArrayList();
    regularItems.add(regularItem);
    
    let dyoItems : dw.util.Collection = new dw.util.ArrayList();
    dyoItems.add(dyoItem);
    
    let pgcItems : dw.util.Collection = new dw.util.ArrayList();
    pgcItems.add(pgcItem);

    let egcItems : dw.util.Collection = new dw.util.ArrayList();
    egcItems.add(egcItem);

    let regularShippingMethod = TEST_MOCKS.MockShippingMethodFromObject({
        'id': 'regular_method',
        'genescoShippingMethodID': 'R'
    });

    let dyoShippingMethod = TEST_MOCKS.MockShippingMethodFromObject({
        'id': 'dyo_method',
        'genescoShippingMethodID': 'D'
    });

    let pgcShippingMethod = TEST_MOCKS.MockShippingMethodFromObject({
        'id': 'pgc_method',
        'genescoShippingMethodID': 'P'
    });

    let egcShippingMethod = TEST_MOCKS.MockShippingMethodFromObject({
        'id': 'egc_method',
        'genescoShippingMethodID': 'E'
    });
    
    let mockBillingAddress = CreateBillingMockOrderAddress();
    let mockShippingAddress = CreateShippingMockOrderAddress();

    let createRegularShipment = function() {
        return TEST_MOCKS.MockShipmentFromObject({
            'totalGrossPrice': CreateMoney("125"), 
            'totalNetPrice': CreateMoney("120"), 
            'shippingTotal': CreateMoney("3.30"),
            'shippingGrossTotal': CreateMoney("3.40"),
            'totalTax': CreateMoney("2.70"),
            'uuid': "tyio4537qnm159", 
            'productType': converse.constants.ProductType.Regular, 
            'itemList': regularItems,
            'shippingAddress': mockShippingAddress,
            'shippingMethod': regularShippingMethod,
            'gift': true,
            'giftMessage': 'Gift Message'
        });
    };
    
    let createDYOShipment = function() {
        return TEST_MOCKS.MockShipmentFromObject({ 
            'totalGrossPrice': CreateMoney("125"), 
            'totalNetPrice': CreateMoney("100"), 
            'shippingTotal': CreateMoney("3.30"),
            'shippingGrossTotal': CreateMoney("3.40"), 
            'totalTax': CreateMoney("2.70"),
            'uuid': "tyio4537qnm159", 
            'productType': converse.constants.ProductType.C1, 
            'itemList': dyoItems, 
            'shippingAddress': mockShippingAddress,
            'shippingMethod': dyoShippingMethod,
            'gift': true,
            'giftMessage': 'Gift Message'
        });
    };
    
    let createPGCShipment = function() { 
        return TEST_MOCKS.MockShipmentFromObject({
            'totalGrossPrice': CreateMoney("125"), 
            'totalNetPrice': CreateMoney("120"), 
            'shippingGrossTotal': CreateMoney("3.40"), 
            'shippingTotal': CreateMoney("3.30"), 
            'totalTax': CreateMoney("2.70"),
            'uuid': "tyio4537qnm159", 
            'productType': converse.constants.ProductType.PhysicalGiftCard, 
            'itemList': pgcItems, 
            'shippingAddress': mockShippingAddress,
            'shippingMethod': pgcShippingMethod,
            'gift': true,
            'giftMessage': 'Gift Message'
        });
    };
    
    let createEGCShipment = function() {
        return TEST_MOCKS.MockShipmentFromObject({ 
            'totalGrossPrice': CreateMoney("125"),
            'totalNetPrice': CreateMoney("110"), 
            'shippingTotal': CreateMoney("3.30"), 
            'shippingGrossTotal': CreateMoney("3.40"), 
            'totalTax': CreateMoney("2.70"),
            'uuid': "tyio4537qnm159", 
            'productType': converse.constants.ProductType.ElectronicGiftCard, 
            'itemList': egcItems, 
            'shippingAddress': mockShippingAddress,
            'shippingMethod': egcShippingMethod,
            'gift': true,
            'giftMessage': 'Gift Message'
        });
    };
    
    let mockBasketSummaryHelpers = function(helperOptions) {
        CART_OBJ.BasketSummaryHelper.getPromotionCodeResolver = function() {
            return {
                getPromoCodes: function() {
                    return helperOptions.codes;
                }
            };
        };
        
        CART_OBJ.BasketSummaryHelper.getPromotionHelper = function() {
            return {
                getOrderLevelDiscountSavings: function() {
                    return helperOptions.orderLevelSavings;
                }
            };
        };
    };
    
    let CreateShipmentSummary = function(amount, shippingAmount, taxAmount, uuid, productType, shippingAddress) {
        let shipmentSummary = new CART_OBJ.ShipmentSummary();
        
        shipmentSummary.setAmount(new Money(amount, CURRENCY));
        shipmentSummary.setShippingNetAmount(new Money(shippingAmount, CURRENCY));
        shipmentSummary.setTaxAmount(new Money(taxAmount, CURRENCY));
        shipmentSummary.setUUID(uuid);
        shipmentSummary.setProductType(productType);
        shipmentSummary.setShippingAddress(shippingAddress);
        
        return shipmentSummary;
    };
    
    let CreateItemSummary = function(sku, name, description, price, quantity) {
        let itemSummary = new CART_OBJ.ItemSummary();
        
        itemSummary.setSku(sku);
        itemSummary.setName(name);        
        itemSummary.setDescription(description);
        itemSummary.setPrice(new Money(price, CURRENCY));
        itemSummary.setQuantity(quantity);       
        
        return itemSummary;
    };
    
    let CreateOrderAddressSummary = function (name, lastName, address1, address2, city, state, countryCode, postalCode, phone){
        let billingAddress : OrderAddressSummary = new CART_OBJ.OrderAddressSummary();
        billingAddress.setFirstName(name);
        billingAddress.setLastName(lastName);
        billingAddress.setAddress1(address1);
        billingAddress.setAddress2(address2);
        billingAddress.setCity(city);
        billingAddress.setState(state);
        billingAddress.setCountry(countryCode);
        billingAddress.setPostalCode(postalCode);
        billingAddress.setPhone(phone); 
        return billingAddress;
    };
    
    let CreatePriceAdjustmentMock = function(promotionType, promotionClass, netPrice) {
        return {
            getPromotion: function() {
                return {
                    'custom': {
                        'promotionType': {
                            'value' : promotionType
                        },
                        'promoCodeOverride' : ORDER_PROMO_CODE
                    },
                    
                    getPromotionClass: function () : String {
                        return promotionClass;
                    }
                };
            },
            getNetPrice: function () : Money {
                return netPrice;
            }
        }
    };
    
    let CreateMockBasket = function(mockBillingAddress) {
        return new TEST_MOCKS.MockBasket(new Money(33, CURRENCY), new Money(5.5, CURRENCY), new Money(5.6, CURRENCY), new Money(2, CURRENCY), MOCK_BASKET_UUID, CURRENCY, mockBillingAddress);
    };

    let AssertAddress = function(addressSummary, addressMock) {
        Assert.isNotNull(addressSummary, "addressSummary", "'addressSummary' must not be null");
        Assert.areEqual(addressMock.getFirstName(), addressSummary.getFirstName(), "'Name' does not match!");
        Assert.areEqual(addressMock.getLastName(), addressSummary.getLastName(), "'LastName' does not match!");           
        Assert.areEqual(addressMock.getAddress1(), addressSummary.getAddress1(), "'Address1' does not match!");           
        Assert.areEqual(addressMock.getAddress2(), addressSummary.getAddress2(), "'Address2' does not match!");
        Assert.areEqual(addressMock.getCity(), addressSummary.getCity(), "'city' does not match!");
        Assert.areEqual(addressMock.getStateCode(), addressSummary.getState(), "'State' does not match!");
        Assert.areEqual(addressMock.getCountryCode().getValue(), addressSummary.getCountry(), "'Country' does not match!");
        Assert.areEqual(addressMock.getPostalCode(), addressSummary.getPostalCode(), "'postal code' does not match!");
        Assert.areEqual(addressMock.getPhone(), addressSummary.getPhone(), "'phone' does not match!");
    };

    let AssertShipment = function(shipmentSummary, shipmentMock) {
        Assert.areEqual(CURRENCY, shipmentSummary.getCurrencyCode(), "'CurrencyCode' does not match!");
        Assert.areEqual(shipmentMock.custom.productType, shipmentSummary.getProductType(), "'ProductType' field value doesn't match!");
        Assert.areEqual(MOCK_BASKET_UUID + "_" + shipmentMock.custom.productType, shipmentSummary.getUUID(), "Shipment summary UUID incorrectly generated!");
        Assert.areEqual(shipmentMock.getGiftMessage(), shipmentSummary.getGiftMessage(), "Shipment summary doesn't contain original gift message");
        Assert.areEqual(shipmentMock.getTotalGrossPrice().getValue(), shipmentSummary.getAmount().getValue(), "'ShippingSummaryAmount' does not match!");
        Assert.areEqual(shipmentMock.getTotalNetPrice().getValue(), shipmentSummary.getNetAmount().getValue(), "'Shipment summary netAmount' does not match!");
        Assert.areEqual(shipmentMock.getAdjustedShippingTotalNetPrice().getValue(), shipmentSummary.getShippingNetAmount().getValue(), "'ShippingNetAmount' does not match!");
        Assert.areEqual(shipmentMock.getTotalTax().getValue(), shipmentSummary.getTaxAmount().getValue(), "'TaxAmount' does not match!");
    }

    let AssertShipmentLineItems = function(shipmentSummary, itemMocks) {
        let itemSummaryList = shipmentSummary.getItemSummaryList();

        Assert.areEqual(itemMocks.length, itemSummaryList.length, "'item list' must contain " + itemMocks.length + " elements");

        for (let i = 0; i < itemMocks.length; i++) {
            let itemSummary = itemSummaryList.get(i);
            let itemMock = itemMocks[i];

            Assert.areEqual(itemMock.getProductID(), itemSummary.getSku(), "Item's 'Sku' does not match!");
            Assert.areEqual(itemMock.getProductName(), itemSummary.getName(), "'Name' does not match!");
            Assert.areEqual(itemMock.getProductName(), itemSummary.getDescription(), "'Description' does not match!");
            Assert.areEqual(itemMock.getAdjustedPrice().divide(itemMock.getQuantity().getValue()).getValue(), itemSummary.getUnitPrice().getValue(), "'UnitPrice' does not match!");
            Assert.areEqual(itemMock.getAdjustedNetPrice().getValue(), itemSummary.getPrice().getValue(), "'Price' does not match!");
            Assert.areEqual(itemMock.getQuantity().getValue(), itemSummary.getQuantity(), "'Quantity' does not match!");
            Assert.areEqual(itemMock.product.custom.productType.value, itemSummary.getProductType());
            Assert.areEqual(itemMock.product.custom.pillar.value, itemSummary.getPillar());
            Assert.areEqual(itemMock.manufacturerSKU, itemSummary.getManufacturerSKU());
            Assert.areEqual(itemMock.custom.giftcardName, itemSummary.getGiftCardName());
            Assert.areEqual(itemMock.custom.giftcardEmail, itemSummary.getGiftCardEmail());
            
            if (shipmentSummary.getProductType() === converse.constants.ProductType.C1) {
                //Would be much better to use localized_test to assert these in their own test
                if (isSite('US')) {
                    Assert.areEqual(TEST_DYO_SIZES.genescoSize, itemSummary.getSize(), "DYO item's size isn't equal to genescoSize");
                } else {
                    Assert.isNotEmpty(itemSummary.getSize(), "DYO item's size cannot be empty");
                }
                
                Assert.areEqual(itemMock.custom.metricID, itemSummary.getMetricID());
                Assert.areEqual(itemMock.custom.personalization, itemSummary.getPersonalization());
                Assert.areEqual(itemMock.custom.dyoImageUrl, itemSummary.getDYOImageUrl());
            } else {
                Assert.areEqual(itemMock.product.custom.size, itemSummary.getSize());
            }
        }
    }

    let AssertShippingMethod = function(mainShippingMethodSummary, mainShippingMethod) {
        Assert.isNotNull(mainShippingMethodSummary, 'ShippingMethodSummary cannot be null');
        Assert.isNotNull(mainShippingMethod, 'ShippingMethod cannot be null');

        Assert.areEqual(mainShippingMethodSummary.getID(), mainShippingMethod.getID());
        Assert.areEqual(mainShippingMethodSummary.getGenescoShippingMethodID(), mainShippingMethod.custom.genescoShippingMethodID);
    }

    let AssertShippingMethods = function(shipmentSummary, mainShippingMethod, pgcShippingMethod, egcShippingMethod) {
        let mainShippingMethodSummary = shipmentSummary.getShippingMethod();
        AssertShippingMethod(mainShippingMethodSummary, mainShippingMethod);

        if (pgcShippingMethod) {
            let pgcShippingMethodSummary = shipmentSummary.getPGCShippingMethod();
            AssertShippingMethod(pgcShippingMethodSummary, pgcShippingMethod);            
        }

        if (egcShippingMethod) {
            let egcShippingMethodSummary = shipmentSummary.getEGCShippingMethod();
            AssertShippingMethod(egcShippingMethodSummary, egcShippingMethod);            
        }
    }
    
    args.Unit.describe("BasketSummary")
        .test("Verify_BasketSummary_set_base_data_properly", function () {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let mockUUID =  "xyz123456789";
            let mockAmount = new Money(new Number("120"), CURRENCY);
            let mockShippingAmount = new Money(new Number("10.50"), CURRENCY);
            let mockTaxAmount = new Money(new Number("3.33"), CURRENCY);
            Assert.isTrue(basketSummary != null, "'basket summary' must not be null");
 
            basketSummary.setUUID(mockUUID);
            basketSummary.setAmount(mockAmount);
            basketSummary.setShippingNetAmount(mockShippingAmount);
            basketSummary.setTaxAmount(mockTaxAmount);
            
            Assert.areEqual(mockUUID, basketSummary.getUUID(), "'UUID' field value doesn't match!"); 
            Assert.isTrue(mockAmount.equals(basketSummary.getAmount()), "'Amount' field value doesn't match!");
            Assert.areEqual(mockShippingAmount, basketSummary.getShippingNetAmount(), "'Shipping Net Amount' field value doesn't match!"); 
            Assert.areEqual(mockAmount.getCurrencyCode(), basketSummary.getCurrencyCode(), "'Currency Code' field value doesn't match!");
            Assert.areEqual(mockTaxAmount, basketSummary.getTaxAmount(), "'Tax Amount' field value doesn't match!");             
        })
        .test("Verify_BasketSummary_set_shipment_summaries_properly", function () {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let shippingAddress : OrderAddressSummary = CreateOrderAddressSummary("X", "X", "X", "X", "X", "X", "X", "X", "X");
            let shipmentSummaryMock1 = CreateShipmentSummary(150, 9, 2, "123456", converse.constants.ProductType.C1, shippingAddress);
            let shipmentSummaryMock2 = CreateShipmentSummary(130, 8, 1, "123477", converse.constants.ProductType.Regular, shippingAddress);
                        
            basketSummary.addShipmentSummary(shipmentSummaryMock1);
            basketSummary.addShipmentSummary(shipmentSummaryMock2);
            
            let firstShipmentSummary = basketSummary.getShipmentSummaryList().get(0);
            let secondShipmentSummary = basketSummary.getShipmentSummaryList().get(1);
            
            Assert.areEqual(basketSummary.getShipmentSummaryList().length, 2, "getShipmentSummaryList" ,"2 shipment summaries expected for basket"); 

            Assert.isTrue(shipmentSummaryMock1.getAmount().equals(firstShipmentSummary.getAmount()), "'ShipmentSummary.Amount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock1.getShippingNetAmount(), firstShipmentSummary.getShippingNetAmount(), "'ShipmentSummary.ShippingNetAmount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock1.getTaxAmount(), firstShipmentSummary.getTaxAmount(), "'ShipmentSummary.TaxAmount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock1.getCurrencyCode(), firstShipmentSummary.getCurrencyCode(), "'ShipmentSummary.CurrencyCode' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock1.getUUID(), firstShipmentSummary.getUUID(), "'ShipmentSummary.UUID' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock1.getProductType(), firstShipmentSummary.getProductType(), "'ShipmentSummary.ProductType' field value doesn't match!");
            Assert.isNotNull(firstShipmentSummary.getShippingAddress(), "shippingAddress", "'shipping address' must not be null");
            
            Assert.isTrue(shipmentSummaryMock2.getAmount().equals(secondShipmentSummary.getAmount()), "'ShipmentSummary.Amount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock2.getShippingNetAmount(), secondShipmentSummary.getShippingNetAmount(), "'ShipmentSummary.ShippingNetAmount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock2.getTaxAmount(), secondShipmentSummary.getTaxAmount(), "'ShipmentSummary.TaxAmount' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock2.getCurrencyCode(), secondShipmentSummary.getCurrencyCode(), "'ShipmentSummary.CurrencyCode' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock2.getUUID(), secondShipmentSummary.getUUID(), "'ShipmentSummary.UUID' field value doesn't match!");
            Assert.areEqual(shipmentSummaryMock2.getProductType(), secondShipmentSummary.getProductType(), "'ShipmentSummary.ProductType' field value doesn't match!");
            Assert.isNotNull(secondShipmentSummary.getShippingAddress(), "shippingAddress", "'shipping address' must not be null");
        })
        .test("Verify_ShipmentSummary_set_item_summaries_properly", function () {
            let shipmentSummary : ShipmentSummary = new CART_OBJ.ShipmentSummary();
            let itemSummaryMock1 = CreateItemSummary("m9160", "Chuck Taylor", "Chuck Taylor Description", 55, 3);
            let itemSummaryMock2 = CreateItemSummary("m9165", "Jack Purcell", "Jack Purcell Description", 33.5, 2);
                        
            shipmentSummary.addItemSummary(itemSummaryMock1);
            shipmentSummary.addItemSummary(itemSummaryMock2);
            
            let firstItemSummary = shipmentSummary.getItemSummaryList().get(0);
            let secondItemSummary = shipmentSummary.getItemSummaryList().get(1);
            
            Assert.areEqual(shipmentSummary.getItemSummaryList().length, 2, "getItemSummaryList" ,"2 item summaries expected for shipment"); 

            Assert.areEqual(itemSummaryMock1.getSku(), firstItemSummary.getSku(), "'ItemSummary.Sku' field value doesn't match!");
            Assert.areEqual(itemSummaryMock1.getName(), firstItemSummary.getName(), "'ItemSummary.Name' field value doesn't match!");
            Assert.areEqual(itemSummaryMock1.getDescription(), firstItemSummary.getDescription(), "'ItemSummary.Description' field value doesn't match!");
            Assert.areEqual(itemSummaryMock1.getPrice(), firstItemSummary.getPrice(), "'ItemSummary.Price' field value doesn't match!");
            Assert.areEqual(itemSummaryMock1.getQuantity(), firstItemSummary.getQuantity(),"'ItemSummary.Quantity' field value doesn't match!");
            
            Assert.areEqual(itemSummaryMock2.getSku(), secondItemSummary.getSku(), "'ItemSummary.Sku' field value doesn't match!");
            Assert.areEqual(itemSummaryMock2.getName(), secondItemSummary.getName(), "'ItemSummary.Name' field value doesn't match!");
            Assert.areEqual(itemSummaryMock2.getDescription(), secondItemSummary.getDescription(), "'ItemSummary.Description' field value doesn't match!");
            Assert.areEqual(itemSummaryMock2.getPrice(), secondItemSummary.getPrice(), "'ItemSummary.Price' field value doesn't match!");
            Assert.areEqual(itemSummaryMock2.getQuantity(), secondItemSummary.getQuantity(), "'ItemSummary.Quantity' field value doesn't match!");            
        })
        .test("Verify_BillingAddress_is_set_properly", function () {
            let name = "Name";
            let lastName = "lastName";
            let address1 = "evergreen 14";
            let address2 = "evergreen 28";
            let city = "gdl";
            let state = "jal";
            let countryCode = "MEX";
            let postalCode = "99999"
            let phone = "555-555-6666";     
            
            let billingAddress : OrderAddressSummary = CreateOrderAddressSummary(name, lastName, address1, address2, city, state, countryCode, postalCode, phone);
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();

            basketSummary.setBillingAddress(billingAddress);
            
            let billingAddressSummary = basketSummary.getBillingAddress();
                        
            Assert.areEqual(name, billingAddressSummary.getFirstName(), "'first name' does not match!");
            Assert.areEqual(lastName, billingAddressSummary.getLastName(), "'last name' does not match!");
            Assert.areEqual(address1, billingAddressSummary.getAddress1(), "'address1' does not match!");
            Assert.areEqual(address2, billingAddressSummary.getAddress2(), "'address2' does not match!");
            Assert.areEqual(city, billingAddressSummary.getCity(), "'city' does not match!");
            Assert.areEqual(state, billingAddressSummary.getState(), "'state' does not match!");
            Assert.areEqual(countryCode, billingAddressSummary.getCountry(), "'country' does not match!");  
            Assert.areEqual(postalCode, billingAddressSummary.getPostalCode(), "'postalCode' does not match!"); 
            Assert.areEqual(phone, billingAddressSummary.getPhone(), "'phone' does not match!");                
        })
        .test("Verify_ShippingAddress_is_set_properly", function () {
            let name = "Name";
            let lastName = "lastName";
            let address1 = "evergreen 14";
            let address2 = "evergreen 28";
            let city = "gdl";
            let state = "jal";
            let countryCode = "MEX";
            let postalCode = "99999"
            let phone = "555-555-6666";     
            
            let shippingAddress : OrderAddressSummary = CreateOrderAddressSummary(name, lastName, address1, address2, city, state, countryCode, postalCode, phone);
            let shipmentSummaryMock1 = CreateShipmentSummary(150, 9, 2, "123456", converse.constants.ProductType.C1, shippingAddress);
            let shipmentSummaryMock2 = CreateShipmentSummary(130, 8, 1, "123477", converse.constants.ProductType.Regular, shippingAddress);            
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            basketSummary.addShipmentSummary(shipmentSummaryMock1);
            basketSummary.addShipmentSummary(shipmentSummaryMock2);
            
            Assert.areEqual(basketSummary.getShipmentSummaryList().length, 2, "'shipment list' must contain 2 elements");
            
            for each(let shipment in basketSummary.getShipmentSummaryList() )
            {
                let address = shipment.getShippingAddress();
                Assert.areEqual(name, address.getFirstName(), "'first name' does not match!");
                Assert.areEqual(lastName, address.getLastName(), "'last name' does not match!");
                Assert.areEqual(address1, address.getAddress1(), "'address1' does not match!");
                Assert.areEqual(address2, address.getAddress2(), "'address2' does not match!");
                Assert.areEqual(city, address.getCity(), "'city' does not match!");
                Assert.areEqual(state, address.getState(), "'state' does not match!");
                Assert.areEqual(countryCode, address.getCountry(), "'country' does not match!");    
                Assert.areEqual(postalCode, address.getPostalCode(), "'postalCode' does not match!");   
                Assert.areEqual(phone, address.getPhone(), "'phone' does not match!");
            }
        })
        .test("Verify_BasketSummaryHelper_correctly_generates_basketSummary", function () {
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            let regularShipment = createRegularShipment();
            let dyoShipment = createDYOShipment();
            let pgcShipment = createPGCShipment();
            let egcShipment = createEGCShipment();
            
            shipmentsList.add(regularShipment);
            shipmentsList.add(dyoShipment);
            shipmentsList.add(pgcShipment);
            shipmentsList.add(egcShipment);
            
            let mockBasket : Object = CreateMockBasket(mockBillingAddress);
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(regularShipment);
            
            let basketSummary = CART_OBJ.BasketSummaryHelper.getBasketSummary(mockBasket);
            
            Assert.isNotNull(basketSummary, "basketSummary", "'basket summary' must not be null");
            Assert.areEqual(mockBasket.getTotalGrossPrice().getValue(), basketSummary.getAmount().getValue(), "'BasketSummaryAmount' does not match!");
            Assert.areEqual(mockBasket.getUUID(), basketSummary.getUUID(), "'UUID' does not match!");
            Assert.areEqual(mockBasket.getAdjustedShippingTotalNetPrice().getValue(), basketSummary.getShippingNetAmount().getValue(), "'ShippingNetAmount' does not match!");
            Assert.areEqual(mockBasket.getTotalTax().getValue(), basketSummary.getTaxAmount().getValue(), "'TaxAmount' does not match!");
            Assert.areEqual(mockBasket.getCurrencyCode(), basketSummary.getCurrencyCode(), "'CurrencyCode' does not match!");
            
            let billingAddressSummary = basketSummary.getBillingAddress();
            AssertAddress(billingAddressSummary, mockBillingAddress);
            
            let shipmentSummaryList = basketSummary.getShipmentSummaryList();
            Assert.areEqual(2, shipmentSummaryList.length, "'shipment list' must contain 2 elements");
            
            let expectedRegularItems = new dw.util.ArrayList();
            expectedRegularItems.add(regularItem);
            expectedRegularItems.add(pgcItem);
            expectedRegularItems.add(egcItem);

            let expectedRegularShipment = TEST_MOCKS.MockShipmentFromObject({ 
                    'totalGrossPrice': CreateMoney("375"),
                    'totalNetPrice': CreateMoney("350"), 
                    'shippingTotal': CreateMoney("9.90"), 
                    'shippingGrossTotal': CreateMoney("10.00"), 
                    'totalTax': CreateMoney("8.10"),
                    'productType': converse.constants.ProductType.Regular, 
                    'itemList': expectedRegularItems, 
                    'shippingAddress': mockShippingAddress,
                    'uuid': mockBasket.getUUID() + "_" + converse.constants.ProductType.Regular,
                    'giftMessage': 'Gift Message'
                });

            let regularShipmentSummary = shipmentSummaryList.get(0);
            AssertShipment(regularShipmentSummary, expectedRegularShipment);
            AssertAddress(regularShipmentSummary.getShippingAddress(), mockShippingAddress);
            AssertShipmentLineItems(regularShipmentSummary, expectedRegularItems);
            AssertShippingMethods(regularShipmentSummary, regularShippingMethod, pgcShippingMethod, egcShippingMethod);

            let expectedDYOItems = new dw.util.ArrayList();
            expectedDYOItems.add(dyoItem);

            let expectedDyoShipment : Object = TEST_MOCKS.MockShipmentFromObject({ 
                    'totalGrossPrice': CreateMoney("125"), 
                    'totalNetPrice': CreateMoney("100"), 
                    'shippingTotal': CreateMoney("3.30"), 
                    'shippingGrossTotal': CreateMoney("3.40"), 
                    'totalTax': CreateMoney("2.70"),
                    'uuid': "tyio4537qnm159", 
                    'productType': converse.constants.ProductType.C1, 
                    'itemList': expectedDYOItems,
                    'shippingAddress': mockShippingAddress,
                    'uuid': mockBasket.getUUID() + "_" + converse.constants.ProductType.C1,
                    'giftMessage': 'Gift Message'
                });

            let dyoShipmentSummary = shipmentSummaryList.get(1);
            AssertShipment(dyoShipmentSummary, expectedDyoShipment);
            AssertAddress(dyoShipmentSummary.getShippingAddress(), mockShippingAddress);
            AssertShipmentLineItems(dyoShipmentSummary, expectedDYOItems);
            AssertShippingMethods(dyoShipmentSummary, dyoShippingMethod, null, null);
        })
        .test("Shipping method correctly resolved for a regular shipment with regular and eGC or pGC items", function () {
            let createShippingMethod = function(genescoShippingId, sigmaShippingId) {
                let shippingMethod = new CART_OBJ.ShippingMethodSummary();
                shippingMethod.setGenescoShippingMethodID(genescoShippingId);
                shippingMethod.setSigmaShippingMethodID(sigmaShippingId);
                
                return shippingMethod;
            };
            
            let regularGenescoShippingId = "1";
            let regularSigmaShippingId = "A";
            let egcGenescoShippingId = "2";
            let egcSigmaShippingId = "B";
            let pgcGenescoShippingId = "3";
            let pgcSigmaShippingId = "C";
            
            let regularShippingMethod = createShippingMethod(regularGenescoShippingId, regularSigmaShippingId);
            let egcShippingMethod = createShippingMethod(egcGenescoShippingId, egcSigmaShippingId);
            let gcShippingMethod = createShippingMethod(pgcGenescoShippingId, pgcSigmaShippingId);
            
            let shipmentOnlyRegular : Object = new CART_OBJ.ShipmentSummary();
            shipmentOnlyRegular.setShippingMethod(regularShippingMethod);
        
            Assert.areEqual(regularGenescoShippingId, shipmentOnlyRegular.getShippingMethod().getGenescoShippingMethodID());
            Assert.areEqual(regularSigmaShippingId, shipmentOnlyRegular.getShippingMethod().getSigmaShippingMethodID());
            
            let shipmentOnlyEGC : Object = new CART_OBJ.ShipmentSummary();
            shipmentOnlyEGC.setShippingMethod(null);
            shipmentOnlyEGC.setEGCShippingMethod(egcShippingMethod);
        
            Assert.areEqual(egcGenescoShippingId, shipmentOnlyEGC.getShippingMethod().getGenescoShippingMethodID());
            Assert.areEqual(egcSigmaShippingId, shipmentOnlyEGC.getShippingMethod().getSigmaShippingMethodID());
            
            let shipmentOnlyPGC : Object = new CART_OBJ.ShipmentSummary();
            shipmentOnlyPGC.setShippingMethod(null);
            shipmentOnlyPGC.setEGCShippingMethod(null);
            shipmentOnlyPGC.setPGCShippingMethod(gcShippingMethod);
        
            Assert.areEqual(pgcGenescoShippingId, shipmentOnlyPGC.getShippingMethod().getGenescoShippingMethodID());
            Assert.areEqual(pgcSigmaShippingId, shipmentOnlyPGC.getShippingMethod().getSigmaShippingMethodID());
            
            let regularAndEGCAndPGC : Object = new CART_OBJ.ShipmentSummary();
            regularAndEGCAndPGC.setShippingMethod(regularShippingMethod);
            regularAndEGCAndPGC.setEGCShippingMethod(egcShippingMethod);
            regularAndEGCAndPGC.setPGCShippingMethod(gcShippingMethod);
        
            Assert.areEqual(regularGenescoShippingId, regularAndEGCAndPGC.getShippingMethod().getGenescoShippingMethodID());
            Assert.areEqual(regularSigmaShippingId, regularAndEGCAndPGC.getShippingMethod().getSigmaShippingMethodID());
        })
        .test("PromotionCode correctly generated for combined order with a product promotion different for each shipments", function() {
            let regularShipment = createRegularShipment();
            let dyoShipment = createDYOShipment();
            
            regularShipment.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.FREESHIP), CreatePriceAdjustmentMock(PromotionType.DISCOUNT)));
            dyoShipment.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.GWP), CreatePriceAdjustmentMock(PromotionType.PRBK)));
            
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            shipmentsList.add(regularShipment);
            shipmentsList.add(dyoShipment);
            
            let mockBasket : Object = CreateMockBasket();
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(regularShipment);
            
            let basketSummary = new CART_OBJ.BasketSummary();
            CART_OBJ.BasketSummaryHelper.createLineItemContainerShipments(mockBasket, basketSummary, null);
            
            let regularShipmentSummary = basketSummary.getShipmentSummaryList().get(0);
            let dyoShipmentSummary = basketSummary.getShipmentSummaryList().get(1);

            Assert.areEqual(PromotionType.DISCOUNT + PromotionType.FREESHIP, regularShipmentSummary.getPromoCode(), "'PromoCode' does not match for regular shipment!");
            Assert.isTrue(regularShipmentSummary.hasDiscounts(), "Regular ShipmentSummary is expected to have discounts!");
            
            Assert.areEqual(PromotionType.PRBK + PromotionType.GWP, dyoShipmentSummary.getPromoCode(), "'PromoCode' does not match for DYO shipment!");
            Assert.isTrue(dyoShipmentSummary.hasDiscounts(), "DYO ShipmentSummary is expected to have discounts!");
        })
        .test("PromotionCode correctly generated (the value from promoCodeOverrride is returned) for Regular order with an order level promotion", function() {
            let regularShipment = createRegularShipment();
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            shipmentsList.add(regularShipment);

            let mockBasket : Object = CreateMockBasket();
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(regularShipment);

            let basketSummary = new CART_OBJ.BasketSummary();
            
            let promoCodes = {};
            promoCodes[converse.constants.ProductType.Regular] = ORDER_PROMO_CODE;
            mockBasketSummaryHelpers({ orderLevelSavings: ORDER_SAVINGS, codes: promoCodes });

            CART_OBJ.BasketSummaryHelper.createLineItemContainerShipments(mockBasket, basketSummary, null);
            let regularShipmentSummary = basketSummary.getShipmentSummaryList().get(0);

            Assert.areEqual(ORDER_PROMO_CODE, regularShipmentSummary.getPromoCode(), "'PromoCode' does not match for regular shipment!");
        })
        .test("PromotionCode correctly generated (the value from promoCodeOverrride is returned) for DYO order with an order level promotion", function() {
            let dyoShipment = createDYOShipment();
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            shipmentsList.add(dyoShipment);

            let mockBasket : Object = CreateMockBasket();
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(dyoShipment);
            mockBasket.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.DISCOUNT, Promotion.PROMOTION_CLASS_ORDER, ORDER_SAVINGS)));
            
            let basketSummary = new CART_OBJ.BasketSummary();
            
            let promoCodes = {};
            promoCodes[converse.constants.ProductType.C1] = ORDER_PROMO_CODE;
            mockBasketSummaryHelpers({ orderLevelSavings: ORDER_SAVINGS, codes: promoCodes });
            
            CART_OBJ.BasketSummaryHelper.createLineItemContainerShipments(mockBasket, basketSummary, null);
            let dyoShipmentSummary = basketSummary.getShipmentSummaryList().get(0);

            Assert.areEqual(ORDER_PROMO_CODE, dyoShipmentSummary.getPromoCode(), "'PromoCode' does not match for DYO shipment!");
        })
        .test("PromotionCode correctly generated for combined order with an order level promotion (qualifying products different)", function() {
            let regularShipment = createRegularShipment();
            let dyoShipment = createDYOShipment();
            
            regularShipment.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.GWP), CreatePriceAdjustmentMock(PromotionType.PRBK)));
            
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            shipmentsList.add(regularShipment);
            shipmentsList.add(dyoShipment);
            
            let mockBasket : Object = CreateMockBasket();
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(regularShipment);
            mockBasket.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.DISCOUNT, Promotion.PROMOTION_CLASS_ORDER, ORDER_SAVINGS)));
            
            let basketSummary = new CART_OBJ.BasketSummary();
            
            let promoCodes = {};
            promoCodes[converse.constants.ProductType.Regular] = PromotionType.PRBK_AND_GWP;
            promoCodes[converse.constants.ProductType.C1] = ORDER_PROMO_CODE;
            mockBasketSummaryHelpers({ orderLevelSavings: ORDER_SAVINGS, codes: promoCodes });
            
            CART_OBJ.BasketSummaryHelper.createLineItemContainerShipments(mockBasket, basketSummary, null);
            
            let regularShipmentSummary = basketSummary.getShipmentSummaryList().get(0);
            let dyoShipmentSummary = basketSummary.getShipmentSummaryList().get(1);
            
            Assert.areEqual(PromotionType.PRBK_AND_GWP, regularShipmentSummary.getPromoCode(), "Order promo code should be assigned to regular shipment if order level promo is for regular products!");
            Assert.areEqual(ORDER_PROMO_CODE, dyoShipmentSummary.getPromoCode(), "DYO shipment should be assigned a product level promo code!");
        })
        .test("PromotionCode correctly generated and savings considered for combined order with an order level promotion (qualifying products the same, i.e. no product level promotions)", function() {
            let regularShipment = createRegularShipment();
            let dyoShipment = createDYOShipment();
            
            let shipmentsList : dw.util.Collection = new dw.util.ArrayList();
            shipmentsList.add(regularShipment);
            shipmentsList.add(dyoShipment);
            
            let mockBasket : Object = CreateMockBasket();
            mockBasket.setShipmentList(shipmentsList);
            mockBasket.setDefaultShipment(regularShipment);
            mockBasket.setPriceAdjustments(new dw.util.ArrayList(CreatePriceAdjustmentMock(PromotionType.DISCOUNT, Promotion.PROMOTION_CLASS_ORDER, ORDER_SAVINGS)));
            
            let basketSummary = new CART_OBJ.BasketSummary();
            
            let promoCodes = {};
            promoCodes[converse.constants.ProductType.Regular] = ORDER_PROMO_CODE;
            promoCodes[converse.constants.ProductType.C1] = ORDER_PROMO_CODE;
            mockBasketSummaryHelpers({ orderLevelSavings: ORDER_SAVINGS, codes: promoCodes });
            
            CART_OBJ.BasketSummaryHelper.createLineItemContainerShipments(mockBasket, basketSummary, null);
            
            let regularShipmentSummary = basketSummary.getShipmentSummaryList().get(0);
            let dyoShipmentSummary = basketSummary.getShipmentSummaryList().get(1);
            
            Assert.areEqual(ORDER_PROMO_CODE, regularShipmentSummary.getPromoCode(), "Order promo code should be assigned to both regular and DYO shipments if order level promo is not set per product!");
            Assert.areEqual(ORDER_PROMO_CODE, dyoShipmentSummary.getPromoCode(), "Order promo code should be assigned to both regular and DYO shipments if order level promo is not set per product!");
            
            Assert.isTrue(regularShipmentSummary.hasOrderLevelDiscounts(), "Regular ShipmentSummary is expected to have order level discounts!");
            Assert.areEqual(regularShipment.getTotalGrossPrice().add(ORDER_SAVINGS).getValue(), regularShipmentSummary.getAmount(false).getValue(), "'ShippingSummaryAmount' does not match!");
            Assert.areEqual(regularShipment.getTotalGrossPrice().getValue(), regularShipmentSummary.getAmount(true).getValue(), "'ShippingSummaryAmount' does not match!");
            
            Assert.isFalse(dyoShipmentSummary.hasOrderLevelDiscounts(), "DYO ShipmentSummary should not have order level discounts!");
            Assert.areEqual(dyoShipment.getTotalGrossPrice().getValue(), dyoShipmentSummary.getAmount(true).getValue(), "'ShippingSummaryAmount' does not match!");
        })
        .test("$1 should be subtracted from the discountable merchandize amount for a shipment summary because of an issue on Cardinal/PayPal", function() {
            // Unfortunately, Cardinal/PayPal does not accept payments where (Amount - ShippingAmount) is equal to 0 (zero),
            // i.e. in case we do a full discount on order, merchandize total is 0 (zero). Therefore, we reserve $1 and subtract
            // it from the merchandize total, as a result it passes Cardinal/PayPal validation because Amount - ShippingAmount > 0 (zero)
            
            let DISCOUNTABLE_MERCHANDIZE_AMOUNT = new Money(32, CURRENCY);
            let SHIPPING_NET_AMOUNT = new Money(5.95, CURRENCY);
            let AMOUNT = new Money(38.95, CURRENCY);
            
            let shipmentSummaryMock = {
                getAmount: function() {
                    return AMOUNT;
                },
                
                getShippingNetAmount: function() {
                    return SHIPPING_NET_AMOUNT;
                }
            };
            
            let discountableMerchandizeAmount : Money = CART_OBJ.BasketSummaryHelper.getDiscountableMerchandizeAmountForShipment(shipmentSummaryMock);
            
            Assert.areEqual(DISCOUNTABLE_MERCHANDIZE_AMOUNT.getValue(), discountableMerchandizeAmount.getValue(), "Discountable merchandize amount doesn't match");
        })
        .test("Order level discount correctly split for combined order", function() {
            let ORDER_DISCOUNT_AMOUNT : Money = new Money(-65, CURRENCY);
            let DISCOUNTABLE_MERCHANDIZE_AMOUNT : Money = new Money(32, CURRENCY);
            
            CART_OBJ.BasketSummaryHelper.getDiscountableMerchandizeAmountForShipment = function() {
                return DISCOUNTABLE_MERCHANDIZE_AMOUNT;
            };
            
            mockBasketSummaryHelpers({ orderLevelSavings: ORDER_DISCOUNT_AMOUNT });
            
            let linetItemContainerMock = {
                isCombined: function() {
                    return true;
                },
                
                getShipmentSummaryList: function() {
                    return new ArrayList([
                        {
                            setOrderDiscountSavings: function(discount) {
                                Assert.areEqual(DISCOUNTABLE_MERCHANDIZE_AMOUNT.multiply(-1).getValue(), discount.getValue());
                            }
                        }, {
                            setOrderDiscountSavings: function(discount) {
                                Assert.areEqual(ORDER_DISCOUNT_AMOUNT.add(DISCOUNTABLE_MERCHANDIZE_AMOUNT).getValue(), discount.getValue());
                            }
                        }]);
                }
            };
            
            CART_OBJ.BasketSummaryHelper.addOrderLevelDiscountsToSummary(linetItemContainerMock);
        });

    return PIPELET_NEXT;
};