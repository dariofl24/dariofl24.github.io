/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);

importScript("module_test:Framework/Assert.ds");
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:product/ImageProductResolver.ds");

function execute(args : PipelineDictionary) : Number {

    let ImageProductResolver = converse.product.ImageProductResolver;

    var createVariationAttribute = function(id : String) : Object {
        return { ID: id };
    };

    var createVariationAttributeValue = function(id : String, value : Object) : Object {
        return { ID: id, value: value };
    };

    var createProduct = function(id : String, master : Boolean) : Object {
        return { ID: id, master: master };
    };

    var createVariant = function(id : String, orderable : Boolean) : Object {
        var variant = createProduct(id, false);
        variant.getAvailabilityModel = function() {
            return {
                isOrderable: function() {
                    return orderable;
                }
            }
        };
        return variant;
    };

    var createVariationModel = function(variationAttribute, selectedValue, defaultVariant, variants) {
        return {
            getProductVariationAttribute: function(name) { return variationAttribute || null; },
            getSelectedValue: function(variationAttribute) { return selectedValue || null; },
            getDefaultVariant: function() { return defaultVariant || null; },
            getVariants: function() { return variants || new ArrayList(); }
        };
    };

    var assertImageProduct= function(product, variationModel, expectedID) {
        let imageProduct = ImageProductResolver.getImageProduct(product, variationModel);
        Assert.isNotNull(imageProduct);
        Assert.areEqual(expectedID, imageProduct.ID);
    };

    args.Unit.describe("ImageProductResolver Test Suite")
        .test("Non-master product with no variation model", function () {
            let product = createProduct("SP1", false);

            assertImageProduct(product, null, "SP1");
        })
        .test("Master product with no variation model", function () {
            let product = createProduct("MP1", true);

            assertImageProduct(product, null, "MP1");
        })
        .test("Master product with empty variation model", function () {
            let product = createProduct("MP1", true);
            let variationModel = createVariationModel();

            assertImageProduct(product, variationModel, "MP1");
        })
        .test("Master product with variation model returning variation attribute but no selected value", function () {
            let product = createProduct("MP1", true);
            let variationAttribute = createVariationAttribute("color");
            let variationModel = createVariationModel(variationAttribute);

            assertImageProduct(product, variationModel, "MP1");
        })
        .test("Master product with variation model returning variation attribute and selected value", function () {
            let product = createProduct("MP1", true);
            let variationAttribute = createVariationAttribute("color");
            let selectedValue = createVariationAttributeValue("VAL1", { content: "test" });
            let variationModel = createVariationModel(variationAttribute, selectedValue);

            assertImageProduct(product, variationModel, "VAL1");
        })
        .test("Master product with variation model returning variation attribute, selected value and orderable default variant", function () {
            let product = createProduct("MP1", true);
            let variationAttribute = createVariationAttribute("color");
            let selectedValue = createVariationAttributeValue("VAL1", { content: "test" });
            let defaultVariant = createVariant("VAR1", true);
            let variationModel = createVariationModel(variationAttribute, selectedValue, defaultVariant);

            assertImageProduct(product, variationModel, "VAL1");
        })
        .test("Master product with variation model returning no selected value and orderable default variant", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("DVAR", true);
            let variationModel = createVariationModel(null, null, defaultVariant);

            assertImageProduct(product, variationModel, "DVAR");
        })
        .test("Master product with variation model returning no selected value and non-orderable default variant", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("NODVAR", false);
            let variationModel = createVariationModel(null, null, defaultVariant);

            assertImageProduct(product, variationModel, "NODVAR");
        })
        .test("Master product with variation model returning no selected value, no default variant and some orderable variants", function () {
            let product = createProduct("MP1", true);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", false));
            variants.add1(createVariant("VAR2", true));
            variants.add1(createVariant("VAR3", true));

            let variationModel = createVariationModel(null, null, null, variants);

            assertImageProduct(product, variationModel, "VAR2");
        })
        .test("Master product with variation model returning no selected value, no default variant and non-orderable variants", function () {
            let product = createProduct("MP1", true);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", false));
            variants.add1(createVariant("VAR2", false));
            variants.add1(createVariant("VAR3", false));

            let variationModel = createVariationModel(null, null, null, variants);

            assertImageProduct(product, variationModel, "VAR1");
        })
        .test("Master product with variation model returning no selected value, orderable default variant and some orderable variants", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("DVAR", true);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", true));
            variants.add1(createVariant("VAR2", true));
            variants.add1(createVariant("VAR3", true));

            let variationModel = createVariationModel(null, null, defaultVariant, variants);

            assertImageProduct(product, variationModel, "DVAR");
        })
        .test("Master product with variation model returning no selected value, orderable default variant and non-orderable variants", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("DVAR", true);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", false));
            variants.add1(createVariant("VAR2", false));
            variants.add1(createVariant("VAR3", false));

            let variationModel = createVariationModel(null, null, defaultVariant, variants);

            assertImageProduct(product, variationModel, "DVAR");
        })
        .test("Master product with variation model returning no selected value, non-orderable default variant and some orderable variants", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("NODVAR", false);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", false));
            variants.add1(createVariant("VAR2", false));
            variants.add1(createVariant("VAR3", true));

            let variationModel = createVariationModel(null, null, defaultVariant, variants);

            assertImageProduct(product, variationModel, "VAR3");
        })
        .test("Master product with variation model returning no selected value, non-orderable default variant and non-orderable variants", function () {
            let product = createProduct("MP1", true);
            let defaultVariant = createVariant("NODVAR", false);

            let variants = new ArrayList();
            variants.add1(createVariant("VAR1", false));
            variants.add1(createVariant("VAR2", false));
            variants.add1(createVariant("VAR3", false));

            let variationModel = createVariationModel(null, null, defaultVariant, variants);

            assertImageProduct(product, variationModel, "NODVAR");
        });

    return PIPELET_NEXT;
};
