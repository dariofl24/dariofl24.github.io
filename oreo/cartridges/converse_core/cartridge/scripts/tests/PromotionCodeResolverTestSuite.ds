/**
 * @input Unit: Object
 */

importPackage(dw.value)
importScript("module_test:Framework/Assert.ds");

importScript("constants.ds");
importScript("common/libInheritance.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");
importScript("converse_core:promotion/PromotionCodeResolver.ds");
importScript("converse_core:promotion/PromotionHelper.ds");

function execute(args: PipelineDictionary) {

    let CART_OBJ = cart.objects;
    let PromotionCodeResolver = converse.promotion.PromotionCodeResolver;
    let PromotionHelper = converse.promotion.PromotionHelper;
    let PromotionType = converse.constants.PromotionType;
    let ProductType = converse.constants.ProductType;
    
    let ORDER_PROMO_CODE = '500off';
    
    let mockPromotionHelper = function(hasShippingPromos, hasBonusPromos, hasProductPromos, hasOrderPromos, hasPriceBookApplied, simulateCombinedOrder) {
        let promotionInfo = {};
        promotionInfo[PromotionType.FREESHIP] = hasShippingPromos;
        promotionInfo[PromotionType.GWP] = hasBonusPromos;
        promotionInfo[PromotionType.BOGO] = hasProductPromos;
        promotionInfo[PromotionType.DISCOUNT] = hasOrderPromos;
        promotionInfo[PromotionType.PRBK] = hasPriceBookApplied;
        
        let promotionHelper = {
            getLineItemCtnrPromotionInfo: function(lineItemContainer, shipmentType) {
                if (simulateCombinedOrder && shipmentType === ProductType.C1) {
                    promotionInfo[PromotionType.DISCOUNT] = false;
                    promotionInfo[PromotionType.GWP] = true;
                }
                
                return promotionInfo;
            }
        };
        
        return promotionHelper;
    }
    
    let getRegularShipmentPromoCode = function(promoCodes) {
        return promoCodes[ProductType.Regular];
    };
    
    let getDYOShipmentPromoCode = function(promoCodes) {
        return promoCodes[ProductType.C1];
    };
    
    let withPlaceholder = function(promotionCodePart) : String {
        return promotionCodePart + PromotionType.PLACEHOLDER
    };
    
    args.Unit.describe("PromotionCodeResolver")
        .test("PromoCode should be empty if there are no promotions", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();

            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, false, false));
            let promoCode = promotionResolver.getPromoCodes(basketSummary);
            
            Assert.areEqual("", promoCode[ProductType.Regular]);
            Assert.areEqual("", promoCode[ProductType.C1]);
        })
        .test("PromoCode correctly fetched for combined order: regula - discount, dyo - Gift with purchase; with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, true, hasPriceBookApplied, true));
            Assert.areEqual(withPlaceholder(PromotionType.DISCOUNT), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            Assert.areEqual(withPlaceholder(PromotionType.GWP), getDYOShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, true, hasPriceBookApplied, true));
            Assert.areEqual(PromotionType.PRBK_AND_DISCOUNT, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            Assert.areEqual(PromotionType.PRBK_AND_GWP, getDYOShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for simple discount with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, true, hasPriceBookApplied));
            Assert.areEqual(withPlaceholder(PromotionType.DISCOUNT), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_DISCOUNT, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for simple discount WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.DISCOUNT_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a simple discount and BuyOneGetOne promo with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, true, true, hasPriceBookApplied));
            Assert.areEqual(withPlaceholder(PromotionType.BOGO), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));

            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, true, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_BOGO, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a simple discount and BuyOneGetOne WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, true, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, true, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a simple discount and Gift with purchase promo with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, false, true, hasPriceBookApplied));
            Assert.areEqual(withPlaceholder(PromotionType.DISCOUNT), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_DISCOUNT, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a simple discount and Gift with purchase promo WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.DISCOUNT_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, false, true, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a BuyOneGetOne promo with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, true, false, hasPriceBookApplied));
            Assert.areEqual(withPlaceholder(PromotionType.BOGO), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, true, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_BOGO, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a BuyOneGetOne promo WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, true, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, true, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a BuyOneGetOne and Gift with purchase promo with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, true, false, false));
            Assert.areEqual(withPlaceholder(PromotionType.BOGO), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, true, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_BOGO, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a BuyOneGetOne and Gift with purchase promo WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, true, false, false));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, true, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.BOGO_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a Gift with purchase promo with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, false, false, hasPriceBookApplied));
            Assert.areEqual(withPlaceholder(PromotionType.GWP), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, true, false, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_GWP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for a Gift with purchase promo WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let hasPriceBookApplied = false;
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, false, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.GWP_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
            
            hasPriceBookApplied = true;
            promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, true, false, false, hasPriceBookApplied));
            Assert.areEqual(PromotionType.PRBK_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for PriceBook applied with no FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(false, false, false, false, true));
            Assert.areEqual(withPlaceholder(PromotionType.PRBK), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for PriceBook applied WITH FreeShipping", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, false, false, true));
            Assert.areEqual(PromotionType.PRBK_AND_FREESHIP, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for FreeShipping promotions", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            
            let promotionResolver = new PromotionCodeResolver(mockPromotionHelper(true, false, false, false, false));
            Assert.areEqual(withPlaceholder(PromotionType.FREESHIP), getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        })
        .test("PromoCode correctly fetched for Order Level promotion", function() {
            let basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
            let promotionHelper = {
                getLineItemCtnrPromotionInfo: function(lineItemContainer, shipmentType) {
                    let promotionInfo = {};
                    promotionInfo[PromotionType.ORDER_DISCOUNT] = ORDER_PROMO_CODE;
                    return promotionInfo;
                }
            };

            let promotionResolver = new PromotionCodeResolver(promotionHelper);
            Assert.areEqual(ORDER_PROMO_CODE, getRegularShipmentPromoCode(promotionResolver.getPromoCodes(basketSummary)));
        });

    return PIPELET_NEXT;
};