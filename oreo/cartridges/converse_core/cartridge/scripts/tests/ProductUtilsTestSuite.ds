/**
 * @input Unit: Object
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.value);

importScript("module_test:Framework/Assert.ds"); 
importScript("module_test:Framework/Unit.ds");

importScript("converse_core:constants.ds");
importScript("converse_core:product/ProductUtils.ds");

function execute(args : PipelineDictionary) : Number {
    let ProductType = converse.constants.ProductType;

    let createProduct = function(productType, sizeChart, gender, brandSegment, pillar) {
        productType = productType || "test";
        sizeChart = sizeChart || "test";
        gender = gender || "test";
        brandSegment = brandSegment || "test";
        pillar = pillar || "test";

        return {
                custom: {
                    productType: {
                        value: productType
                    },

                    sizeChartMessaging: "test",
                    
                    sizeChart: {
                        value: sizeChart
                    },
                    
                    gender: {
                        value: gender
                    },
                    
                    brandSegment: {
                        value: brandSegment
                    },
                    pillar : {
                        value: pillar
                    }
                }
            };
    };
    
    let createProductLineItem = function(productType:String, productID:String, categoryID:String, metricID:String) {
        return {
            productID : productID,
            product : createProduct(productType),
            categoryID : categoryID,
            custom: {
                metricID : metricID
            }
        };
    };

    args.Unit.describe("ProductUtils Test Suite")
        .test("Validate product is considered giftcard when it is either electronic or physical giftcard", function () {
            var eGCproductMock = createProduct(ProductType.ElectronicGiftCard);
            var pGCproductMock = createProduct(ProductType.PhysicalGiftCard);
            
            var isElectronicGiftCard = ProductUtils.isGiftCard(eGCproductMock);
            var isPhysicalGiftCard = ProductUtils.isGiftCard(pGCproductMock);
            
            Assert.isTrue(isElectronicGiftCard, "Electronic gift card not identified as gift card");
            Assert.isTrue(isPhysicalGiftCard, "Physical gift card not identified as gift card");
        })
        .test("Validate product is considered showcase", function () {
            var pShowCaseMock = createProduct(ProductType.Showcase);
            
            var isShowCase = ProductUtils.isShowCase(pShowCaseMock);
            
            Assert.isTrue(isShowCase, "Product is not identified as a show case");
        })
        .test("Validate product is not identified as giftcard when it is either regular or dyo product", function () {
            var regularProductMock = createProduct(ProductType.Regular);
            var dyoProductMock = createProduct(ProductType.C1);
            
            var isRegularProductMock = ProductUtils.isGiftCard(regularProductMock);
            var isDyoProductMock = ProductUtils.isGiftCard(dyoProductMock);
            
            Assert.isFalse(isRegularProductMock, "Regular product identified as gift card");
            Assert.isFalse(isDyoProductMock, "DYO product identified as gift card");
        })
        .test("Product link info is correctly fetched for ProductLineItem when pid and cid are present", function () {
            var productLineItem = createProductLineItem(ProductType.Regular, "123456", "111111", null);
            var link = ProductUtils.getProductLineItemLink(productLineItem);
            
            var wellFormed = link.toString().indexOf("Product-Show?pid=123456&cid=111111") > 0;
            
            Assert.isTrue(wellFormed, "link is not well formed");
        })
        .test("Product link info is correctly fetched for ProductLineItem when pid is present", function () {
            var productLineItem = createProductLineItem(ProductType.Regular, "123456", null, null);
            var link = ProductUtils.getProductLineItemLink(productLineItem);
            
            var wellFormed = link.toString().indexOf("Product-Show?pid=123456") > 0;
            
            Assert.isTrue(wellFormed, "link is not well formed");
        })
        .test("Product link info is correctly fetched for ProductLineItem when pid and metricId are present", function () {
            var productLineItem = createProductLineItem(ProductType.Regular, "123456", null, "555555");
            var link = ProductUtils.getProductLineItemLink(productLineItem);
            
            var wellFormed = link.toString().indexOf("Product-Show?pid=123456&metricId=555555") > 0;

            Assert.isTrue(wellFormed, "link is not well formed");
        })
        .test("Product link info is correctly fetched for Physical GiftCard ProductLineItem", function () {
            var productLineItem = createProductLineItem(ProductType.PhysicalGiftCard);
            var link = ProductUtils.getProductLineItemLink(productLineItem);
            
            var wellFormed = link.toString().indexOf("PhysicalGiftCard-Purchase") > 0;
            
            Assert.isTrue(wellFormed, "link is not well formed");
        })
        .test("Product link info is correctly fetched for Electronic GiftCard ProductLineItem", function () {
            var productLineItem = createProductLineItem(ProductType.ElectronicGiftCard);
            var link = ProductUtils.getProductLineItemLink(productLineItem);
            
            var wellFormed = link.toString().indexOf("ElectronicGiftCard-Purchase") > 0;
            
            Assert.isTrue(wellFormed, "link is not well formed");
        })
        .test("Obtain the Product from PipelineDictionary if not DefaultVariant is present.", function () {
            let product = { ID : "PRODUCT" };
            let pdict =  { Product : product };
            
            let productToShow = ProductUtils.getProductToShow(pdict.Product, pdict.DefaultVariant);
            
            
            Assert.areEqual(product, productToShow, "Product to show should be pdict.Product");
        })
        .test("Obtain the DefaultVariant from PipelineDictionary if present.", function () {
            let product = { ID : "PRODUCT" };
            let defaultVariant = { ID : "DEFAULTVARIANT" };
            let pdict =  { Product : product, DefaultVariant : defaultVariant };
            
            let productToShow = ProductUtils.getProductToShow(pdict.Product, pdict.DefaultVariant);
            
            Assert.areEqual(defaultVariant, productToShow, "Product to show should be pdict.DefaultVariant");
        })
        .test("Kids size chart should be enabled for sneakers with gender set to kids and brand segment set to All Star", function () {
            let product = createProduct(ProductType.Regular, "Kids", "kids", "all-star");
            let result = ProductUtils.isKidsSizeChartEnabled(product);
            
            Assert.isTrue(result, "Product should have kids size chart enabled");
        })
        .test("Kids size chart should be disabled for sneakers with gender set to anything other than kids and brand segment set to All Star", function () {
            let product = createProduct(ProductType.Regular, "Kids", "men", "all-star");
            let result = ProductUtils.isKidsSizeChartEnabled(product);

            Assert.isFalse(result, "Product should not have kids size chart enabled for anything other than kids gender");
        })
        .test("Kids size chart should be disabled for sneakers with gender set to kids and brand segment set to anything other than All Star", function () {
            let product = createProduct(ProductType.Regular, "Kids", "kids", "cons");
            let result = ProductUtils.isKidsSizeChartEnabled(product);

            Assert.isFalse(result, "Product should not have kids size chart enabled for anything  All Star brand segment");
        })
        .test("Should return true ONLY when a product is apparel", function () {
            let product = createProduct(ProductType.Regular, "Kids", "kids", "cons", converse.constants.Pillar.Apparel);
            let result = ProductUtils.isApparel(product);

            Assert.isTrue(result, "Product should apparel set true");

            product = createProduct(ProductType.Regular, "Kids", "kids", "cons", converse.constants.Pillar.Accessories);
            result = ProductUtils.isApparel(product);

            Assert.isFalse(result, "Product should have apparel set to false");    
        })
        .test("Should sort correctly the KidsYouth sizes", function () {
            let result = new ArrayList();
            result.add( { sizeValue: "010", sizeChartWeight: 2 } );
            result.add( { sizeValue: "020", sizeChartWeight: 2 } );
            result.add( { sizeValue: "030", sizeChartWeight: 2 } );
            result.add( { sizeValue: "040", sizeChartWeight: 2 } );
            result.add( { sizeValue: "050", sizeChartWeight: 2 } );
            result.add( { sizeValue: "060", sizeChartWeight: 2 } );
            result.add( { sizeValue: "070", sizeChartWeight: 2 } );
            result.add( { sizeValue: "080", sizeChartWeight: 2 } );
            result.add( { sizeValue: "090", sizeChartWeight: 2 } );
            result.add( { sizeValue: "100", sizeChartWeight: 2 } );
            result.add( { sizeValue: "010", sizeChartWeight: 3 } );
            result.add( { sizeValue: "015", sizeChartWeight: 3 } );
            result.add( { sizeValue: "020", sizeChartWeight: 3 } );
            result.add( { sizeValue: "025", sizeChartWeight: 3 } );
            result.add( { sizeValue: "030", sizeChartWeight: 3 } );
            result.add( { sizeValue: "105", sizeChartWeight: 3 } );
            result.add( { sizeValue: "110", sizeChartWeight: 3 } );
            result.add( { sizeValue: "115", sizeChartWeight: 3 } );
            result.add( { sizeValue: "120", sizeChartWeight: 3 } );
            result.add( { sizeValue: "125", sizeChartWeight: 3 } );
            result.add( { sizeValue: "130", sizeChartWeight: 3 } );
            result.add( { sizeValue: "135", sizeChartWeight: 3 } );

            ProductUtils.sortKidsYouthSizes(result);

            Assert.areEqual("010", result[0].sizeValue, "Size value at 0");
            Assert.areEqual(2, result[0].sizeChartWeight, "Size weight at 0");
            Assert.areEqual("020", result[1].sizeValue, "Size value at 1");
            Assert.areEqual(2, result[1].sizeChartWeight, "Size weight at 1");
            Assert.areEqual("030", result[2].sizeValue, "Size value at 2");
            Assert.areEqual(2, result[2].sizeChartWeight, "Size weight at 2");
            Assert.areEqual("040", result[3].sizeValue, "Size value at 3");
            Assert.areEqual(2, result[3].sizeChartWeight, "Size weight at 3");
            Assert.areEqual("050", result[4].sizeValue, "Size value at 4");
            Assert.areEqual(2, result[4].sizeChartWeight, "Size weight at 4");
            Assert.areEqual("060", result[5].sizeValue, "Size value at 5");
            Assert.areEqual(2, result[5].sizeChartWeight, "Size weight at 5");
            Assert.areEqual("070", result[6].sizeValue, "Size value at 6");
            Assert.areEqual(2, result[6].sizeChartWeight, "Size weight at 6");
            Assert.areEqual("080", result[7].sizeValue, "Size value at 7");
            Assert.areEqual(2, result[7].sizeChartWeight, "Size weight at 7");
            Assert.areEqual("090", result[8].sizeValue, "Size value at 8");
            Assert.areEqual(2, result[8].sizeChartWeight, "Size weight at 8");
            Assert.areEqual("100", result[9].sizeValue, "Size value at 9");
            Assert.areEqual(2, result[9].sizeChartWeight, "Size weight at 9");
            Assert.areEqual("105", result[10].sizeValue, "Size value at 10");
            Assert.areEqual(3, result[10].sizeChartWeight, "Size weight at 10");
            Assert.areEqual("110", result[11].sizeValue, "Size value at 11");
            Assert.areEqual(3, result[11].sizeChartWeight, "Size weight at 11");
            Assert.areEqual("115", result[12].sizeValue, "Size value at 12");
            Assert.areEqual(3, result[12].sizeChartWeight, "Size weight at 12");
            Assert.areEqual("120", result[13].sizeValue, "Size value at 13");
            Assert.areEqual(3, result[13].sizeChartWeight, "Size weight at 13");
            Assert.areEqual("125", result[14].sizeValue, "Size value at 14");
            Assert.areEqual(3, result[14].sizeChartWeight, "Size weight at 14");
            Assert.areEqual("130", result[15].sizeValue, "Size value at 15");
            Assert.areEqual(3, result[15].sizeChartWeight, "Size weight at 15");
            Assert.areEqual("135", result[16].sizeValue, "Size value at 16");
            Assert.areEqual(3, result[16].sizeChartWeight, "Size weight at 16");
            Assert.areEqual("010", result[17].sizeValue, "Size value at 17");
            Assert.areEqual(3, result[17].sizeChartWeight, "Size weight at 17");
            Assert.areEqual("015", result[18].sizeValue, "Size value at 18");
            Assert.areEqual(3, result[18].sizeChartWeight, "Size weight at 18");
            Assert.areEqual("020", result[19].sizeValue, "Size value at 19");
            Assert.areEqual(3, result[19].sizeChartWeight, "Size weight at 19");
            Assert.areEqual("025", result[20].sizeValue, "Size value at 20");
            Assert.areEqual(3, result[20].sizeChartWeight, "Size weight at 20");
            Assert.areEqual("030", result[21].sizeValue, "Size value at 21");
            Assert.areEqual(3, result[21].sizeChartWeight, "Size weight at 21");
        })
        .test("Should return message when max order quantity is exceeded (Single item)", function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    maxOrderQuantity : 5
                },
                manufacturerSKU : 'M7650'
            };
            let basket = null;
            let result = ProductUtils.getMaxOrderQuantityForProduct(10, product, basket);

            Assert.areEqual("Limit 5 pair per order", result, "Max Order Quantity message should be set");
        })
        .test("Should return message when max order quantity is exceeded (Multiple items)", function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    maxOrderQuantity : 7
                },
                manufacturerSKU : 'M7650'
            };
            let productLineItemsList : Collection = new ArrayList();
            let productLineItemList1 = {
                productID : 'M7650_030',
                quantityValue: 2,
                manufacturerSKU : 'M7650'
            };
            let productLineItemList2 = {
                productID : 'M7650_040',
                quantityValue: 1,
                manufacturerSKU : 'M7650'
            };
            productLineItemsList.add(productLineItemList1);
            productLineItemsList.add(productLineItemList2);
            let basket = {
                productLineItems : productLineItemsList
            };
            let result = ProductUtils.getMaxOrderQuantityForProduct(6, product, basket);

            Assert.areEqual("Limit 7 pair per order", result, "Max Order Quantity message should be set");
        })
        .test("Should not return message when order quantity is less than max order quantity", function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    maxOrderQuantity : 7
                },
                manufacturerSKU : 'M7650'
            };
            let productLineItemsList : Collection = new ArrayList();
            let productLineItemList1 = {
                productID : 'M7650_030',
                quantityValue: 2,
                manufacturerSKU : 'M7650'
            };
            let productLineItemList2 = {
                productID : 'M7650_040',
                quantityValue: 1,
                manufacturerSKU : 'M7650'
            };
            productLineItemsList.add(productLineItemList1);
            productLineItemsList.add(productLineItemList2);
            let basket = {
                productLineItems : productLineItemsList
            };
            let result = ProductUtils.getMaxOrderQuantityForProduct(1, product, basket);

            Assert.areEqual("", result, "Max Order Quantity message should not be set");
        })
        .test("Should not return message when max order quantity is blank", function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    maxOrderQuantity : ""
                },
                manufacturerSKU : 'M7650'
            };
            let productLineItemsList : Collection = new ArrayList();
            let productLineItemList1 = {
                productID : 'M7650_030',
                quantityValue: 2,
                manufacturerSKU : 'M7650'
            };
            let productLineItemList2 = {
                productID : 'M7650_040',
                quantityValue: 1,
                manufacturerSKU : 'M7650'
            };
            productLineItemsList.add(productLineItemList1);
            productLineItemsList.add(productLineItemList2);
            let basket = {
                productLineItems : productLineItemsList
            };
            let result = ProductUtils.getMaxOrderQuantityForProduct(11, product, basket);

            Assert.areEqual("", result, "Max Order Quantity message should not be set");
        })
        .localized_test("Should correctly resolve size chart for new borns in DE", [Unit.Sites.DE], function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    MaterialConverseID : converse.constants.MaterialConverseID.MCID_6
                }
            };
            
            let result = ProductUtils.getSizeChart(product);
            Assert.areEqual("19.5 (0–1 Jahr(e))", result.getSizeDisplayValue("035"), "Size display value do not match");
            Assert.areEqual("Kleinkind 19.5", result.getSizeShortDisplayValue("035"), "Size short display value do not match");
        })
        .localized_test("Should correctly fallback to size chart for new borns in DE", [Unit.Sites.DE], function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                	sizeChart:converse.constants.SizeChart.KidsNewborn,
                    MaterialConverseID : converse.constants.MaterialConverseID.MCID_NA
                }
            };
            
            let result = ProductUtils.getSizeChart(product);
            Assert.areEqual("19.5 (0–1 Jahr(e))", result.getSizeDisplayValue("035"), "Size display value do not match");
            Assert.areEqual("Kleinkind 19.5", result.getSizeShortDisplayValue("035"), "Size short display value do not match");
        })
        .localized_test("Should correctly resolve size chart for new borns in US", [Unit.Sites.US], function () {
            let product = {
                ID : 'M7650_030',
                custom: {
                    sizeChart : converse.constants.SizeChart.KidsNewborn
                }
            };
            
            let result = ProductUtils.getSizeChart(product);
            Assert.areEqual("3.5 (0 - 1 yr)", result.getSizeDisplayValue("035"), "Size display value do not match");
            Assert.areEqual("Infant 3.5", result.getSizeShortDisplayValue("035"), "Size short display value do not match");
        })
        .localized_test("Should return false when size is blank", [Unit.Sites.US], function () {
            Assert.isFalse(ProductUtils.hideSize("060", converse.constants.SizeChart.Standard));
            Assert.isFalse(ProductUtils.hideSize("075", converse.constants.SizeChart.Womens));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsNewborn));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsToddler));
            Assert.isFalse(ProductUtils.hideSize("045", converse.constants.SizeChart.KidsExtyouth));
        })
        .localized_test("Should return false when sizes are blank", [Unit.Sites.GB], function () {
            Assert.isTrue(ProductUtils.hideSize("060", converse.constants.SizeChart.Standard));
            Assert.isTrue(ProductUtils.hideSize("075", converse.constants.SizeChart.Womens));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsNewborn));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsToddler));
            Assert.isFalse(ProductUtils.hideSize("045", converse.constants.SizeChart.KidsExtyouth));
        })
        .localized_test("Should return false when sizes are blank", [Unit.Sites.EU], function () {
            Assert.isTrue(ProductUtils.hideSize("060", converse.constants.SizeChart.Standard));
            Assert.isFalse(ProductUtils.hideSize("060", converse.constants.SizeChart.Standard));
            Assert.isFalse(ProductUtils.hideSize("075", converse.constants.SizeChart.Womens));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsNewborn));
            Assert.isFalse(ProductUtils.hideSize("025", converse.constants.SizeChart.KidsToddler));
            Assert.isFalse(ProductUtils.hideSize("045", converse.constants.SizeChart.KidsExtyouth));
        });

    return PIPELET_NEXT;
}