importPackage(dw.catalog);
importPackage(dw.util);
importPackage(dw.web);
importPackage(dw.object);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");

(function() {
    
    var isLimitReached = function(limit, count) : Boolean {
        return limit && limit > 0 && count >= limit; 
    }; 

    var normalize = function(str : String) : String {
        return empty(str) ? "" : str;
    };
    
    var formatDistance = function(distance : Number, distanceUnit : String) : String {
        var distanceUnitStr = Resource.msg('storelocator.' + distanceUnit, 'storelocator', null);
        return StringUtils.format("{0} {1}", distance.toFixed(1), distanceUnitStr);
    };

    var StoreInfo = Class.extend({
        init: function(store : Store, distance: Number, distanceUnit : String) {
            this.id = store.ID;
            this.name = normalize(store.name);
            this.address1 = normalize(store.address1);
            this.address2 = normalize(store.address2);
            this.postalCode = normalize(store.postalCode);
            this.city = normalize(store.city);
            this.stateCode = normalize(store.stateCode);
            this.countryCode = store.countryCode.value;
            this.phone = normalize(store.phone);
            this.fax = normalize(store.fax);
            this.email = normalize(store.email);
            this.url = normalize(store.custom.url);
            this.type = store.custom.type.value;
            this.flagship = store.custom.flagship || false;
            this.outlet = store.custom.outlet || false;
            this.image = empty(store.image) ? '' : store.image.URL.toString();
            this.storeHours = empty(store.storeHours) ? '' : store.storeHours.markup;
            this.storeEvents = empty(store.storeEvents) ? '' : store.storeEvents.markup;
            this.latitude = empty(store.latitude) ? '' : store.latitude;
            this.longitude = empty(store.longitude) ? '' : store.longitude;
            this.distance = formatDistance(distance, distanceUnit);
        }
    });
    
    function getStoresData(storesData : Collection, options : Object) {
        var limit = options.limit,
            distanceUnit = options.distanceUnit,
            count = 0,
            storeInfos = {};
    
        for each (let storeData : Object in storesData) {
            if (isLimitReached(limit, count)) {
                break;
            }
            
            storeInfos[storeData.store.ID] = new StoreInfo(storeData.store, storeData.distance, distanceUnit);
            count++;
        }
        
        return {
            total: count,
            stores: storeInfos
        };
    }

    function getDistributors() : Array {
        let result = [];
        let stores = SystemObjectMgr.querySystemObjects('Store', "custom.type='INT'", "address1 ASC");

        while(stores.hasNext()) {
            result.push(stores.next());
        }

        return result;
    }

    function getDistributorByStoreId(storeId) : Store {
        let result = SystemObjectMgr.querySystemObjects('Store', "ID = {0}", null, storeId);

        return result.hasNext() ? result.next() : null;
    }

    function sort(storesData : LinkedHashMap) : Array {
        let stores : ArrayList = new ArrayList();
        
        for each (let store : Store in storesData.keySet()) {
            let item = {
                store: store, 
                distance : storesData.get(store)
            };
            
            item.weight = item.distance - Number(item.store.custom.flagship || false) * 10000 - Number(item.store.custom.outlet || false) * 1000;
            
            stores.add(item);
        }
        
        stores.sort(new PropertyComparator("+weight"));
        
        return stores;
    }


    Namespace.extend(converse, {
        storelocator: {
            Utils: {
                getStoresData: getStoresData,
                getDistributors: getDistributors,
                getDistributorByStoreId: getDistributorByStoreId, 
                sort: sort
            }
        }
    });

})();
