/**
 * Creates a shipping address for the given shipment and copies
 * the address details stored in the given address form to the
 * created shipment address.
 * The method additionally sets the given gift options to the 
 * shipment.
 *
 * @input AddressForm : dw.web.FormGroup The address form.
 * @input GiftOptionsForm : dw.web.FormGroup The gift options form.
 * @input Basket : dw.order.Basket
 * @input CurrentRequest: dw.system.Request
 */
importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.web);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:util/LocaleInfo.ds");

function execute( pdict : PipelineDictionary ) : Number
{
	var addressFields : FormGroup = pdict.AddressForm.addressFields;
	var giftOptions : FormGroup = pdict.GiftOptionsForm;
	var basket : Basket = pdict.Basket;
	var shipments: Collection = basket.getShipments();
	
	for each(var shipment: Shipment in shipments) {
	
		var shippingAddress : OrderAddress = shipment.shippingAddress;
		if( shippingAddress == null )
		{
			shippingAddress = shipment.createShippingAddress();	
		}
		
		shippingAddress.setFirstName(addressFields.common.firstName.value);
		shippingAddress.setLastName(addressFields.common.lastName.value);
		shippingAddress.setAddress1(addressFields.common.address1.value);
		shippingAddress.setAddress2(addressFields.common.address2.value);
		shippingAddress.setCity(addressFields.common.city.value);
		shippingAddress.setPostalCode(addressFields.regional.zip.value);
		shippingAddress.setStateCode(addressFields.states.stateCode.value); 
		shippingAddress.setCountryCode(converse.utils.getCurrentCountryCode( pdict.CurrentRequest ));
		shippingAddress.setPhone(addressFields.regional.phone.value);
		
		if(giftOptions.childCount > 0)
		{
			shipment.setGift(giftOptions.isGift.value);
			shipment.setGiftMessage(giftOptions.giftMessage.value);
		}
	}
	
    return PIPELET_NEXT;
}