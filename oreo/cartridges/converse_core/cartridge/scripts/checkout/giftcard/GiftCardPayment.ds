importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.value );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");

(function() {
	
	var METHOD_GIFT_CARD = converse.constants.PaymentMethodId.GiftCard;
	
	function getMaxGiftCards()
	{
		return 2;
	}
	
	function calculateNonGiftCardAmount( basket : Basket ) 
	{
		var giftCardTotal : Money = calculateGiftCardAmount(basket);

		var orderTotal : Money = basket.totalGrossPrice;
		var amountOpen : Money = orderTotal.subtract( giftCardTotal );
	
		return amountOpen;
	}
	
	function  calculateGiftCardAmount( basket : Basket ) {
		var giftCardTotal : Money = new Money( 0.0, basket.currencyCode );
	
		var gcPaymentInstrs : Collection = basket.getPaymentInstruments(METHOD_GIFT_CARD);
		var iter : Iterator = gcPaymentInstrs.iterator();
		var orderPI : OrderPaymentInstrument = null;
	
		while( iter.hasNext() )
		{
			orderPI = iter.next();
			giftCardTotal = giftCardTotal.add( orderPI.getPaymentTransaction().getAmount() );
		}
	
		return giftCardTotal;		
	}
	
	function calculateAmountToRedeem(initialBalance : Money, basket : Basket) 
	{
		var amountToRedeem : Money = initialBalance;
		var orderTotal : Money = basket.getTotalGrossPrice();
		var giftCardTotal = calculateGiftCardAmount(basket);
		
		var orderBalance : Money = orderTotal.subtract( giftCardTotal );
		if( orderBalance < amountToRedeem ) 
		{
			return orderBalance;
		}
	
		return amountToRedeem;
	}
	
	function removeDuplicates(basket : Basket, giftCardNumber : Object)
	{
		removeGiftCardPaymentInstrument(basket, giftCardNumber);
	}
	
	function removeGiftCardPaymentInstrument(basket : Basket, cardNumber : String) 
	{
		var gcPaymentInstrs : Collection = basket.getPaymentInstruments(METHOD_GIFT_CARD);
		var iter : Iterator = gcPaymentInstrs.iterator();
		var existingPI : OrderPaymentInstrument = null;
		
		while( iter.hasNext() )
		{
			existingPI = iter.next();
			if(cardNumber === existingPI.custom.giftCardNumber) 
			{
				basket.removePaymentInstrument( existingPI );
			}
		}		
	}
	
	function createGiftCardPaymentInstrument(basket : Basket, giftCard : Object, amount : Money) : PaymentInstrument
	{
		var paymentInstr : PaymentInstrument = basket.createPaymentInstrument(METHOD_GIFT_CARD, amount);
		
		paymentInstr.custom.giftCardNumber = giftCard.cardNumber;
		paymentInstr.custom.giftCardPin = giftCard.pin;
		paymentInstr.custom.giftCardBalance = giftCard.getBalanceString();
		
		return paymentInstr;
	}
	
	function sameGiftCard(giftCard : Object, existingPI : OrderPaymentInstrument) : Boolean
	{
		return existingPI.custom.giftCardNumber === giftCard.cardNumber;
	}
	
	var PaymentInstrument = {
		METHOD_GIFT_CARD : METHOD_GIFT_CARD,
		calculateNonGiftCardAmount: calculateNonGiftCardAmount,
		calculateGiftCardAmount: calculateGiftCardAmount,
		calculateAmountToRedeem: calculateAmountToRedeem,
		removeDuplicates: removeDuplicates,
		removeGiftCardPaymentInstrument: removeGiftCardPaymentInstrument,
		createGiftCardPaymentInstrument: createGiftCardPaymentInstrument,
		getMaxGiftCards : getMaxGiftCards
	};
	
	Namespace.extend(converse, { 
		order : { 
			GiftCardPayment: PaymentInstrument 
		}
	});
})();