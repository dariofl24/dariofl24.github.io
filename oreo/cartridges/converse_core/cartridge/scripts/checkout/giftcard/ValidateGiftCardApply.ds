/**
* Validates both gift card number and pin.
* Although in the form definition cardNumber and pin are not mandatory this script ensures values for the fields are provided. 
*
* @input Basket : dw.order.Basket Basket where a collection of gift card payment instruments reside
* @input giftCardPayment: dw.web.FormGroup Gift card apply fields
*
* @output Status : dw.system.Status The status of the gift card validation.
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.order );
importPackage( dw.util );

importScript("converse_core:constants.ds");
importScript("checkout/giftcard/GiftCardPayment.ds");

var GiftCardPayment = converse.order.GiftCardPayment;

function execute( pdict : PipelineDictionary ) : Number
{
	var basket : Basket = pdict.Basket;
	
	var cardNumber : FormField = pdict.giftCardPayment.cardNumber;
	var pin : FormField = pdict.giftCardPayment.pin;
	
	if (exceededNumberOfGiftCards(basket))
	{
		pdict.Status = new Status(Status.ERROR, "giftcard.error.maxallowed");
		return PIPELET_ERROR;
	}
	
	if (!formFieldsValid(cardNumber, pin))
	{
		return PIPELET_ERROR;
	}

	pdict.Status = new Status(Status.OK);
	return PIPELET_NEXT;
}

function exceededNumberOfGiftCards(basket : Basket) : Boolean
{
	var gcPaymentInstrs : Collection = basket.getPaymentInstruments(GiftCardPayment.METHOD_GIFT_CARD);
	return gcPaymentInstrs.size() >= GiftCardPayment.getMaxGiftCards();
}

function formFieldsValid(cardNumber : FormField, pin : FormField) : Boolean
{
	var cardNumberIsValid = cardNumber.isValid() && checkHasValue(cardNumber);
	var pinIsValid = pin.isValid() && checkHasValue(pin);
	
	return cardNumberIsValid && pinIsValid;
}

function checkHasValue(field : FormField) 
{
	if(!field.value) 
	{
		field.invalidateFormElement();
		return false;
	}
	return true;
}
