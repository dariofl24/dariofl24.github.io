importPackage(dw.order);
importPackage(dw.util);

importScript("converse_core:constants.ds");
importScript("converse_core:checkout/converse/shipping/classes/ShippingMethodsGroups.ds");

function ShippingMethodsFilter(self) {
    self = self || {};
    var poRegex : RegExp  = new RegExp(/((^\s*p[\.-]?[\s]*o[\.-]?\s+)|(^\s*p[\.-]?o[\.-]?\s*$)|(^\s*box\s+)|(^box$)|(\s*p[\.-]?o[\.-]?\s*box.*)|(.*post\s*office.*))/i);
    var apoRegex : RegExp = new RegExp(/\ba\.?[\s]*p\.?[\s]*o\b/i);
    var dpoRegex : RegExp = new RegExp(/\bd\.?[\s]*p\.?[\s]*o\b/i);
    var fpoRegex : RegExp = new RegExp(/\bf\.?[\s]*p\.?[\s]*o\b/i);
    
    var restrictedStateCodes: ArrayList = new ArrayList();
    restrictedStateCodes.add('AA');
    restrictedStateCodes.add('AE');
    restrictedStateCodes.add('AP');
    
    var getShipmentProductType = function(shipment: Shipment) {
        return shipment.custom.productType;
    };
    
    var isPOBoxAddress = function(address) {
        if (address == null) {
            return false;
        }

        return poRegex.test(address.address1) || 
            poRegex.test(address.address2) || 
            poRegex.test(address.address1 + ' ' + address.address2);
    };

    var addressRestrictions = function(address) {
        var addressRestrictions = {
            poBoxRestricted : false,
            address1: false,
            address2: false
        };

        if (address == null) {
            return addressRestrictions;
        }

        addressRestrictions.address1 = poRegex.test(address.address1);
        addressRestrictions.address2 = poRegex.test(address.address2);
        var isPoBoxAddresses = !addressRestrictions.address1 && !addressRestrictions.address2 && poRegex.test(address.address1 + ' ' + address.address2);

        if(isPoBoxAddresses) {
            addressRestrictions.address1 = true;
            addressRestrictions.address2 = true;
        }

        addressRestrictions.poBoxRestricted = addressRestrictions.address1 || addressRestrictions.address2;

        return addressRestrictions;
    };
    
    var isAPOFPOAddress = function(address) {
        if (apoRegex.test(address.city)) {
            return true;
        }
        
        if (fpoRegex.test(address.city)) {
            return true;
        }
        
        if (dpoRegex.test(address.city)) {
            return true;
        }
        
        if (restrictedStateCodes.contains(address.stateCode)) {
            return true;
        }
        
        return false;
    };

    var isDeniedForAPOFPO = function(shippingMethod: ShippingMethod) {
        return shippingMethod.custom.availableForAPOFPO == null || shippingMethod.custom.availableForAPOFPO === false;
    };
    
    var isDeniedForPickupPoint = function(shippingMethod: ShippingMethod) {
        return shippingMethod.custom.disabledForPUP != null && shippingMethod.custom.disabledForPUP === true;
    };
    
    var isPickupPointDelivery = function(shippingType) {
        return shippingType != null && shippingType === converse.constants.ShippingType.Pickup;
    };

    var getApplicableShippingMethodsByAddress = function(shippingMethods, shipment, address, shippingType) { 
        var shippingModel : ShipmentShippingModel = ShippingMgr.getShipmentShippingModel(shipment);
        var applicableShippingMethods : Collection = shippingModel.getApplicableShippingMethods(address);

        var applicable : ArrayList = new ArrayList();

        for each(var shippingMethod : ShippingMethod in shippingMethods) {
            if (applicableShippingMethods.contains(shippingMethod.shippingMethod)) {
                if (isAPOFPOAddress(address) && isDeniedForAPOFPO(shippingMethod.shippingMethod) 
                        || (isDeniedForPickupPoint(shippingMethod.shippingMethod) && isPickupPointDelivery(shippingType))) {
                    continue;
                }
                
                applicable.add(shippingMethod);
            }
        }

        return applicable;
    };
    
    self.filterByAddress = function(address, shippingMethodsGroups, basket: Basket, shippingType) {
        var result = new ShippingMethodsGroups();
        
        if (isPOBoxAddress(address)) {
            result.addMessage('checkout.alerts.poBoxRestricted');
         
            return result;
        }

        var shipments : Collection = basket.getShipments();
        
        for each(var shipment : Shipment in shipments) {
            var productType = getShipmentProductType(shipment);
         
            if (productType === converse.constants.ProductType.C1 && isAPOFPOAddress(address)) {
                result.addMessage('checkout.alerts.apoFpoRestricted');
                continue;
            }
            
            var shippingMethods : Collection = shippingMethodsGroups.getShippingMethods(productType);
         
            if (address == null) {
                applicable = shippingMethods;
            } else {
                applicable = getApplicableShippingMethodsByAddress(shippingMethods, shipment, address, shippingType);
            }

            if (applicable.length !== 0) {
                result.add(productType, applicable);
            }
        }
        
        return result;
    };

    self.isPOBoxAddress = isPOBoxAddress;
    self.addressRestrictions = addressRestrictions;
    self.isAPOFPOAddress = isAPOFPOAddress;
    
    return self;
} 