/**
* @input UserEmail : String The email of the user. It will be used as id in the Nike Service locker for retrieving user designs.
* @output LockerItems : Array of locker utems received from Nike
*/
importPackage( dw.system );
importPackage( dw.catalog );

importScript("converse_core:constants.ds");

importScript("int_nike:customization/CustomizationService.ds");

var CustomizationService = integration.nike.customization.CustomizationService;

function execute( args : PipelineDictionary ) : Number
{
    let result : Array = new Array();
    let customizationService = new CustomizationService();
    let lockerItemsResponse = customizationService.getLockerItems(args.UserEmail);

    if (!lockerItemsResponse.success) {
        return PIPELET_ERROR;
    }

    let lockerItems = lockerItemsResponse.lockerItems;
    let metricIds = getMetricIds(lockerItems);
    let nikeBuildsResponse = customizationService.getBuilds(metricIds);

    if (!nikeBuildsResponse.success) {
        return PIPELET_ERROR;
    }
    
    let nikeBuilds = nikeBuildsResponse.builds;

    setImages(lockerItems, nikeBuilds);
    setPrices(lockerItems);

    args.LockerItems = lockerItems;

    return PIPELET_NEXT;
}

function getMetricIds(lockerItems: Array)
{
    return lockerItems.map(function(value) { return value.metricId; });
}

function setImages(lockerItems: Array, nikeBuilds: Array)
{
    for (let i = 0; i < lockerItems.length; i++)
    {
        lockerItems[i].dyoImageUrl = nikeBuilds[i].dyoImageUrl;
    }
}

function setPrices(lockerItems : Array)
{
    for each (let lockerItem in lockerItems) {
        lockerItem.price = getProductPrice(lockerItem.productId);
    }
}

function getProductPrice(productId : String) : Number
{
    let product = ProductMgr.getProduct(productId);

    return product == null ? 0 : product.priceModel.price;
}
