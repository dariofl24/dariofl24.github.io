importPackage( dw.system );
importPackage( dw.util );
importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:util/LocaleInfo.ds");
importScript("converse_webservices:service/ServiceConfigurationFactory.ds");

(function() {
    var pidInUrlRegex = new RegExp("pid=([^&]*)")
    
    var BuilderUtils = {
        getConfiguration : function()
        {
            return converse.webservices.ServiceConfigurationFactory.getServiceConfiguration('Customization');
        },
        
        getDomain : function() 
        {
            return converse.utils.getDomain();
        },
    
        extractPidFromUrl : function( url : String ) : String {
            let pid = null;
            
            if( !empty(url) )
            {
                let matches = pidInUrlRegex.exec(url);
            
                if( !empty(matches) && matches.length > 0 )
                {
                    pid = matches[1];
                }
            }
            
            return pid;
        },
        
        getHTMLBuilderFrameUtilsUrl : function()
        {
            let configuration = this.getConfiguration();
            let frameUtilUrlPattern = configuration.htmlbuilder_frameUtilUrlPattern;
            let domain = this.getDomain();
            
            return StringUtils.format(frameUtilUrlPattern, configuration.nikeidDomain, domain);
        },
    
        getHTMLBuilderIFrameUrl : function(nikeProductID, metricId, locale)
        {
            let configuration = this.getConfiguration();
            let frameUtilUrlPattern = configuration.htmlbuilder_iframeUrlPattern;
            let domain = this.getDomain();
            let countryForBuilder = this.getBuilderCountryByLocale( locale );
            let localeForBuilder = this.getBuilderLocaleByLocale(locale);
        
            return  StringUtils.format(frameUtilUrlPattern, configuration.nikeidDomain, domain, countryForBuilder, localeForBuilder, nikeProductID, metricId);
        },

        getPosterServiceUrl : function(queryString)
        {
            let configuration = this.getConfiguration();
            let result = "//" + configuration.nikeidDomain + configuration.posterServiceUri + queryString; 
        
            return  result;
        },
        
		getBuilderLocaleByLocale : function( currentLocale ) {
		    var localization = converse.constants.localization;
		    
		    for each (var siteKey in Object.keys( localization ) ) {
		    var site = localization[siteKey];
		        for each (var localeKey in Object.keys( site ) ) {
		            if( localeKey == currentLocale ) {
		               var locale = site[localeKey];
		               return locale['localeForBuilder'];
		            }
		        }
		    }
		    
		    return null;
		 },
		 
		 getBuilderCountryByLocale : function( currentLocale ) {
            var localization = converse.constants.localization;
            
            for each (var siteKey in Object.keys( localization ) ) {
            var site = localization[siteKey];
                for each (var localeKey in Object.keys( site ) ) {
                    if( localeKey == currentLocale ) {
                       var locale = site[localeKey];
                       return locale['countryForBuilder'];
                    }
                }
            }
            
            return null;
         }
    };
    
    Namespace.extend(integration, {
        builder: {
            utils: {
                BuilderUtils : BuilderUtils
            }
        }
    });
})();