importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );

importScript("converse_core:constants.ds");
importScript("converse_core:common/libInheritance.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("converse_core:common/libStringUtilsExt.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");

importScript("int_cardinal:objects/PriceHelpers.ds");
importScript("int_cardinal:objects/AddressHelpers.ds");

(function(){

    var CARDINAL = integration.cardinal;
    var CARDINAL_CONST = CARDINAL.constants.CardinalConstants;
    var CART_OBJS = cart.objects;
    
    var isBillingAddressAvailable = function(billingAddress) {
        return !empty(billingAddress);
    };

    var AbstractCentinelRequestHelper = Class.extend({
        init : function(request: Object, priceHelper: Object, addressHelper: Object) {
            this.logger = Logger.getLogger("CARDINAL");     
            this.request = request;
            this.priceHelper = priceHelper;
            this.addressHelper = addressHelper;
        },
    
        getPriceInCents : function(price : Money) {         
            return price.multiply("100");
        },
        
        setOrderParameters : function(request : Object) {
            throw new Error("Request helper must implement 'setOrderNoParameter' method."); 
        },
        
        overridePayPalAddresses : function(parameters : dw.util.HashMap) {
            throw new Error("Request helper must implement 'overridePayPalAddresses' method."); 
        },
        
        setOrderAmountParameters : function(parameters : dw.util.HashMap, basket : BasketSummary) {
            parameters["Amount"] = this.getPriceInCents(basket.getAmount());
            this.priceHelper.setOrderShippingAmmount(parameters, basket);
            this.priceHelper.setOrderTaxAmountParameters(parameters, basket);
            parameters["CurrencyCode"] = converse.constants.Country.ISO3166_1_NumericCode;
        },
        
        setShipmentParameters : function(parameters : dw.util.HashMap, shipment : ShipmentSummary, shipmentIndex : Number) {
            parameters[StringUtilsExt.suffix("Amount_", shipmentIndex)] = this.getPriceInCents(shipment.getAmount());
            this.priceHelper.setShipmentShippingAmountParameters(parameters, shipmentIndex, shipment);
            this.priceHelper.setShipmentTaxAmountParameters(parameters, shipmentIndex, shipment);
            parameters[StringUtilsExt.suffix("CurrencyCode_", shipmentIndex)] = parameters["CurrencyCode"];
            parameters[StringUtilsExt.suffix("OrderNumber_", shipmentIndex)] = shipment.getUUID();
            parameters[StringUtilsExt.suffix("MerchantData_", shipmentIndex)] = shipment.getProductType();
            
            var merchantProcessorAlias = this.request.configuration.merchantProcessorAliases[shipment.getProductType()];
            parameters[StringUtilsExt.suffix("MerchantProcessorAlias_", shipmentIndex)] = merchantProcessorAlias;
        },
        
        setBaseParameters : function(parameters : dw.util.HashMap) {
            this.logger.info(".. setting base parameters...");
            parameters["MsgType"] = this.request.messageType();
            parameters["Version"] = this.request.configuration.version;
            parameters["ProcessorId"] = this.request.configuration.processorId;
            parameters["TransactionPwd"] = this.request.configuration.transactionPwd;
            parameters["TransactionType"] = this.request.configuration.transactionType;
            parameters["TransactionAction"] = this.request.configuration.transactionAction;
            parameters["MerchantId"] =this.request.configuration.merchantId;
            parameters["MerchantData"] = this.request.configuration.merchantId;
            parameters["MerchantProcessorAlias"] = "";      
        },
        
        setAddressParameters : function (parameters : HashMap) {
            var basket : BasketSummary = this.request.basket;
            
            if(basket.includesAddresses()) {
                var shipmentList = basket.getShipmentSummaryList();
                var firstShipment = shipmentList[0];                
                
                if (this.overridePayPalAddresses()) {
                    parameters["OverrideAddress"] = "Y";
                    parameters["ForceAddress"] = "N";
                }
                
                var shippingAddress : OrderAddress = firstShipment.getShippingAddress();
                var billingAddress : OrderAddress = basket.getBillingAddress();

                this.addressHelper.setShippingAddress(parameters, shippingAddress);
                this.addressHelper.setBillingAddress(parameters, billingAddress);
                
                var shipmentIndex = 1;
                for each (var shipment in shipmentList) {
                    this.addressHelper.setShippingAddress(parameters, shippingAddress, shipmentIndex);
                    this.addressHelper.setBillingAddress(parameters, billingAddress, shipmentIndex);
                    
                    shipmentIndex = shipmentIndex + 1;
                }
            }       
        },
        
        getParameters : function () {
            
            var parameters = {};
            
            this.setBaseParameters(parameters);
            this.setOrderParameters(parameters);
            this.setAddressParameters(parameters);

            this.logger.info("... getting xml representation of request parameters");
            var param : String = "";
            param += "<CardinalMPI>";
            
            for (var field in parameters) {
                param += "<" + field + ">" + parameters[field] + "</" + field + ">";
            }
            
            param += "<Source>PHPTC</Source>";
            param += "<SourceVersion>2.5</SourceVersion>";
            param += "<ResolveTimeout>2000</ResolveTimeout>";
            param += "<SendTimeout>2000</SendTimeout>";
            param += "<ReceiveTimeout>2000</ReceiveTimeout>";
            param += "<ConnectTimeout>2000</ConnectTimeout>";
            param += "<TransactionUrl>" + this.request.configuration.url + "</TransactionUrl>";
            param += "<MerchantSystemDate></MerchantSystemDate>";
            
            param += "</CardinalMPI>";
                
            return { "cmpi_msg": param };
        }   
    });
    
    var LookupRequestHelper = AbstractCentinelRequestHelper.extend({
        setOrderParameters : function(parameters : HashMap) {
            let basket : BasketSummary = this.request.basket;
            
            parameters["OrderNumber"] = basket.getUUID();

            this.setOrderAmountParameters(parameters, basket);
            
            let shipmentIndex = 1;
            let itemIndex = 1;
            let itemInfo = {};
            
            let shipmentsIterator : Iterator = basket.getShipmentSummaryList().iterator();
            while(shipmentsIterator.hasNext()) {
                let shipmentSummary : ShipmentSummary = shipmentsIterator.next();
                this.setShipmentParameters(parameters, shipmentSummary, shipmentIndex);
                
                for each(let item in shipmentSummary.getItemSummaryList())
                {
                    itemInfo.itemIndex = itemIndex;
                    itemInfo.name = item.getName();
                    itemInfo.description = item.getDescription();
                    itemInfo.price = this.getPriceInCents(item.getUnitPrice());
                    itemInfo.grossPrice = this.getPriceInCents(item.getGrossUnitPrice());
                    itemInfo.quantity = item.getQuantity();
                    itemInfo.sku = item.getSku();
                    itemInfo.group = parameters[StringUtilsExt.suffix("MerchantProcessorAlias_", shipmentIndex)];
                    
                    itemIndex = this.priceHelper.setItemParameters(parameters, itemInfo);
                }
                
                if (shipmentSummary.hasOrderLevelDiscounts()) {
                    itemInfo.itemIndex = itemIndex;
                    itemInfo.name = CARDINAL_CONST.OrderDiscountItemIdentifier;
                    itemInfo.description = CARDINAL_CONST.OrderDiscountItemIdentifier;
                    itemInfo.price = this.getPriceInCents(shipmentSummary.getOrderDiscountSavings());
                    itemInfo.grossPrice = this.getPriceInCents(shipmentSummary.getOrderDiscountSavings());
                    itemInfo.quantity = 1;
                    itemInfo.sku = CARDINAL_CONST.OrderDiscountItemIdentifier;
                    itemInfo.group = parameters[StringUtilsExt.suffix("MerchantProcessorAlias_", shipmentIndex)];
                    
                    itemIndex = this.priceHelper.setItemParameters(parameters, itemInfo);
                }
                
                shipmentIndex = shipmentIndex + 1;
            }
        },
        
        overridePayPalAddresses : function() {
            return true;
        }
    });

    var AuthenticateRequestHelper = AbstractCentinelRequestHelper.extend({
        setOrderParameters : function(parameters : HashMap){
             parameters["OrderId"] = this.request.centinelLookupResult.orderId;
             parameters["PAResPayload"] = this.request.centinelLookupResult.payload;       
        },
        
        setAddressParameters : function(parameters : HashMap){
        }
    });

    var OrderRequestHelper = AbstractCentinelRequestHelper.extend({
        setOrderParameters : function(parameters : HashMap) {
            this.logger.info("... getting order parameters");
            var basket : BasketSummary = this.request.basket;
            
            parameters["OrderId"] = this.request.centinelLookupResult.orderId; 
            parameters["OrderNumber"] = this.request.centinelLookupResult.orderNumber;
            
            this.setOrderAmountParameters(parameters, basket);
           
            this.logger.info("... setting item information into request parameters"); 
            var shipmentIndex = 1;
            var shipmentsIterator : Iterator = basket.getShipmentSummaryList().iterator();
            while(shipmentsIterator.hasNext()) {
                var shipment : ShipmentSummary = shipmentsIterator.next();
                this.setShipmentParameters(parameters, shipment, shipmentIndex);                
                
                parameters["OrderId_"+shipmentIndex] = this.request.centinelLookupResult.orders[shipment.getUUID()].orderId;
                
                shipmentIndex = shipmentIndex + 1;
            }   
        },
        
        overridePayPalAddresses : function() {
            return false;
        }
    });

    var VoidRequestHelper = AbstractCentinelRequestHelper.extend({
        setOrderParameters : function(parameters : HashMap) {
            this.logger.info("... getting order parameters");
            parameters["OrderId"] = this.request.orderId;
        },
        
        setAddressParameters : function(parameters : HashMap) {
        }
    });
    
    var RequestCentinelHelperFactory = {
        getHelper: function( request : CentinelRequest ) {
            this.logger = Logger.getLogger("CARDINAL"); 
            this.logger.info(request.messageType());

            let addressHelperFactory = new integration.cardinal.objects.AddressHelperFactory();
            let priceHelperFactory = new integration.cardinal.objects.PriceHelperFactory();
            
            let priceHelper = priceHelperFactory.helper();
            let addressHelper = addressHelperFactory.helper();
            
            if(request.messageType().equals(CARDINAL_CONST.MessageType.Lookup)) {
                return new LookupRequestHelper(request, priceHelper, addressHelper);
            }
            else if(request.messageType().equals(CARDINAL_CONST.MessageType.Authenticate)) {
                return new AuthenticateRequestHelper(request, priceHelper, addressHelper);
            }
            else if(request.messageType().equals(CARDINAL_CONST.MessageType.Order)) {
                return new OrderRequestHelper(request, priceHelper, addressHelper);
            }
            else {
                return new VoidRequestHelper(request, priceHelper, addressHelper);
            }
        }
    }
    
    Namespace.extend(integration, { 
        cardinal: { 
            objects: {
                RequestCentinelHelperFactory: RequestCentinelHelperFactory,
                AbstractCentinelRequestHelper: AbstractCentinelRequestHelper
            }
        }
    });

})();
