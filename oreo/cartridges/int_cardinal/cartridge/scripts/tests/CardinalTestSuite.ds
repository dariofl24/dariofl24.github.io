/**
 * @input Unit: Object
 */

importPackage(dw.value)
importPackage(dw.system);

importScript("module_test:Framework/Unit.ds"); 
importScript("module_test:Framework/Assert.ds"); 
importScript("module_test:Mocks/BasketSummaryMocks.ds");

importScript("converse_core:constants.ds");
importScript("int_cardinal:CentinelResponseTransformer.ds");
importScript("int_cardinal:CardinalConstants.ds");
importScript("int_cardinal:command/CentinelRequest.ds")
importScript("int_cardinal:objects/RawCentinelResponse.ds");
importScript("converse_core:cart/objects/BasketSummary.ds");
importScript("int_cardinal:objects/CentinelRequestParametersHelper.ds")
importScript("int_cardinal:objects/PopulateAddressInformationHelper.ds")
importScript("int_cardinal:tests/TestUtils.ds");
importScript("int_cardinal:tests/mocks/CentinelRequestParametersHelperMocks.ds");
importScript("int_cardinal:tests/mocks/PopulateAddressInformationMocks.ds");

function execute(args: PipelineDictionary) {
    var TEST_MOCKS = converse.test.mocks
    var CARDINAL = integration.cardinal;
    var CARDINAL_OBJ = CARDINAL.objects;
    var CART_OBJ = cart.objects;
    var CARDINAL_CONST = CARDINAL.constants.CardinalConstants;
    var TEST_UTILS = CARDINAL.tests;
    var CURRENCY = converse.constants.CurrencyCode;
       
    var CreateBasketSummaryMock = function() {
        var baseAmount : Money = new Money("1.0", CURRENCY ) ;
        var basketSummary : BasketSummary = new CART_OBJ.BasketSummary();
        var billingAddress : OrderAddress = new CART_OBJ.OrderAddressSummary();
        var shipingAddress : OrderAddress = new CART_OBJ.OrderAddressSummary();
        var shipmentSummary : ShipmentSummary = new CART_OBJ.ShipmentSummary();
        var itemSummary : ItemSummary = new CART_OBJ.ItemSummary();
        
        basketSummary.setUUID("xyz12345");
        basketSummary.setAmount(baseAmount);
        basketSummary.setShippingNetAmount(baseAmount);
        basketSummary.setShippingGrossAmount(baseAmount);
        basketSummary.setTaxAmount(baseAmount);
        
        billingAddress.setFirstName("Wyvern");
        billingAddress.setLastName("Dragon");
        billingAddress.setAddress1("123 dark street ");
        billingAddress.setAddress2("246 dark av");
        billingAddress.setCity("underworld");
        billingAddress.setState("UND");
        billingAddress.setCountry("UN");
        billingAddress.setPostalCode("99666");
        billingAddress.setPhone("123-899-4561");
        
        var shipPrefix = "Ship";
        shipingAddress.setFirstName(shipPrefix + billingAddress.getFirstName());
        shipingAddress.setLastName(shipPrefix + billingAddress.getLastName());
        shipingAddress.setAddress1(shipPrefix + billingAddress.getAddress1());
        shipingAddress.setAddress2(shipPrefix + billingAddress.getAddress2());
        shipingAddress.setCity(billingAddress.getCity());
        shipingAddress.setState(billingAddress.getState());
        shipingAddress.setCountry(billingAddress.getCountry());
        shipingAddress.setPostalCode(billingAddress.getPostalCode());
        shipingAddress.setPhone(billingAddress.getPhone());
        
        shipmentSummary.setUUID("xyz1234545646");
        shipmentSummary.setAmount(baseAmount.multiply("2"));
        shipmentSummary.setShippingNetAmount(baseAmount.multiply("2"));
        shipmentSummary.setShippingGrossAmount(baseAmount.multiply("2"));
        shipmentSummary.setTaxAmount(baseAmount.multiply("2"));
        shipmentSummary.setProductType("REGULAR");
        shipmentSummary.setShippingAddress(shipingAddress);
        
        itemSummary.setSku("ITEM456");
        itemSummary.setName("Runner shoes");
        itemSummary.setDescription("Runner shoes");
        itemSummary.setPrice(baseAmount.multiply("50"));
        itemSummary.setUnitPrice(baseAmount.multiply("30"));
        itemSummary.setGrossUnitPrice(baseAmount.multiply("30"));
        itemSummary.setQuantity("15");
        
        shipmentSummary.addItemSummary(itemSummary);
        
        basketSummary.setBillingAddress(billingAddress);
        basketSummary.addShipmentSummary(shipmentSummary);
        return basketSummary;       
    };

    let generateAuthenticateResponse = function() {
        var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.AUTHENTICATE_FIELD_VALUES));
        var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
        var authenticateResponse = CARDINAL.CentinelResponseTransformer.getAuthenticateResponse(rawCentinelResponse);
        
        return authenticateResponse;
    };
    
    args.Unit.describe("Cardinal")
        .test("Raw_centinel_response_parsing_success", function() {
            var command = TEST_UTILS.TestCommandFactory.getSuccessCommand();            
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber, rawCentinelResponse.OrderNumber, "'OrderNumber' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1, rawCentinelResponse.OrderNumber_1, "'OrderNumber_1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.MerchantData, rawCentinelResponse.MerchantData, "'MerchantData' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.TransactionId, rawCentinelResponse.TransactionId, "'TransactionId' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.TransactionId_1, rawCentinelResponse.TransactionId_1, "'TransactionId_1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.ReasonCode, rawCentinelResponse.ReasonCode, "'ReasonCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.ErrorDesc, rawCentinelResponse.ErrorDesc, "'ErrorDesc' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.ACSUrl, rawCentinelResponse.ACSUrl, "'ACSUrl' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderId, rawCentinelResponse.OrderId, "'OrderId' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderId_1, rawCentinelResponse.OrderId_1, "'OrderId_1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.MerchantData_1, rawCentinelResponse.MerchantData_1, "'MerchantData_1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.MerchantReferenceNumber, rawCentinelResponse.MerchantReferenceNumber, "'MerchantReferenceNumber' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.ErrorNo, rawCentinelResponse.ErrorNo, "'ErrorNo' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.Payload, rawCentinelResponse.Payload, "'Payload' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.Enrolled, rawCentinelResponse.Enrolled, "'Enrolled' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.EciFlag, rawCentinelResponse.EciFlag, "'EciFlag' field value doesn't match!");
            
            Assert.isTrue(rawCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
            
            Assert.isFalse(rawCentinelResponse.hasMultipleOrders(), "'hasMultipleOrders()' expected to return false");
        })
        .test("Raw_centinel_response_parsing_fail", function() {
            var command = TEST_UTILS.TestCommandFactory.getFailedCommand();
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            
            Assert.areEqual(TEST_UTILS.FAILED_ORDER_FIELD_VALUES.ErrorNo, rawCentinelResponse.ErrorNo, "'ErrorNo' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FAILED_ORDER_FIELD_VALUES.ErrorDesc, rawCentinelResponse.ErrorDesc, "'ErrorDesc' field value doesn't match!");
            Assert.isFalse(rawCentinelResponse.isSuccess(), "'isSuccess()' expected to return false");
        })
        .test("Raw_centinel_response_parsing_parallel_payments", function () {
            var parallelPaymentsResponse = TEST_UTILS.mergeObjects(TEST_UTILS.FIRST_ORDER_FIELD_VALUES, TEST_UTILS.COMPLEMENTARY_ORDER_FIELD_VALUES);
            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(parallelPaymentsResponse));
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            
            Assert.areEqual(parallelPaymentsResponse.OrderNumber, rawCentinelResponse.OrderNumber, "'OrderNumber' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantData, rawCentinelResponse.MerchantData, "'MerchantData' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId, rawCentinelResponse.TransactionId, "'TransactionId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.ReasonCode, rawCentinelResponse.ReasonCode, "'ReasonCode' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.ErrorDesc, rawCentinelResponse.ErrorDesc, "'ErrorDesc' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.ACSUrl, rawCentinelResponse.ACSUrl, "'ACSUrl' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.OrderId, rawCentinelResponse.OrderId, "'OrderId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantReferenceNumber, rawCentinelResponse.MerchantReferenceNumber, "'MerchantReferenceNumber' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.ErrorNo, rawCentinelResponse.ErrorNo, "'ErrorNo' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.Payload, rawCentinelResponse.Payload, "'Payload' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.Enrolled, rawCentinelResponse.Enrolled, "'Enrolled' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.EciFlag, rawCentinelResponse.EciFlag, "'EciFlag' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.Enrolled, rawCentinelResponse.Enrolled, "'Enrolled' field value doesn't match!");
            
            Assert.areEqual(parallelPaymentsResponse.OrderNumber_1, rawCentinelResponse.OrderNumber_1, "'OrderNumber_1' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.OrderId_1, rawCentinelResponse.OrderId_1, "'OrderId_1' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId_1, rawCentinelResponse.TransactionId_1, "'TransactionId_1' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantData_1, rawCentinelResponse.MerchantData_1, "'MerchantData_1' field value doesn't match!");
            
            Assert.areEqual(parallelPaymentsResponse.OrderNumber_2, rawCentinelResponse.OrderNumber_2, "'OrderNumber_2' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.OrderId_2, rawCentinelResponse.OrderId_2, "'OrderId_2' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId_2, rawCentinelResponse.TransactionId_2, "'TransactionId_2' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantData_2, rawCentinelResponse.MerchantData_2, "'MerchantData_2' field value doesn't match!");
            
            Assert.isTrue(rawCentinelResponse.hasMultipleOrders(), "'hasMultipleOrders()' expected to return true");
        })
        .test("Lookup_success_centinel_response_parsing_a_success_raw_response", function () {
            var command = TEST_UTILS.TestCommandFactory.getSuccessCommand();            
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var lookupCentinelResponse = CARDINAL.CentinelResponseTransformer.getLookupResponse(rawCentinelResponse);
            
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.MerchantData, lookupCentinelResponse.merchantData, "'merchantData' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.ACSUrl, lookupCentinelResponse.acsUrl, "'acsUrl' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.Payload, lookupCentinelResponse.payload, "'payload' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.Enrolled, lookupCentinelResponse.enrolled, "'enrolled' field value doesn't match!"); 
            
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber, lookupCentinelResponse.orderNumber, "'orderNumber' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderId, lookupCentinelResponse.orderId, "'orderId' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.TransactionId, lookupCentinelResponse.transactionId, "'transactionId' field value doesn't match!");  
            
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderId_1, lookupCentinelResponse.orders[TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1].orderId, 
                "'lookupCentinelResponse.orders['" + TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1 + "'].orderId' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.TransactionId_1, lookupCentinelResponse.orders[TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1].transactionId, 
                "'lookupCentinelResponse.orders['" + TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1 + "'].transactionId' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FIRST_ORDER_FIELD_VALUES.MerchantData_1, lookupCentinelResponse.orders[TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1].shipmentType, 
                "'lookupCentinelResponse.orders['" + TEST_UTILS.FIRST_ORDER_FIELD_VALUES.OrderNumber_1 + "'].shipmentType' field value doesn't match!");
            
            Assert.isTrue(lookupCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
        })
        .test("Void_success_centinel_response_parsing_a_success_raw_response", function () {
            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.VOID_FIELD_VALUES));           
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var voidCentinelResponse = CARDINAL.CentinelResponseTransformer.getVoidResponse(rawCentinelResponse);
            
            Assert.areEqual(TEST_UTILS.VOID_FIELD_VALUES.StatusCode, voidCentinelResponse.statusCode, "'statusCode' field value doesn't match!");            
            Assert.isTrue(voidCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
        })
        .test("Authenticate_success_centinel_response_parsing_a_success_raw_response", function () {
            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.AUTHENTICATE_FIELD_VALUES));            
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var authenticateCentinelResponse = CARDINAL.CentinelResponseTransformer.getAuthenticateResponse(rawCentinelResponse);
            
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.PAResStatus, authenticateCentinelResponse.paResStatus, "'paResStatus' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.SignatureVerification, authenticateCentinelResponse.signatureVerification, "'signatureVerification' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserStatus, authenticateCentinelResponse.userStatus, "'userStatus' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserFirstName, authenticateCentinelResponse.userFirstName, "'userFirstName' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserLastName, authenticateCentinelResponse.userLastName, "'userLastName' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserEmail, authenticateCentinelResponse.userEmail, "'userEmail' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingFullName, authenticateCentinelResponse.shippingFullName, "'shippingFullName' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingAddress1, authenticateCentinelResponse.shippingAddress1, "'shippingAddress1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingAddress2, authenticateCentinelResponse.shippingAddress2, "'shippingAddress2' field value doesn't match!");           
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingCity, authenticateCentinelResponse.shippingCity, "'shippingCity' field value doesn't match!");           
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingState, authenticateCentinelResponse.shippingState, "'shippingState' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingPostalCode, authenticateCentinelResponse.shippingPostalCode, "'shippingPostalCode' field value doesn't match!");
               
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingCountryCode, authenticateCentinelResponse.shippingCountryCode, "'shippingCountryCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingPhone, authenticateCentinelResponse.shippingPhone, "'shippingPhone' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingFullName, authenticateCentinelResponse.billingFullName, "'billingFullName' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingAddress1, authenticateCentinelResponse.billingAddress1, "'billingAddress1' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingAddress2, authenticateCentinelResponse.billingAddress2, "'billingAddress2' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingCity, authenticateCentinelResponse.billingCity, "'billingCity' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingState, authenticateCentinelResponse.billingState, "'billingStat' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingPostalCode, authenticateCentinelResponse.billingPostalCode , "'billingPostalCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingCountryCode, authenticateCentinelResponse.billingCountryCode, "'billingCountryCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorBillingPhone, authenticateCentinelResponse.billingPhone, "'billingPhone' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingMethod, authenticateCentinelResponse.shippingMethod, "'shippingMethod' field value doesn't match!");
            
            Assert.isTrue(authenticateCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
        })
        .test("Void_success_centinel_response_parsing_a_success_raw_response", function () {
            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.VOID_FIELD_VALUES));
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var voidCentinelResponse = CARDINAL.CentinelResponseTransformer.getVoidResponse(rawCentinelResponse);
            
            Assert.areEqual(TEST_UTILS.VOID_FIELD_VALUES.StatusCode, voidCentinelResponse.statusCode, "'statusCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.VOID_FIELD_VALUES.ReasonDesc, voidCentinelResponse.reasonDesc, "'reasonDesc' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.VOID_FIELD_VALUES.ReasonCode, voidCentinelResponse.reasonCode, "'reasonCode' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.VOID_FIELD_VALUES.OrderId, voidCentinelResponse.orderId, "'orderId' field value doesn't match!");
            
            Assert.isTrue(voidCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
        })
        .test("Lookup_centinel_response_parsing_a_parallel_payment_raw_response", function () {
            var parallelPaymentsResponse = TEST_UTILS.mergeObjects(TEST_UTILS.FIRST_ORDER_FIELD_VALUES, TEST_UTILS.COMPLEMENTARY_ORDER_FIELD_VALUES);
            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(parallelPaymentsResponse));
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var lookupCentinelResponse = CARDINAL.CentinelResponseTransformer.getLookupResponse(rawCentinelResponse);
            
            Assert.areEqual(parallelPaymentsResponse.MerchantData, lookupCentinelResponse.merchantData, "'merchantData' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.ACSUrl, lookupCentinelResponse.acsUrl, "'acsUrl' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.Payload, lookupCentinelResponse.payload, "'payload' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.Enrolled, lookupCentinelResponse.enrolled, "'enrolled' field value doesn't match!"); 
            
            Assert.areEqual(parallelPaymentsResponse.OrderNumber, lookupCentinelResponse.orderNumber, "'orderNumber' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.OrderId, lookupCentinelResponse.orderId, "'orderId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId, lookupCentinelResponse.transactionId, "'transactionId' field value doesn't match!");  
            
            Assert.areEqual(parallelPaymentsResponse.OrderId_1, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_1].orderId, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_1 + "'].orderId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId_1, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_1].transactionId, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_1 + "'].transactionId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantData_1, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_1].shipmentType, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_1 + "'].shipmentType' field value doesn't match!");
            
            Assert.areEqual(parallelPaymentsResponse.OrderId_2, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_2].orderId, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_2 + "'].orderId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.TransactionId_2, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_2].transactionId, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_2 + "'].transactionId' field value doesn't match!");
            Assert.areEqual(parallelPaymentsResponse.MerchantData_2, lookupCentinelResponse.orders[parallelPaymentsResponse.OrderNumber_2].shipmentType, 
                "'lookupCentinelResponse.orders['" + parallelPaymentsResponse.OrderNumber_2 + "'].shipmentType' field value doesn't match!");
            
            Assert.isTrue(lookupCentinelResponse.isSuccess(), "'isSuccess()' expected to return true");
        })
        .test("Lookup_centinel_response_parsing_a_failed_raw_response", function () {
            var command = TEST_UTILS.TestCommandFactory.getFailedCommand();
            var failedRawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var lookupCentinelResponse = CARDINAL.CentinelResponseTransformer.getLookupResponse(failedRawCentinelResponse);
            
            Assert.areEqual(TEST_UTILS.FAILED_ORDER_FIELD_VALUES.ErrorNo, lookupCentinelResponse.errorNo, "'errorNo' field value doesn't match!");
            Assert.areEqual(TEST_UTILS.FAILED_ORDER_FIELD_VALUES.ErrorDesc, lookupCentinelResponse.errorDesc, "'errorDesc' field value doesn't match!");
            
            Assert.isFalse(lookupCentinelResponse.isSuccess(), "'isSuccess()' expected to return false");            
        })
        .test("Lookup_failed_centinel_response_parsing_a_success_raw_response", function () {
            var responseFields = {       
                MerchantData: "",
                ReasonCode: "",
                ErrorDesc: "",
                ErrorNo: "0",
                Enrolled: CARDINAL_CONST.PaymentStatus.Unavailable
            };
            
            var command = TEST_UTILS.TestCommandFactory.getCommand(responseFields);
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var lookupCentinelResponse = CARDINAL.CentinelResponseTransformer.getLookupResponse(rawCentinelResponse);
            
            Assert.isFalse(lookupCentinelResponse.isSuccess(), "'isSuccess()' expected to return false");
        })
        .test("Lookup_verify_amounts_decimalization", function () {
            var request : CentinelRequest = new CARDINAL.command.CentinelLookupRequest(null);
            var requestHelper : CentinelRequestParametersHelper = request.createRequest();
            
            Assert.areEqual("99", requestHelper.getPriceInCents( new Money("0.99", CURRENCY) ) );
            Assert.areEqual("10000", requestHelper.getPriceInCents( new Money("100.00", CURRENCY) ) );
            Assert.areEqual("12367", requestHelper.getPriceInCents( new Money("123.67", CURRENCY) ) );
            Assert.areEqual("120001", requestHelper.getPriceInCents( new Money("1200.01", CURRENCY) )); 
            Assert.areEqual("7590", requestHelper.getPriceInCents( new Money("75.9", CURRENCY) ) );                     
            Assert.areEqual("7501", requestHelper.getPriceInCents( new Money("75.01", CURRENCY) ) );                    
        })
        .test("Authenticate_verify_amounts_decimalization", function () {
            var request : CentinelRequest = new CARDINAL.command.CentinelAuthenticateRequest(null);
            var requestHelper : CentinelRequestParametersHelper = request.createRequest();
            
            Assert.areEqual("99", requestHelper.getPriceInCents( new Money("0.99", CURRENCY) ) );
            Assert.areEqual("10000", requestHelper.getPriceInCents( new Money("100.00", CURRENCY) ) );
            Assert.areEqual("12367", requestHelper.getPriceInCents( new Money("123.67", CURRENCY) ) );
            Assert.areEqual("120001", requestHelper.getPriceInCents( new Money("1200.01", CURRENCY) )); 
            Assert.areEqual("7590", requestHelper.getPriceInCents( new Money("75.9", CURRENCY) ) );                     
            Assert.areEqual("7501", requestHelper.getPriceInCents( new Money("75.01", CURRENCY) ) );                        
        })
        .test("Lookup_verify_baseParameters", function () {
            var version = "1.7";           var processorId = "proc123";                  var transactionPwd = "trans8745jpq";
            var transactionType = "buy";   var transactionAction = "transactionAction";  var merchantId = "buyer";
            var parameters : dw.util.HashMap = {};
            
            var mockRequest : Object = new TEST_MOCKS.MockRequest(version, processorId, transactionPwd, transactionType, transactionAction, merchantId, null);
            var centinelRequest : CentinelRequest = new CARDINAL.command.CentinelLookupRequest(null);   
            var requestHelper : CentinelRequestParametersHelper = centinelRequest.createRequestObject(mockRequest);         
                    
            requestHelper.setBaseParameters(parameters);

            Assert.areEqual(version, parameters["Version"], "'version' does not match!");
            Assert.areEqual(transactionType, parameters["TransactionType"], "'TransactionType' does not match!");
            Assert.areEqual(processorId, parameters["ProcessorId"], "'ProcessorId' does not match!");
            Assert.areEqual(transactionPwd, parameters["TransactionPwd"], "'TransactionPwd' does not match!");
            Assert.areEqual(transactionAction, parameters["TransactionAction"], "'TransactionAction' does not match!");
            Assert.areEqual(merchantId, parameters["MerchantId"], "'MerchantId' does not match!");
            Assert.areEqual(merchantId, parameters["MerchantData"], "'MerchantData' does not match!");
            
        })
        .test("Lookup_verify_orderParameters", function () {
            var version = "1.7";           var processorId = "proc123";                  var transactionPwd = "trans8745jpq";
            var transactionType = "buy";   var transactionAction = "transactionAction";  var merchantId = "buyer";
            var parameters : dw.util.HashMap = {};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockRequest : Object = new TEST_MOCKS.MockRequest(version, processorId, transactionPwd, transactionType, transactionAction, merchantId, mockBasket);
            var centinelRequest : CentinelRequest = new CARDINAL.command.CentinelLookupRequest(mockBasket); 
            var requestHelper : CentinelRequestParametersHelper = centinelRequest.createRequestObject(mockRequest);         
                    
            requestHelper.setOrderParameters(parameters);

            Assert.areEqual(requestHelper.getPriceInCents(mockBasket.getAmount()).getValue(), parameters["Amount"].getValue(), "'Amount' must be equal to basket amount!");

            var mockShipment = mockBasket.getShipmentSummaryList()[0];
            Assert.areEqual(requestHelper.getPriceInCents(mockShipment.getAmount()).getValue(), parameters["Amount_1"].getValue(), "'Shipment Amount' must be equal!");
            Assert.areEqual(converse.constants.Country.ISO3166_1_NumericCode, parameters["CurrencyCode_1"], "'Currency code' must be equal!");
            Assert.areEqual(mockShipment.getUUID(), parameters["OrderNumber_1"], "'OrderNumber' must be equal!");
            
            var mockItem = mockShipment.getItemSummaryList()[0];
            Assert.areEqual(requestHelper.getPriceInCents(mockItem.getUnitPrice()).getValue(), parameters["Item_Price_1"].getValue(), "'Item Amount' must be equal!");
            Assert.areEqual(mockItem.getSku(), parameters["Item_SKU_1"], "'Item sku' does not match!");
            Assert.areEqual(mockItem.getName(), parameters["Item_Name_1"], "'Item sku' does not match!");
            Assert.areEqual(mockItem.getQuantity(), parameters["Item_Quantity_1"], "'Item sku' does not match!");
            Assert.areEqual(mockRequest.configuration.merchantProcessorAliases["REGULAR"], parameters["Item_Group_1"], "'Item Group' does not match!");
        })
        .localized_test("US should send TaxAmount field", [Unit.Sites.US], function() {
            var version = "1.7";           var processorId = "proc123";                  var transactionPwd = "trans8745jpq";
            var transactionType = "buy";   var transactionAction = "transactionAction";  var merchantId = "buyer";
            var parameters : dw.util.HashMap = {};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockRequest : Object = new TEST_MOCKS.MockRequest(version, processorId, transactionPwd, transactionType, transactionAction, merchantId, mockBasket);
            var centinelRequest : CentinelRequest = new CARDINAL.command.CentinelLookupRequest(mockBasket); 
            var requestHelper : CentinelRequestParametersHelper = centinelRequest.createRequestObject(mockRequest);         
                    
            requestHelper.setOrderParameters(parameters);

            Assert.areEqual(requestHelper.getPriceInCents(mockBasket.getTaxAmount()).getValue(), parameters["TaxAmount"].getValue(), "'Tax Amount' must be equal to basket amount!");

            var mockShipment = mockBasket.getShipmentSummaryList()[0];
            Assert.areEqual(requestHelper.getPriceInCents(mockShipment.getTaxAmount()).getValue(), parameters["TaxAmount_1"].getValue(), "'Shipment Amount' must be equal!");
        })
        .localized_test("GB should not send TaxAmount field", [Unit.Sites.GB], function() {
            var version = "1.7";           var processorId = "proc123";                  var transactionPwd = "trans8745jpq";
            var transactionType = "buy";   var transactionAction = "transactionAction";  var merchantId = "buyer";
            var parameters : dw.util.HashMap = {};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockRequest : Object = new TEST_MOCKS.MockRequest(version, processorId, transactionPwd, transactionType, transactionAction, merchantId, mockBasket);
            var centinelRequest : CentinelRequest = new CARDINAL.command.CentinelLookupRequest(mockBasket); 
            var requestHelper : CentinelRequestParametersHelper = centinelRequest.createRequestObject(mockRequest);         
                    
            requestHelper.setOrderParameters(parameters);

            Assert.isUndefined(parameters["TaxAmount"], "'Tax Amount' must not be defined.");
            Assert.isUndefined(parameters["TaxAmount_1"], "'Tax Amount' for the shipment must not be defined.");
        })
        .test("RequestHelper_test_address_parameters_filling_for_expresscheckout", function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockBasket : Object = new CreateBasketSummaryMock();
            
            var requestHelper : AbstractCentinelRequestHelper = new CARDINAL_OBJ.AbstractCentinelRequestHelper({});
            mockBasket.includesAddresses = function() { return false; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);
            
            Assert.areEqual(0, parameters.size(), "No address information should be added to the request parameters for Express checkout");
        })
        .test("RequestHelper, billingAddress should not be populated when not present in Basket (i.e. PayPal from Billing page)", function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockRequest = { messageType : function() { return CARDINAL_CONST.MessageType.Lookup }};
            var mockBasket : Object = new CreateBasketSummaryMock();            
            var mockShippingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getShipmentSummaryList()[0].getShippingAddress();
            
            mockBasket.setBillingAddress(null);
            
            var requestHelper : OrderRequestHelper = CARDINAL_OBJ.RequestCentinelHelperFactory.getHelper(mockRequest);
            mockBasket.includesAddresses = function() { return true; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);

            for (let key: String in parameters) {
                Assert.isTrue(key.indexOf("Billing") === -1, "Parameters map should not contain fields related to billing!");
            }
        })
        .test("RequestHelper_test_address_parameters_filling_for_order_request", function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockRequest = { messageType : function() { return CARDINAL_CONST.MessageType.Order }};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockBillingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getBillingAddress();
            var mockShippingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getShipmentSummaryList()[0].getShippingAddress();
            
            var requestHelper : OrderRequestHelper = CARDINAL_OBJ.RequestCentinelHelperFactory.getHelper(mockRequest);
            mockBasket.includesAddresses = function() { return true; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);

            Assert.areEqual(mockBillingAddress.getFirstName(), parameters["BillingFirstName"], "'BillingFirstName' does not match!");
            Assert.areEqual(mockBillingAddress.getLastName(), parameters["BillingLastName"], "'BillingLastName' does not match!");
            Assert.areEqual(mockBillingAddress.getAddress1(), parameters["BillingAddress1"], "'BillingAddress1' does not match!");
            Assert.areEqual(mockBillingAddress.getAddress2(), parameters["BillingAddress2"], "'BillingAddress2' does not match!");
            Assert.areEqual(mockBillingAddress.getCity(), parameters["BillingCity"], "'BillingCity' does not match!");
            Assert.areEqual(mockBillingAddress.getCountry(), parameters["BillingCountryCode"], "'BillingCountryCode' does not match!");  
            Assert.areEqual(mockBillingAddress.getPostalCode(), parameters["BillingPostalCode"], "'BillingPostalCode' does not match!"); 
            Assert.areEqual(mockBillingAddress.getPhone(), parameters["BillingPhone"], "'BillingPhone' does not match!");
            
            Assert.areEqual(mockShippingAddress.getFirstName(), parameters["ShippingFirstName"], "'ShippingFirstName' does not match!");
            Assert.areEqual(mockShippingAddress.getLastName(), parameters["ShippingLastName"], "'ShippingLastName' does not match!");
            Assert.areEqual(mockShippingAddress.getAddress1(), parameters["ShippingAddress1"], "'ShippingAddress1' does not match!");
            Assert.areEqual(mockShippingAddress.getAddress2(), parameters["ShippingAddress2"], "'ShippingAddress2' does not match!");
            Assert.areEqual(mockShippingAddress.getCity(), parameters["ShippingCity"], "'ShippingCity' does not match!");
            Assert.areEqual(mockShippingAddress.getCountry(), parameters["ShippingCountryCode"], "'ShippingCountryCode' does not match!");  
            Assert.areEqual(mockShippingAddress.getPostalCode(), parameters["ShippingPostalCode"], "'ShippingPostalCode' does not match!"); 
            Assert.areEqual(mockShippingAddress.getPhone(), parameters["ShippingPhone"], "'ShippingPhone' does not match!");
            
            Assert.isFalse(parameters.containsKey("ForceAddress"), "'ForceAddress' should not be passed for order request!");
            Assert.isFalse(parameters.containsKey("OverrideAddress"), "'OverrideAddress' should not be passed for order request!");
        })
        .localized_test("RequestHelper, US state code correctly filled in for order request", [Unit.Sites.US], function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockRequest = { messageType : function() { return CARDINAL_CONST.MessageType.Order }};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockBillingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getBillingAddress();
            var mockShippingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getShipmentSummaryList()[0].getShippingAddress();
            
            var requestHelper : OrderRequestHelper = CARDINAL_OBJ.RequestCentinelHelperFactory.getHelper(mockRequest);
            mockBasket.includesAddresses = function() { return true; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);

            Assert.areEqual(mockBillingAddress.getState(), parameters["BillingState"], "'BillingState' does not match!");
            Assert.areEqual(mockShippingAddress.getState(), parameters["ShippingState"], "'ShippingState' does not match!");
        })
        .localized_test("RequestHelper, GB state code correctly filled in for order request", [Unit.Sites.GB], function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockRequest = { messageType : function() { return CARDINAL_CONST.MessageType.Order }};
            var mockBasket : Object = new CreateBasketSummaryMock();
            var mockBillingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getBillingAddress();
            var mockShippingAddress : TEST_MOCKS.MockOrderAddress = mockBasket.getShipmentSummaryList()[0].getShippingAddress();
            
            var requestHelper : OrderRequestHelper = CARDINAL_OBJ.RequestCentinelHelperFactory.getHelper(mockRequest);
            mockBasket.includesAddresses = function() { return true; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);

            Assert.areEqual("GB", parameters["BillingState"], "'BillingState' does not match!");
            Assert.areEqual("GB", parameters["ShippingState"], "'ShippingState' does not match!");
        })
        .test("RequestHelper_test_address_parameters_filling_for_lookup_request_should_override_PP_address", function () {
            var parameters : dw.util.HashMap = new dw.util.HashMap();
            var mockRequest = { messageType : function() { return CARDINAL_CONST.MessageType.Lookup }};
            var mockBasket : Object = new CreateBasketSummaryMock();
            
            var requestHelper : LookupRequestHelper = CARDINAL_OBJ.RequestCentinelHelperFactory.getHelper(mockRequest);
            mockBasket.includesAddresses = function() { return true; }
            requestHelper.request.basket = mockBasket;
                    
            requestHelper.setAddressParameters(parameters);

            Assert.areEqual("Y", parameters["OverrideAddress"], "'OverrideAddress' should be set to 'Y'!");
            Assert.areEqual("N", parameters["ForceAddress"], "'ForceAddress' shoul be set to 'N'!");
        })
        .test("Populate_Address_after_authenticate", function () {
            var mockBillingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShippingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShipment = new TEST_MOCKS.MockPopulateShipment(mockShippingAddress);
            var mockShipmentList : Collection = new dw.util.ArrayList();
            mockShipmentList.add(mockShipment);
            var mockBasket = new TEST_MOCKS.MockPopulateBasket(mockShipmentList, mockBillingAddress);

            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.AUTHENTICATE_FIELD_VALUES));            
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var authenticateResponse = CARDINAL.CentinelResponseTransformer.getAuthenticateResponse(rawCentinelResponse);
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setShippingAddressToBasket(mockBasket, authenticateResponse); 

            Assert.areEqual(authenticateResponse.userFirstName, mockShippingAddress.getFirstName(), "'First Name' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.userLastName, mockShippingAddress.getLastName(), "'Last Name' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingAddress1, mockShippingAddress.getAddress1(), "'Address1' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingAddress2, mockShippingAddress.getAddress2(), "'Address2' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingCountryCode, mockShippingAddress.getCountryCode(), "'Country Code' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingCity, mockShippingAddress.getCity(), "'City' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingState, mockShippingAddress.getStateCode(), "'State Code' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingPostalCode, mockShippingAddress.getPostalCode(), "'Postal Code' for Shipping address does not match!");
            Assert.areEqual(authenticateResponse.shippingPhone, mockShippingAddress.getPhone(), "'Phone' for Shipping address does not match!"); 
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setBillingAddressToBasket(mockBasket, authenticateResponse);     

            Assert.areEqual(authenticateResponse.userFirstName, mockBillingAddress.getFirstName(), "'First Name' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.userLastName, mockBillingAddress.getLastName(), "'Last Name' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingAddress1, mockBillingAddress.getAddress1(), "'Address 1' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingAddress2, mockBillingAddress.getAddress2(), "'Address 2' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingCountryCode, mockBillingAddress.getCountryCode(), "'Country Code' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingState, mockBillingAddress.getStateCode(), "'State Code' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.shippingPhone, mockBillingAddress.getPhone(), "'Phone' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.userEmail, mockBasket.getCustomerEmail(), "'CustomerEmail' for Basket does not match!");
        })
        .test("Populate_multiple_Shipping_Address_after_authenticate", function () {

            var mockBillingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShippingAddress1 = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShippingAddress2 = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShippingAddress3 = new TEST_MOCKS.MockPopulateOrderAddress();
            var mockShipment1 = new TEST_MOCKS.MockPopulateShipment(mockShippingAddress1);
            var mockShipment2 = new TEST_MOCKS.MockPopulateShipment(mockShippingAddress2);
            var mockShipment3 = new TEST_MOCKS.MockPopulateShipment(mockShippingAddress3);
            
            var mockShipmentList : Collection = new dw.util.ArrayList();
            mockShipmentList.add(mockShipment1);
            mockShipmentList.add(mockShipment2);
            mockShipmentList.add(mockShipment3);
            var mockBasket = new TEST_MOCKS.MockPopulateBasket(mockShipmentList, mockBillingAddress);

            var command = TEST_UTILS.TestCommandFactory.getCommand(true, TEST_UTILS.generateCentinelResponseXMLString(TEST_UTILS.AUTHENTICATE_FIELD_VALUES));            
            var rawCentinelResponse = new CARDINAL_OBJ.RawCentinelResponse(command);
            var authenticateResponse = CARDINAL.CentinelResponseTransformer.getAuthenticateResponse(rawCentinelResponse);
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setShippingAddressToBasket(mockBasket, authenticateResponse); 
            var index = 1;
            for each(mockShipment in mockShipmentList){
                var shippingAddress = mockShipment.getShippingAddress();
                Assert.areEqual(authenticateResponse.userFirstName, shippingAddress.getFirstName(), "'First Name' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.userLastName, shippingAddress.getLastName(), "'Last Name' in basket " + index + "does not match!");
                Assert.areEqual(authenticateResponse.shippingAddress1, shippingAddress.getAddress1(), "'Address1' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingAddress2, shippingAddress.getAddress2(), "'Address2' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingCountryCode, shippingAddress.getCountryCode(), "'Country Code' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingCity, shippingAddress.getCity(), "'City' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingState, shippingAddress.getStateCode(), "'State Code' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingPostalCode, shippingAddress.getPostalCode(), "'Postal Code' in basket" + index + " does not match!");
                Assert.areEqual(authenticateResponse.shippingPhone, shippingAddress.getPhone(), "'Phone' in basket" + index + "does not match!");
                index=+1;       
            }
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setBillingAddressToBasket(mockBasket, authenticateResponse);     

            Assert.areEqual(authenticateResponse.userFirstName, mockBillingAddress.getFirstName(), "'First Name' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.userLastName, mockBillingAddress.getLastName(), "'Last Name' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingAddress1, mockBillingAddress.getAddress1(), "'Address 1' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingAddress2, mockBillingAddress.getAddress2(), "'Address 2' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingCountryCode, mockBillingAddress.getCountryCode(), "'Country Code' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.billingState, mockBillingAddress.getStateCode(), "'State Code' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.shippingPhone, mockBillingAddress.getPhone(), "'Phone' for Billing Address does not match!");
            Assert.areEqual(authenticateResponse.userEmail, mockBasket.getCustomerEmail(), "'CustomerEmail' for Basket does not match!");
            
        })
        .test("Do_not_override_shipping_phone_if_customer_provided_it", function () {
            let mockShippingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            let phone = "123-123-1234";
            
            mockShippingAddress.setPhone(phone);

            let authenticateResponse = generateAuthenticateResponse();
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setShippingAddress(mockShippingAddress, authenticateResponse); 
            
            Assert.areEqual(phone, mockShippingAddress.getPhone(), "'Phone' should not be overriden if present!"); 
           
        })
        .test("Set_shipping_phone_received_from_paypal_if_customer_didnt_provide_one", function () {
            let mockShippingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            let authenticateResponse = generateAuthenticateResponse();
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setShippingAddress(mockShippingAddress, authenticateResponse); 
            
            Assert.areEqual(TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorShippingPhone, mockShippingAddress.getPhone(), "'Phone' received from PayPal should be set as shipping phone!"); 
           
        })
        .test("Shipping_firstname_and_lastname_should_be_fetched_from_the_authenticateresponse_field_shippingFullName", function () {
            let testFirstName = TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserFirstName;
            let testLastName = TEST_UTILS.AUTHENTICATE_FIELD_VALUES.ProcessorUserLastName;
            
            var mockShippingAddress = new TEST_MOCKS.MockPopulateOrderAddress();
            
            mockShippingAddress.setFirstName(testFirstName);
            mockShippingAddress.setLastName(testLastName);

            let authenticateResponse = generateAuthenticateResponse();
            
            CARDINAL_OBJ.PopulateAddressInformationHelper.setShippingAddress(mockShippingAddress, authenticateResponse);
            
            Assert.areEqual(testFirstName, mockShippingAddress.getFirstName(), "'First Name' for Shipping address does not match!");
            Assert.areEqual(testLastName, mockShippingAddress.getLastName(), "'Last Name' for Shipping address does not match!");
        });

    return PIPELET_NEXT;
};