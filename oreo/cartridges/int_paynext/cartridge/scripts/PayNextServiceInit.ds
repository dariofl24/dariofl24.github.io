importPackage(dw.svc);
importPackage(dw.net);
importPackage(dw.io);
importPackage(dw.ws);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);

importScript("converse_core:constants.ds");
importScript("converse_core:common/libNamespace.ds");
importScript("objects/PaynextVerificationStatus.ds");

importScript("utils/PayNextUtils.ds");


var logger = Logger.getRootLogger();
logger.debug("PayNext service registry");


ServiceRegistry.configure("PayNext.GetSecurityToken", {
    initServiceClient: function() {
        logger.debug("PayNext.GetSecurityToken initServiceClient");
        this.webReference = webreferences2.TransactionPaymentService;
        return this.webReference.getDefaultService();
    },
    createRequest: function(svc:SOAPService) {  
        setSecurity(svc);
        var requestObject = new this.webReference.com.arvato.services.GetSecurityToken();
        requestObject.setRequest(new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_requests.RequestGetSecurityToken());
        return requestObject;
    },
    execute: function(svc:SOAPService, requestObject) {
        logger.debug("Sending PayNext GetSecurityToken request");

        var response = svc.serviceClient.getSecurityToken(requestObject.getRequest());

        logger.debug("Received PayNext GetSecurityToken response isSucess: {0}", response.isSuccess());

        return response;
    },
    parseResponse: function(svc:SOAPService, responseObject) {
        var responseWrapper = {};
        responseWrapper.PaynextVerificationStatus = new integration.paynext.PaynextVerificationStatus();
        
        if(!responseObject.isSuccess()) {
            responseWrapper.PaynextVerificationStatus.passedSecurityToken = responseObject.isSuccess();
            
            responseWrapper.PaynextVerificationStatus.errorMessage = responseObject.getError().getMessage();
            
            //responseWrapper = getErrorResponseWrapper(responseObject);
        }
        else {
            responseWrapper.PaynextVerificationStatus.passedSecurityToken = responseObject.isSuccess();
            responseWrapper.PaynextVerificationStatus.securityToken = responseObject.getSecurityToken();
        }
    
        return responseWrapper;
    },
    mockCall: function(service : SOAPService, request : Object) : Object {
        logger.debug("GetSecurityToken Mock");
        var responseMockObject = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_responses.ResponseGetSecurityToken();
        responseMockObject.setSuccess(true);
        responseMockObject.setSecurityToken("SecurityToken");
        responseMockObject.setRSAPublicKey("RSAPublicKey");
        return responseMockObject;
        
    }
});


ServiceRegistry.configure("PayNext.SavePayment", {
    initServiceClient: function() {
        logger.debug("PayNext.SavePayment initServiceClient");
        this.webReference = webreferences2.TransactionPaymentService;
        return this.webReference.getDefaultService();
    },
    createRequest: function(svc:SOAPService, securityToken, data) { 
    
        setSecurity(svc);
        var requestObject = new this.webReference.com.arvato.services.SavePayment();

        var requestSavePaymentObject = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_requests.RequestSavePayment();
        requestSavePaymentObject.setSecurityToken(securityToken);
        
        if( data ) {
            // CreditCard
            var paymentData = null;

            if( data.Method == converse.constants.PaymentMethodId.CreditCard) {
                
                switch (data.CreditCardType) {
                    case converse.constants.CreditCardType.Visa: 
                    case converse.constants.CreditCardType.VisaDebit: 
                    case converse.constants.CreditCardType.CarteBleue: 
                    case converse.constants.CreditCardType.CarteBancaire: 
                    case converse.constants.CreditCardType.CartaSI: 
                    case converse.constants.CreditCardType.PostePay: 
                        paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataCreditCardVisa(); 
                        break;
                    case converse.constants.CreditCardType.MasterCard: 
                        paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataCreditCardMasterCard(); 
                        break;
                    case converse.constants.CreditCardType.AmericanExpress: 
                        paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataCreditCardAmericanExpress(); 
                        break;
                    default:
                        var msg = "unrecognized credit card data::"
                        for (var field in data) {
                            msg += " data[" + field + "] = " + data[field] + "; ";
                        }
                        logger.error(msg);
                        throw msg;
                }
                
                paymentData.setCardHolder(data.CreditCardHolder);
                paymentData.setCardNumber(data.CreditCardNumber);
                paymentData.setCVC(data.CreditCardCVC);
                paymentData.setExpirationMonth(data.CreditCardExpirationMonth);
                paymentData.setExpirationYear(data.CreditCardExpirationYear);
                
             } else if( data.Method == converse.constants.PaymentMethodId.PayPal) {
            	// PAYPAL
                paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataPayPal();

            } else if( data.Method == converse.constants.PaymentMethodId.IDeal) {
            	// IDEAL
                paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataIDealExt();
                paymentData.setHolder(data.AccountHolder);
                paymentData.setBankName(data.BankName);
                paymentData.setCountry(data.Country);

            } else if( data.Method == converse.constants.PaymentMethodId.Sofort) {
            	// SOFORT
                paymentData = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataDirectEBanking();

           }
            requestSavePaymentObject.setPaymentData(paymentData);
        }
        
        requestObject.setRequest(requestSavePaymentObject);
        return requestObject;
    },
    execute: function(svc:SOAPService, requestObject) {
        logger.debug("Sending PayNext SavePayment request");

        var response = svc.serviceClient.savePayment(requestObject.getRequest());
        
        logger.debug("Received PayNext SavePayment response isSucess: {0}", response.isSuccess());
        
        return response;
    },
    filterLogMessage: function(msg:String){
		return msg.replace(/\"cardNumber\"\:\"[0-9]{12}/g,"\"cardNumber\":\"************");
	},
    parseResponse: function(svc:SOAPService, responseObject) {
        var responseWrapper = {};
        responseWrapper.PaynextVerificationStatus = new integration.paynext.PaynextVerificationStatus();
        
        if(!responseObject.isSuccess()) {
            responseWrapper.PaynextVerificationStatus.passedSavePayment = responseObject.isSuccess();
            
            var errorObject = responseObject.getError();
            if (errorObject.getMessage()) {
                responseWrapper.PaynextVerificationStatus.errorMessage = errorObject.getMessage();
            } else {
                var validationErrors = errorObject.getValidationErrors();
                if (validationErrors) {
                    var validationErrorList = validationErrors.getErrorValidationEntry();
                    for (var i: Number = 0; i < validationErrorList.size(); i++) {
                        var validationError = validationErrorList.get(i);
                        responseWrapper.PaynextVerificationStatus.errorMessage = validationError.getMessage();
                    }

                }
            }
      
        }
        else {
            responseWrapper.PaynextVerificationStatus.passedSavePayment = responseObject.isSuccess();
            responseWrapper.PaynextVerificationStatus.paymentToken = responseObject.getPaymentToken();
        }
        
        return responseWrapper;
    },
    mockCall: function(service : SOAPService, request : Object) : Object {
        logger.debug("SavePayment Mock");
        var error = null;
        var responseMockObject = null;
        
        if( request.getRequest().getSecurityToken() != null ) {
            if( request.getRequest().getPaymentData() == null ) {
                return error = getMockResponseError("The PaymentData property of the RequestSavePayment is null!");
            }
            else {
                responseMockObject =  new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_responses.ResponseSavePayment();
                responseMockObject.setPaymentToken("valid_payment_token");
                responseMockObject.setSuccess(true);
                return responseMockObject;
            }
        }
        else {
                return error = getMockResponseError("The security token  is not of a GUID format");
        }
    }
});


ServiceRegistry.configure("PayNext.GetPaymentInfo", {
    initServiceClient: function() {
        logger.debug("PayNext.GetPaymentInfo initServiceClient");
        this.webReference = webreferences2.TransactionPaymentService;
        return this.webReference.getDefaultService();
    },
    createRequest: function(svc:SOAPService, paymentToken) {    
        setSecurity(svc);
        var requestObject = new this.webReference.com.arvato.services.GetPaymentInfo();
        
        var requestGetPaymentObject = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_requests.RequestGetPaymentInfo();
        requestGetPaymentObject.setPaymentToken(paymentToken);

        requestObject.setRequest(requestGetPaymentObject);
        return requestObject;
    },
    execute: function(svc:SOAPService, requestObject) {
        logger.debug("Sending PayNext GetPaymentInfo request");

        var response = svc.serviceClient.getPaymentInfo(requestObject.getRequest());
        
        logger.debug("Received PayNext GetPaymentInfo response isSucess: {0}", response.isSuccess());
        
        return response;
    },
    parseResponse: function(svc:SOAPService, responseObject) {
        var responseWrapper = {};
        responseWrapper.PaynextVerificationStatus = new integration.paynext.PaynextVerificationStatus();
        
        if(!responseObject.isSuccess()) {
            responseWrapper.PaynextVerificationStatus.passedPaymentInfo = responseObject.isSuccess();
            
            responseWrapper.PaynextVerificationStatus.errorMessage = responseObject.getError().getMessage();
        }
        else {
            
            responseWrapper.PaynextVerificationStatus.passedPaymentInfo = responseObject.isSuccess();
            logger.debug(responseObject.getPayment().getClass());
            if (responseObject.getPayment().getClass() == this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataPayPal().getClass() ) {
               responseWrapper.Method = converse.constants.PaymentMethodId.PayPal;
            }
            else {
                responseWrapper.Method = converse.constants.PaymentMethodId.CreditCard;
                responseWrapper.CardHolder = responseObject.getPayment().getCardHolder();
                responseWrapper.CardNumber = responseObject.getPayment().getCardNumber();
                responseWrapper.CVC = responseObject.getPayment().getCVC();
                responseWrapper.ExpirationMonth = responseObject.getPayment().getExpirationMonth();
                responseWrapper.ExpirationYear = responseObject.getPayment().getExpirationYear();
            }
        }
        return responseWrapper;
    },
    mockCall: function(service : SOAPService, request : Object) : Object {
        var responseMockObject =  new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_responses.ResponseGetPaymentInfo();
 
        if( request.getRequest().getPaymentToken() == "cc_valid_token" ) {
            
            // Based on example response in "PayNext - V7.1.9 - Direct Model Integration Guide.pdf"
            var visaCard = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataCreditCardVisa();
            visaCard.setCardHolder("Jon Doe");
            visaCard.setCardNumber("xxxxxxxxxxxx0000");
            visaCard.setCVC("*********");
            visaCard.setExpirationMonth(12);
            visaCard.setExpirationYear(2014);
            
            responseMockObject.setSuccess(true);
            responseMockObject.setPayment(visaCard);
            
            return responseMockObject;
        }
        else {
        	if( request.getRequest().getPaymentToken() == "pp_valid_token" ) {
            
            var paypal = new this.webReference.org.datacontract.schemas._2004._07.pmg_plugin_common_paymenttypes.PaymentDataPayPal();
            
            responseMockObject.setSuccess(true);
            responseMockObject.setPayment(paypal);
            
            return responseMockObject;
            }
            else{
	            if (request.getRequest().getPaymentToken() == "invalid_token" ) {
	                return getMockResponseError("Could not find payment with PaymentToken = invalid_token");
	            }
	            else {
	                return getMockResponseError("The PaymentToken provided in the RequestGetPaymentInfo request is null or empty");
	            }
            }
        }
    }
});

ServiceRegistry.configure("PayNext.Authorize", {
    initServiceClient: function() {
        logger.debug("PayNext.Authorize initServiceClient");
        this.webReference = webreferences2.TransactionPaymentService;
        return this.webReference.getDefaultService();
    },
    createRequest: function(svc:SOAPService, paymentToken, authData) {
        setSecurity(svc);
        var requestObject = new this.webReference.com.arvato.services.Authorize();

        var requestAuthorizeObject = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_requests.RequestAuthorize();
        requestAuthorizeObject.setPaymentToken(paymentToken);
        
        if (authData != null ) {
            requestAuthorizeObject.setCountryCode(authData.countryCode);
            requestAuthorizeObject.setCurrency(authData.currency);
            requestAuthorizeObject.setExternalId(authData.externalId);
            requestAuthorizeObject.setReturnUrl(authData.returnUrl);
            requestAuthorizeObject.setClientIp(authData.ipAddress);
            
            var billingAddress = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model.AddressInfo();
            
            billingAddress.setCity(authData.order.billingAddress.City);
            billingAddress.setCountryCode(authData.order.billingAddress.CountryCode);
            billingAddress.setEmail(authData.order.billingAddress.Email);
            billingAddress.setFirstName(authData.order.billingAddress.FirstName);
            billingAddress.setLastName(authData.order.billingAddress.LastName);
            billingAddress.setState(authData.order.billingAddress.State);
            billingAddress.setStreet1(authData.order.billingAddress.Street1);
            billingAddress.setZip(authData.order.billingAddress.Zip);
            
            var shippingAddress = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model.AddressInfo();
            
            shippingAddress.setCity(authData.order.shippingAddress.City);
            shippingAddress.setCountryCode(authData.order.shippingAddress.CountryCode);
            shippingAddress.setEmail(authData.order.shippingAddress.Email);
            shippingAddress.setFirstName(authData.order.shippingAddress.FirstName);
            shippingAddress.setLastName(authData.order.shippingAddress.LastName);
            shippingAddress.setState(authData.order.shippingAddress.State);
            shippingAddress.setStreet1(authData.order.shippingAddress.Street1);
            shippingAddress.setZip(authData.order.shippingAddress.Zip);
            
            
            var order = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model.OrderInfo();
            
            order.setAmount(authData.order.amount);
            order.setBillingAddress(billingAddress);
            order.setShippingAddress(shippingAddress);
            
            requestAuthorizeObject.setOrder(order);
        }
        
        requestObject.setRequest(requestAuthorizeObject);
        return requestObject;
    },
    execute: function(svc:SOAPService, requestObject) {
        logger.debug("Sending PayNext Authorize request");

        var response = svc.serviceClient.authorize(requestObject.getRequest());
        
        logger.debug("Received PayNext Authorize response isSucess: {0}", response.isSuccess());
        
        return response;
    },
    parseResponse: function(svc:SOAPService, responseObject) {
        var responseWrapper = {};
        responseWrapper.PaynextVerificationStatus = new integration.paynext.PaynextVerificationStatus();
        
        if(!responseObject.isSuccess()) {
            responseWrapper.PaynextVerificationStatus.passedVerification = responseObject.isSuccess();
            
            var paynextError = responseObject.getError();
            
            // OTHER ERRORS
            
            var paynextErrorCode = paynextError.getErrorCode();
            
            if ( paynextErrorCode != null ) {
                
                responseWrapper.PaynextVerificationStatus.errorMessage = Resource.msg(paynextErrorCode.value(), "paynext", null);
                
                logger.debug(paynextErrorCode.value());
                logger.debug(paynextError.getMessage());
                
            }
            else {
                responseWrapper.PaynextVerificationStatus.errorMessage = paynextError.getMessage();
                logger.debug(responseObject.getError().getMessage());
                
            }
        }
        else {
            responseWrapper.PaynextVerificationStatus.passedVerification = responseObject.isSuccess();
            responseWrapper.PaynextVerificationStatus.authorizationDone = responseObject.isAuthorizationDone() ? true : false;
            responseWrapper.PaynextVerificationStatus.transactionToken = responseObject.getTransactionToken();
            responseWrapper.PaynextVerificationStatus.shopActionRequired = responseObject.isShopActionRequired() ? true : false;
            
            var userData : ArrayList = responseObject.getUserData().getKeyValueOfstringanyType();
            
            for each (data in userData) {
                 switch (data.getKey()) {
                    case 'requestId':
                        responseWrapper.PaynextVerificationStatus.requestId = data.getValue();
                    break;
                    case 'authorizationCode':
                        responseWrapper.PaynextVerificationStatus.authorizationCode = data.getValue();
                    break;
                    // PAYPAL USER DATA??
                 }
            
            }
            
            if ( responseWrapper.PaynextVerificationStatus.shopActionRequired ) {
                // Waiting a ShopActionRedirectToPaymentGateway
                responseWrapper.PaynextVerificationStatus.shopActionUrl = responseObject.getShopAction().getUrl();
            }
        }
        
        return responseWrapper;
    },
    mockCall: function(service : SOAPService, request : Object) : Object {
        if( request.getRequest().getPaymentToken() == "any_valid_token" ) {
            var responseMockObject =  new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_responses.ResponseAuthorize();
            
            // Based on example response in "PayNext - V7.1.9 - Direct Model Integration Guide.pdf"
            responseMockObject.setSuccess(true);
            responseMockObject.setAuthorizationDone(true);
            responseMockObject.setTransactionToken("token");
            responseMockObject.setUserData(new this.webReference.com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfKeyValueOfstringanyType());
            
            return responseMockObject;
        }
        else {
            return getMockResponseError("The PaymentToken property of the RequestAuthorize request is null or empty!");
        }
    }
});


ServiceRegistry.configure("PayNext.GetTransactionInfo", {
    initServiceClient: function() {
        logger.debug("PayNext.GetTransactionInfo initServiceClient");
        this.webReference = webreferences2.TransactionPaymentService;
        return this.webReference.getDefaultService();
    },
    createRequest: function(svc:SOAPService, transactionToken) {    
        setSecurity(svc);
        var requestObject = new this.webReference.com.arvato.services.GetTransactionInfo();
        
        var requestGetTransactionObject = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_requests.RequestGetTransactionInfo();
        
        requestGetTransactionObject.setTransactionToken(transactionToken);
        requestObject.setRequest(requestGetTransactionObject);
        return requestObject;
    },
    execute: function(svc:SOAPService, requestObject) {
        logger.debug("Sending PayNext GetTransactionInfo request");

        var response = svc.serviceClient.getTransactionInfo(requestObject.getRequest());
        
        logger.debug("Received PayNext GetTransactionInfo response isSucess: {0}", response.isSuccess());
        
        return response;
    },
    parseResponse: function(svc:SOAPService, responseObject) {
        var responseWrapper = {};
        
        responseWrapper.PaynextVerificationStatus = new integration.paynext.PaynextVerificationStatus();
        
        if(!empty(responseObject.getError())) {
            responseWrapper.PaynextVerificationStatus.passedTransactionInfo = responseObject.isSuccess();
            
            responseWrapper.PaynextVerificationStatus.errorMessage = responseObject.getError().getMessage();
        }
        else {
            responseWrapper.PaynextVerificationStatus.passedTransactionInfo = responseObject.isSuccess();
            responseWrapper.PaynextVerificationStatus.authorizationDone = responseObject.isAuthorizationDone() ? true : false;
            responseWrapper.PaynextVerificationStatus.authorizationStatus = responseObject.getStatus();
        }
        
        return responseWrapper;
    },
    mockCall: function(service : SOAPService, request : Object) : Object {
        var responseMockObject =  new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_responses.ResponseGetTransactionInfo();
        
        if( request.getRequest().getTransactionToken() == "any_valid_token" ) {
            
            responseMockObject.setSuccess(true);
            responseMockObject.setAuthorizationDone(true);
            responseMockObject.setStatus('Authorized');

            return responseMockObject;
        }
        else {
            var error = new this.webReference.org.datacontract.schemas._2004._07.pmg_externalapi_v2_model_errors.Error();
            error.setMessage("Transaction not found");
            
            responseMockObject.setSuccess(true);
            responseMockObject.setError(error);
            
            return responseMockObject;
            
        }
    }
});