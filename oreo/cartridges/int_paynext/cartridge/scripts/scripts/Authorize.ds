/**
*   @input Order: dw.order.Order 
*   @input IpAddress : String
*
*   @output PaymentVerificationStatus : Object

*/
importPackage(dw.system);
importPackage(dw.svc);
importScript("converse_core:constants.ds");

importScript("converse_core:common/libNamespace.ds");
importScript("objects/PaynextVerificationStatus.ds");


function execute( args : PipelineDictionary ) : Number
{
	var logger = Logger.getRootLogger();
    var service : SOAPService = ServiceRegistry.get("PayNext.Authorize");
    
    var orderRef = args.Order;
    
    var payIns : dw.order.OrderPaymentInstrument = orderRef.getPaymentInstruments()[0];
    
    // PaymentData
    var paymentToken = payIns.custom.paynextPaymentToken;
    
     // Data
    var authorize = new Object();
    authorize.countryCode = orderRef.defaultShipment.shippingAddress.countryCode;
    authorize.currency = orderRef.currencyCode;
    authorize.ipAddress = args.IpAddress;
    
    // NEEDS VALIDATION
    authorize.externalId = orderRef.orderNo;
    
    authorize.returnUrl = dw.web.URLUtils.abs('PayNext-Validate', 'externalRef', orderRef.orderNo);
    
    var shippingAddress = new Object();
    shippingAddress.City = orderRef.defaultShipment.shippingAddress.city;
    shippingAddress.CountryCode = orderRef.defaultShipment.shippingAddress.countryCode;
    shippingAddress.Email = orderRef.customerEmail;
    shippingAddress.FirstName = orderRef.defaultShipment.shippingAddress.firstName;
    shippingAddress.LastName = orderRef.defaultShipment.shippingAddress.lastName;
    shippingAddress.State = orderRef.defaultShipment.shippingAddress.stateCode;;
    shippingAddress.Street1 = orderRef.defaultShipment.shippingAddress.address1;
    shippingAddress.Zip = orderRef.defaultShipment.shippingAddress.postalCode;
    
    
    var billingAddress = new Object();
    
    billingAddress.City = orderRef.billingAddress.city;
    billingAddress.CountryCode = orderRef.billingAddress.countryCode;
    billingAddress.Email = orderRef.customerEmail;
    billingAddress.FirstName = orderRef.billingAddress.firstName;
    billingAddress.LastName = orderRef.billingAddress.lastName;
    billingAddress.State = orderRef.billingAddress.stateCode;;
    billingAddress.Street1 = orderRef.billingAddress.address1;
    billingAddress.Zip = orderRef.billingAddress.postalCode;
    
    var order = new Object();
    order.amount = orderRef.totalGrossPrice.decimalValue;

    order.billingAddress = billingAddress;
    order.shippingAddress = shippingAddress;
    
    authorize.order = order;
    
    var result = service.call(paymentToken, authorize);
    
    if( result.getStatus() == 'OK' ) {
        
       args.PaymentVerificationStatus = result.getObject().PaynextVerificationStatus;
        
        if( args.PaymentVerificationStatus.hasPassedVerification() ) {
           
            var pt : dw.order.PaymentTransaction = payIns.getPaymentTransaction();
            pt.setTransactionID(args.PaymentVerificationStatus.transactionToken);
            
            payIns.custom.paymentResponseMsg = "success";
            payIns.custom.paymentMerchantID = paymentToken;
            payIns.custom.paymentRequestID = args.PaymentVerificationStatus.requestId;
            payIns.custom.paymentStatusCode = args.PaymentVerificationStatus.authorizationCode;
        }
        else {
            
            return PIPELET_ERROR;
        }
    }
    else {
        
        args.PaymentVerificationStatus = new integration.paynext.PaynextVerificationStatus(); 
        args.PaymentVerificationStatus.passedVerification = false;
        args.PaymentVerificationStatus.errorMessage = result.getErrorMessage();
        
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}